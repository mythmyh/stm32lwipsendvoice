
LWIPReceiveVoice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cd8  080139b4  080139b4  000239b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801668c  0801668c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801668c  0801668c  0002668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016694  08016694  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016694  08016694  00026694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016698  08016698  00026698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801669c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000115e8  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000e00  20011670  20011670  00030088  2**0
                  ALLOC
 12 .sram         00017ae8  68000000  08016724  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037f57  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006cc9  00000000  00000000  0006800f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  0006ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001918  00000000  00000000  000706c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f394  00000000  00000000  00071fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ed32  00000000  00000000  000a1374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e37e6  00000000  00000000  000d00a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001b388c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072e8  00000000  00000000  001b38e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801399c 	.word	0x0801399c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801399c 	.word	0x0801399c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] = { 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <WM8978_Register_Wirter+0x60>)
 80005b8:	f004 fcc4 	bl	8004f44 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200009d8 	.word	0x200009d8

080005cc <WAV_FileRead>:
	WM8978_Register_Wirter(48,regval|gain<<0);//设置R48
};


uint32_t WAV_FileRead(uint8_t *buf, uint32_t size)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
		memcpy(buf, wavsram+(wav_index*size), size);
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <WAV_FileRead+0x54>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	fb03 f302 	mul.w	r3, r3, r2
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <WAV_FileRead+0x58>)
 80005e4:	4413      	add	r3, r2
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f012 f930 	bl	8012850 <memcpy>
		wav_index+=1;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <WAV_FileRead+0x54>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <WAV_FileRead+0x54>)
 80005f8:	6013      	str	r3, [r2, #0]
		if(wav_end){
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <WAV_FileRead+0x5c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <WAV_FileRead+0x3a>
			return 0;
 8000602:	2300      	movs	r3, #0
 8000604:	e007      	b.n	8000616 <WAV_FileRead+0x4a>
		}
		if(wav_index>=10)wav_index=0;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <WAV_FileRead+0x54>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b09      	cmp	r3, #9
 800060c:	dd02      	ble.n	8000614 <WAV_FileRead+0x48>
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <WAV_FileRead+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
		return 1;
 8000614:	2301      	movs	r3, #1
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000a8 	.word	0x200000a8
 8000624:	68000000 	.word	0x68000000
 8000628:	200000a4 	.word	0x200000a4

0800062c <HAL_I2S_Transmit_DMAEx>:
	if(auxen)WM8978_AUX_Gain(7);//AUX 6dB增益
	else WM8978_AUX_Gain(0);	//关闭AUX输入
}

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	807b      	strh	r3, [r7, #2]
	printf("hello dmaex\n");
 800063a:	4857      	ldr	r0, [pc, #348]	; (8000798 <HAL_I2S_Transmit_DMAEx+0x16c>)
 800063c:	f012 f9a4 	bl	8012988 <puts>
	uint32_t tmpreg_cfgr;

	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d005      	beq.n	8000652 <HAL_I2S_Transmit_DMAEx+0x26>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <HAL_I2S_Transmit_DMAEx+0x26>
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <HAL_I2S_Transmit_DMAEx+0x2a>
		return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e09c      	b.n	8000790 <HAL_I2S_Transmit_DMAEx+0x164>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d101      	bne.n	8000666 <HAL_I2S_Transmit_DMAEx+0x3a>
 8000662:	2302      	movs	r3, #2
 8000664:	e094      	b.n	8000790 <HAL_I2S_Transmit_DMAEx+0x164>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2201      	movs	r2, #1
 800066a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b01      	cmp	r3, #1
 8000678:	d005      	beq.n	8000686 <HAL_I2S_Transmit_DMAEx+0x5a>
		__HAL_UNLOCK(hi2s);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 8000682:	2302      	movs	r3, #2
 8000684:	e084      	b.n	8000790 <HAL_I2S_Transmit_DMAEx+0x164>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2203      	movs	r2, #3
 800068a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d002      	beq.n	80006b2 <HAL_I2S_Transmit_DMAEx+0x86>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d10a      	bne.n	80006c8 <HAL_I2S_Transmit_DMAEx+0x9c>
		hi2s->TxXferSize = (Size << 1U);
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80006c6:	e005      	b.n	80006d4 <HAL_I2S_Transmit_DMAEx+0xa8>
	} else {
		hi2s->TxXferSize = Size;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	887a      	ldrh	r2, [r7, #2]
 80006cc:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	887a      	ldrh	r2, [r7, #2]
 80006d2:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d8:	2200      	movs	r2, #0
 80006da:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e0:	2200      	movs	r2, #0
 80006e2:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e8:	4a2c      	ldr	r2, [pc, #176]	; (800079c <HAL_I2S_Transmit_DMAEx+0x170>)
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <HAL_I2S_Transmit_DMAEx+0x174>)
 80006f2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f8:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <HAL_I2S_Transmit_DMAEx+0x178>)
 80006fa:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000700:	2200      	movs	r2, #0
 8000702:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000708:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000710:	461c      	mov	r4, r3
 8000712:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000718:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	4622      	mov	r2, r4
 8000720:	f001 fe16 	bl	8002350 <HAL_DMAEx_MultiBufferStart_IT>
 8000724:	4603      	mov	r3, r0
	if (HAL_OK
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00f      	beq.n	800074a <HAL_I2S_Transmit_DMAEx+0x11e>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f043 0208 	orr.w	r2, r3, #8
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e022      	b.n	8000790 <HAL_I2S_Transmit_DMAEx+0x164>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <HAL_I2S_Transmit_DMAEx+0x13c>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	69da      	ldr	r2, [r3, #28]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000766:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d107      	bne.n	8000786 <HAL_I2S_Transmit_DMAEx+0x15a>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f042 0202 	orr.w	r2, r2, #2
 8000784:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	371c      	adds	r7, #28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	080139b4 	.word	0x080139b4
 800079c:	080007a9 	.word	0x080007a9
 80007a0:	080007e1 	.word	0x080007e1
 80007a4:	08000809 	.word	0x08000809

080007a8 <DMAEx_XferCpltCallback>:

static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	if(DMA1_Stream4->CR&(1<<19)){
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <DMAEx_XferCpltCallback+0x30>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d009      	beq.n	80007d0 <DMAEx_XferCpltCallback+0x28>

	if (WAV_FileRead((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0)) == 0)
 80007bc:	f240 31ca 	movw	r1, #970	; 0x3ca
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <DMAEx_XferCpltCallback+0x34>)
 80007c2:	f7ff ff03 	bl	80005cc <WAV_FileRead>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <DMAEx_XferCpltCallback+0x28>
	{
		Audio_Player_Stop();
 80007cc:	f000 f874 	bl	80008b8 <Audio_Player_Stop>
	}
	//printf("cplt 111\n");

	}

}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40026070 	.word	0x40026070
 80007dc:	200000ac 	.word	0x200000ac

080007e0 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if (WAV_FileRead((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 80007e8:	f240 31ca 	movw	r1, #970	; 0x3ca
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <DMAEx_XferM1CpltCallback+0x24>)
 80007ee:	f7ff feed 	bl	80005cc <WAV_FileRead>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <DMAEx_XferM1CpltCallback+0x1c>
	{
		Audio_Player_Stop();
 80007f8:	f000 f85e 	bl	80008b8 <Audio_Player_Stop>
	}
	//printf("m1 222\n");


}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000478 	.word	0x20000478

08000808 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <Audio_Player_Init>:
	SPI2->I2SPR=tempreg;			//����I2SPR�Ĵ���
	return 0;
}


void Audio_Player_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	WM8978_Register_Wirter(0, 0);
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fea0 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(1, 0x0F);
 8000828:	210f      	movs	r1, #15
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe9c 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000830:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fe97 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(3, 0x7F);
 800083a:	217f      	movs	r1, #127	; 0x7f
 800083c:	2003      	movs	r0, #3
 800083e:	f7ff fe93 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(4, 0x10);
 8000842:	2110      	movs	r1, #16
 8000844:	2004      	movs	r0, #4
 8000846:	f7ff fe8f 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(6, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2006      	movs	r0, #6
 800084e:	f7ff fe8b 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(10, 0x08);
 8000852:	2108      	movs	r1, #8
 8000854:	200a      	movs	r0, #10
 8000856:	f7ff fe87 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(43, 0x10);
 800085a:	2110      	movs	r1, #16
 800085c:	202b      	movs	r0, #43	; 0x2b
 800085e:	f7ff fe83 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(52,40);		// 设置LOUT2左声道音�????
 8000862:	2128      	movs	r1, #40	; 0x28
 8000864:	2034      	movs	r0, #52	; 0x34
 8000866:	f7ff fe7f 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(53,40|(1<<8));
 800086a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800086e:	2035      	movs	r0, #53	; 0x35
 8000870:	f7ff fe7a 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(54, 40);
 8000874:	2128      	movs	r1, #40	; 0x28
 8000876:	2036      	movs	r0, #54	; 0x36
 8000878:	f7ff fe76 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(55, 40 | (1 << 8));
 800087c:	f44f 7194 	mov.w	r1, #296	; 0x128
 8000880:	2037      	movs	r0, #55	; 0x37
 8000882:	f7ff fe71 	bl	8000568 <WM8978_Register_Wirter>


}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <Audio_Player_Start>:
	WM8978_Register_Wirter(53, num | (1 << 8));
	WM8978_Register_Wirter(54, num);
	WM8978_Register_Wirter(55, num | (1 << 8));
}

void Audio_Player_Start() {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	wav_index=0;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <Audio_Player_Start+0x1c>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 8000896:	f240 13e5 	movw	r3, #485	; 0x1e5
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <Audio_Player_Start+0x20>)
 800089c:	4904      	ldr	r1, [pc, #16]	; (80008b0 <Audio_Player_Start+0x24>)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <Audio_Player_Start+0x28>)
 80008a0:	f7ff fec4 	bl	800062c <HAL_I2S_Transmit_DMAEx>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000a8 	.word	0x200000a8
 80008ac:	20000478 	.word	0x20000478
 80008b0:	200000ac 	.word	0x200000ac
 80008b4:	20000b20 	.word	0x20000b20

080008b8 <Audio_Player_Stop>:

void Audio_Player_Resume(void) {
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	printf("stop\n");
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <Audio_Player_Stop+0x14>)
 80008be:	f012 f863 	bl	8012988 <puts>
	HAL_I2S_DMAStop(&hi2s2);
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <Audio_Player_Stop+0x18>)
 80008c4:	f004 ff86 	bl	80057d4 <HAL_I2S_DMAStop>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	080139c0 	.word	0x080139c0
 80008d0:	20000b20 	.word	0x20000b20

080008d4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008dc:	1d39      	adds	r1, r7, #4
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	2201      	movs	r2, #1
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <__io_putchar+0x20>)
 80008e6:	f006 fb2c 	bl	8006f42 <HAL_UART_Transmit>
  return ch;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000a7c 	.word	0x20000a7c

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f001 f826 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f81a 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f928 	bl	8000b58 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000908:	f006 feb4 	bl	8007674 <MX_LWIP_Init>
  MX_UART5_Init();
 800090c:	f000 f8da 	bl	8000ac4 <MX_UART5_Init>
  MX_DMA_Init();
 8000910:	f000 f902 	bl	8000b18 <MX_DMA_Init>

  MX_I2S2_Init();
 8000914:	f000 f8a8 	bl	8000a68 <MX_I2S2_Init>
  MX_I2C1_Init();
 8000918:	f000 f878 	bl	8000a0c <MX_I2C1_Init>
  MX_FSMC_Init();
 800091c:	f000 f998 	bl	8000c50 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  printf("server\n");
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <main+0x3c>)
 8000922:	f012 f831 	bl	8012988 <puts>





   Audio_Player_Init();
 8000926:	f7ff ff79 	bl	800081c <Audio_Player_Init>
   tcp_server_init();
 800092a:	f000 fd2f 	bl	800138c <tcp_server_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 800092e:	f006 ffd3 	bl	80078d8 <MX_LWIP_Process>
 8000932:	e7fc      	b.n	800092e <main+0x36>
 8000934:	080139c8 	.word	0x080139c8

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f011 ff90 	bl	801286c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ac:	23a8      	movs	r3, #168	; 0xa8
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 fc7b 	bl	80062b8 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c8:	f000 f9a2 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2105      	movs	r1, #5
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fedc 	bl	80067a8 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 f98b 	bl	8000d10 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <MX_I2C1_Init+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x58>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a4a:	f004 f937 	bl	8004cbc <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 f95c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200009d8 	.word	0x200009d8
 8000a60:	40005400 	.word	0x40005400
 8000a64:	000186a0 	.word	0x000186a0

08000a68 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <MX_I2S2_Init+0x58>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a90:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a94:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_I2S2_Init+0x54>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_I2S2_Init+0x54>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_I2S2_Init+0x54>)
 8000aaa:	f004 fd53 	bl	8005554 <HAL_I2S_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ab4:	f000 f92c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000b20 	.word	0x20000b20
 8000ac0:	40003800 	.word	0x40003800

08000ac4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_UART5_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000afc:	f006 f9d4 	bl	8006ea8 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f903 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000a7c 	.word	0x20000a7c
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_DMA_Init+0x3c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <MX_DMA_Init+0x3c>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_DMA_Init+0x3c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 2, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f001 f875 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b44:	200f      	movs	r0, #15
 8000b46:	f001 f88e 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a39      	ldr	r2, [pc, #228]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a24      	ldr	r2, [pc, #144]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_GPIO_Init+0xf4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

}
 8000c3e:	bf00      	nop
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c6a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c6e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c72:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <MX_FSMC_Init+0xbc>)
 8000c74:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c78:	2204      	movs	r2, #4
 8000c7a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 7;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ce0:	2311      	movs	r3, #17
 8000ce2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_FSMC_Init+0xb8>)
 8000cf0:	f006 f896 	bl	8006e20 <HAL_SRAM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000cfa:	f000 f809 	bl	8000d10 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000a2c 	.word	0x20000a2c
 8000d0c:	a0000104 	.word	0xa0000104

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12b      	bne.n	8000de6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000daa:	23c0      	movs	r3, #192	; 0xc0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dae:	2312      	movs	r3, #18
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <HAL_I2C_MspInit+0x8c>)
 8000dc6:	f003 fddd 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a55      	ldr	r2, [pc, #340]	; (8000f7c <HAL_I2S_MspInit+0x180>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	f040 80a3 	bne.w	8000f74 <HAL_I2S_MspInit+0x178>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 feae 	bl	8006ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000e4a:	f7ff ff61 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a43      	ldr	r2, [pc, #268]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a3c      	ldr	r2, [pc, #240]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_I2S_MspInit+0x184>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4831      	ldr	r0, [pc, #196]	; (8000f84 <HAL_I2S_MspInit+0x188>)
 8000ebe:	f003 fd61 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ec2:	2348      	movs	r3, #72	; 0x48
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4829      	ldr	r0, [pc, #164]	; (8000f84 <HAL_I2S_MspInit+0x188>)
 8000ede:	f003 fd51 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ee2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <HAL_I2S_MspInit+0x18c>)
 8000f00:	f003 fd40 	bl	8004984 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <HAL_I2S_MspInit+0x194>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f5a:	f000 fe9f 	bl	8001c9c <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_I2S_MspInit+0x16c>
    {
      Error_Handler();
 8000f64:	f7ff fed4 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_I2S_MspInit+0x190>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40003800 	.word	0x40003800
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	20000ac0 	.word	0x20000ac0
 8000f90:	40026070 	.word	0x40026070

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a28      	ldr	r2, [pc, #160]	; (8001054 <HAL_UART_MspInit+0xc0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d14a      	bne.n	800104c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_UART_MspInit+0xc4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800101c:	2308      	movs	r3, #8
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <HAL_UART_MspInit+0xc8>)
 8001028:	f003 fcac 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800102c:	2304      	movs	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800103c:	2308      	movs	r3, #8
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_UART_MspInit+0xcc>)
 8001048:	f003 fc9c 	bl	8004984 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005000 	.word	0x40005000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00

08001064 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_FSMC_MspInit+0xc8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d151      	bne.n	8001124 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_FSMC_MspInit+0xc8>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_FSMC_MspInit+0xcc>)
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <HAL_FSMC_MspInit+0xcc>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6393      	str	r3, [r2, #56]	; 0x38
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_FSMC_MspInit+0xcc>)
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010a2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80010a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010b4:	230c      	movs	r3, #12
 80010b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <HAL_FSMC_MspInit+0xd0>)
 80010be:	f003 fc61 	bl	8004984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010c2:	f240 433f 	movw	r3, #1087	; 0x43f
 80010c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010d4:	230c      	movs	r3, #12
 80010d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4816      	ldr	r0, [pc, #88]	; (8001138 <HAL_FSMC_MspInit+0xd4>)
 80010de:	f003 fc51 	bl	8004984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80010e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010f4:	230c      	movs	r3, #12
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <HAL_FSMC_MspInit+0xd8>)
 80010fe:	f003 fc41 	bl	8004984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001102:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001106:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001114:	230c      	movs	r3, #12
 8001116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <HAL_FSMC_MspInit+0xdc>)
 800111e:	f003 fc31 	bl	8004984 <HAL_GPIO_Init>
 8001122:	e000      	b.n	8001126 <HAL_FSMC_MspInit+0xc2>
    return;
 8001124:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000844 	.word	0x20000844
 8001130:	40023800 	.word	0x40023800
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021000 	.word	0x40021000
 8001140:	40020c00 	.word	0x40020c00

08001144 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800114c:	f7ff ff8a 	bl	8001064 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 fc24 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream4_IRQHandler+0x10>)
 80011b2:	f000 fe91 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000ac0 	.word	0x20000ac0

080011c0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <ETH_IRQHandler+0x10>)
 80011c6:	f002 fe11 	bl	8003dec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20002488 	.word	0x20002488

080011d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_kill>:

int _kill(int pid, int sig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <_kill+0x20>)
 80011f0:	2216      	movs	r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
	return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20011660 	.word	0x20011660

08001208 <_exit>:

void _exit (int status)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe5 	bl	80011e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800121a:	e7fe      	b.n	800121a <_exit+0x12>

0800121c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122e:	f3af 8000 	nop.w
 8001232:	4601      	mov	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
	}

return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fb2f 	bl	80008d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
	}
	return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b6:	605a      	str	r2, [r3, #4]
	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:

int _isatty(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d205      	bcs.n	8001334 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <_sbrk+0x6c>)
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a06      	ldr	r2, [pc, #24]	; (800135c <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20020000 	.word	0x20020000
 8001358:	00000700 	.word	0x00000700
 800135c:	20000848 	.word	0x20000848
 8001360:	20011670 	.word	0x20011670
 8001364:	20011660 	.word	0x20011660

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <tcp_server_init>:
 */
int first_pack=1;
int server_index=0;
int total_circle=0;
int total_length=0;
void tcp_server_init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;
	tpcb = tcp_new();
 8001392:	f009 ffbf 	bl	800b314 <tcp_new>
 8001396:	60f8      	str	r0, [r7, #12]
	err_t err;
	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <tcp_server_init+0x54>)
 800139a:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 12345);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	f243 0239 	movw	r2, #12345	; 0x3039
 80013a2:	4619      	mov	r1, r3
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f008 ff11 	bl	800a1cc <tcp_bind>
 80013aa:	4603      	mov	r3, r0
 80013ac:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK) {
 80013ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <tcp_server_init+0x3e>
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f008 ffbf 	bl	800a33c <tcp_listen_with_backlog>
 80013be:	60f8      	str	r0, [r7, #12]
		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 80013c0:	4908      	ldr	r1, [pc, #32]	; (80013e4 <tcp_server_init+0x58>)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f00a f826 	bl	800b414 <tcp_accept>
		/* deallocate the pcb */
		printf("444=====\n");

		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 80013c8:	e006      	b.n	80013d8 <tcp_server_init+0x4c>
		printf("444=====\n");
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <tcp_server_init+0x5c>)
 80013cc:	f011 fadc 	bl	8012988 <puts>
		memp_free(MEMP_TCP_PCB, tpcb);
 80013d0:	68f9      	ldr	r1, [r7, #12]
 80013d2:	2001      	movs	r0, #1
 80013d4:	f007 fac2 	bl	800895c <memp_free>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	c801a8c0 	.word	0xc801a8c0
 80013e4:	080013ed 	.word	0x080013ed
 80013e8:	080139d0 	.word	0x080139d0

080013ec <tcp_server_accept>:
 * @param  arg: not used
 * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);
	//printf("connnect 111\r\n");
	/* set priority for the newly accepted tcp connection newpcb */
	tcp_setprio(newpcb, TCP_PRIO_MIN);
 80013fa:	2101      	movs	r1, #1
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f009 fd97 	bl	800af30 <tcp_setprio>

	/* allocate structure es to maintain tcp connection information */
	es = (struct tcp_server_struct*) mem_malloc(
 8001402:	200c      	movs	r0, #12
 8001404:	f007 f8f0 	bl	80085e8 <mem_malloc>
 8001408:	6138      	str	r0, [r7, #16]
			sizeof(struct tcp_server_struct));
	if (es != NULL) {
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d026      	beq.n	800145e <tcp_server_accept+0x72>
		es->state = ES_ACCEPTED;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2200      	movs	r2, #0
 8001420:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f009 ff7a 	bl	800b324 <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_server_recv);
 8001430:	4911      	ldr	r1, [pc, #68]	; (8001478 <tcp_server_accept+0x8c>)
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	f009 ff88 	bl	800b348 <tcp_recv>

		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_server_error);
 8001438:	4910      	ldr	r1, [pc, #64]	; (800147c <tcp_server_accept+0x90>)
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f009 ffc8 	bl	800b3d0 <tcp_err>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_server_poll, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	490f      	ldr	r1, [pc, #60]	; (8001480 <tcp_server_accept+0x94>)
 8001444:	68b8      	ldr	r0, [r7, #8]
 8001446:	f009 fffd 	bl	800b444 <tcp_poll>
		tcp_server_handle(newpcb, es);
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f000 fa0b 	bl	8001868 <tcp_server_handle>
		send_information(s);
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <tcp_server_accept+0x98>)
 8001454:	f000 fa1e 	bl	8001894 <send_information>

		ret_err = ERR_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]
 800145c:	e005      	b.n	800146a <tcp_server_accept+0x7e>
	} else {
		/*  close tcp connection */
		tcp_server_connection_close(newpcb, es);
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 f9da 	bl	800181a <tcp_server_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 800146a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	08001489 	.word	0x08001489
 800147c:	08001735 	.word	0x08001735
 8001480:	0800174d 	.word	0x0800174d
 8001484:	20000004 	.word	0x20000004

08001488 <tcp_server_recv>:
 * @param  pbuf: pointer on the received pbuf
 * @param  err: error information regarding the reveived pbuf
 * @retval err_t: error code
 */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	70fb      	strb	r3, [r7, #3]
	struct tcp_server_struct *es;
	err_t ret_err;

	LWIP_ASSERT("arg != NULL", arg != NULL);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <tcp_server_recv+0x20>
 800149c:	4b93      	ldr	r3, [pc, #588]	; (80016ec <tcp_server_recv+0x264>)
 800149e:	22c5      	movs	r2, #197	; 0xc5
 80014a0:	4993      	ldr	r1, [pc, #588]	; (80016f0 <tcp_server_recv+0x268>)
 80014a2:	4894      	ldr	r0, [pc, #592]	; (80016f4 <tcp_server_recv+0x26c>)
 80014a4:	f011 f9ea 	bl	801287c <iprintf>

	es = (struct tcp_server_struct*) arg;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	613b      	str	r3, [r7, #16]

	/* if we receive an empty tcp frame from client => close connection */
	if (p == NULL) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d112      	bne.n	80014d8 <tcp_server_recv+0x50>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2203      	movs	r2, #3
 80014b6:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL) {
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <tcp_server_recv+0x42>
			/* we're done sending, close connection */
			tcp_server_connection_close(tpcb, es);
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f000 f9a9 	bl	800181a <tcp_server_connection_close>
 80014c8:	e003      	b.n	80014d2 <tcp_server_recv+0x4a>
		} else {
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_server_sent);
 80014ca:	498b      	ldr	r1, [pc, #556]	; (80016f8 <tcp_server_recv+0x270>)
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f009 ff5d 	bl	800b38c <tcp_sent>

			/* send remaining data*/
		}
		ret_err = ERR_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
 80014d6:	e103      	b.n	80016e0 <tcp_server_recv+0x258>
	}
	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if (err != ERR_OK) {
 80014d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <tcp_server_recv+0x70>
		/* free received pbuf*/
		if (p != NULL) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <tcp_server_recv+0x6a>
			es->p = NULL;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f008 f847 	bl	8009580 <pbuf_free>
		}
		ret_err = err;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	75fb      	strb	r3, [r7, #23]
 80014f6:	e0f3      	b.n	80016e0 <tcp_server_recv+0x258>
	} else if (es->state == ES_ACCEPTED) {
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d12d      	bne.n	800155c <tcp_server_recv+0xd4>
		/* first data chunk in p->payload */
		es->state = ES_RECEIVED;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]

		/* store reference to incoming pbuf (chain) */
		// es->p = p;
		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_server_sent);
 8001506:	497c      	ldr	r1, [pc, #496]	; (80016f8 <tcp_server_recv+0x270>)
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f009 ff3f 	bl	800b38c <tcp_sent>
		tcp_recved(tpcb, p->tot_len);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	891b      	ldrh	r3, [r3, #8]
 8001512:	4619      	mov	r1, r3
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f009 f827 	bl	800a568 <tcp_recved>

		/* handle the received data */
		//tcp_server_handle(tpcb, es);
		printf("connect%d \n",p->tot_len);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	891b      	ldrh	r3, [r3, #8]
 800151e:	4619      	mov	r1, r3
 8001520:	4876      	ldr	r0, [pc, #472]	; (80016fc <tcp_server_recv+0x274>)
 8001522:	f011 f9ab 	bl	801287c <iprintf>
		//memcpy(filesize,p->payload,4);
		memcpy(wavsram+server_index*970,p->payload,p->tot_len);
 8001526:	4b76      	ldr	r3, [pc, #472]	; (8001700 <tcp_server_recv+0x278>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f240 32ca 	movw	r2, #970	; 0x3ca
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b73      	ldr	r3, [pc, #460]	; (8001704 <tcp_server_recv+0x27c>)
 8001536:	18d0      	adds	r0, r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	891b      	ldrh	r3, [r3, #8]
 8001540:	461a      	mov	r2, r3
 8001542:	f011 f985 	bl	8012850 <memcpy>
		server_index+=1;
 8001546:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <tcp_server_recv+0x278>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a6c      	ldr	r2, [pc, #432]	; (8001700 <tcp_server_recv+0x278>)
 800154e:	6013      	str	r3, [r2, #0]

		send_information(s);
 8001550:	486d      	ldr	r0, [pc, #436]	; (8001708 <tcp_server_recv+0x280>)
 8001552:	f000 f99f 	bl	8001894 <send_information>

		ret_err = ERR_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	e0c1      	b.n	80016e0 <tcp_server_recv+0x258>
	} else if (es->state == ES_RECEIVED) {
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b02      	cmp	r3, #2
 8001562:	f040 809c 	bne.w	800169e <tcp_server_recv+0x216>
		/* more data received from client and previous data has been already sent*/
		if (es->p == NULL) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d114      	bne.n	8001598 <tcp_server_recv+0x110>
			printf("111====>%d\n", *(uint8_t*) p->payload);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4865      	ldr	r0, [pc, #404]	; (800170c <tcp_server_recv+0x284>)
 8001578:	f011 f980 	bl	801287c <iprintf>
			tcp_recved(tpcb, p->tot_len);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	891b      	ldrh	r3, [r3, #8]
 8001580:	4619      	mov	r1, r3
 8001582:	68b8      	ldr	r0, [r7, #8]
 8001584:	f008 fff0 	bl	800a568 <tcp_recved>
			if (p != NULL) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8084 	beq.w	8001698 <tcp_server_recv+0x210>
				pbuf_free(p);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f007 fff5 	bl	8009580 <pbuf_free>
 8001596:	e07f      	b.n	8001698 <tcp_server_recv+0x210>
			//  printf("hello world %d\n",p->tot_len);
			/* handle the received data */
			//tcp_server_handle(tpcb, es);
		} else {
			//if(change_pointer%2==0) {
			tcp_recved(tpcb, p->tot_len);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	891b      	ldrh	r3, [r3, #8]
 800159c:	4619      	mov	r1, r3
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f008 ffe2 	bl	800a568 <tcp_recved>
			total_circle+=1;
 80015a4:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <tcp_server_recv+0x288>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4a59      	ldr	r2, [pc, #356]	; (8001710 <tcp_server_recv+0x288>)
 80015ac:	6013      	str	r3, [r2, #0]

			if(server_index>=10 || server_index<=0 ){
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <tcp_server_recv+0x278>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b09      	cmp	r3, #9
 80015b4:	dc03      	bgt.n	80015be <tcp_server_recv+0x136>
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <tcp_server_recv+0x278>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc02      	bgt.n	80015c4 <tcp_server_recv+0x13c>
				//direction=-direction;
				server_index=0;
 80015be:	4b50      	ldr	r3, [pc, #320]	; (8001700 <tcp_server_recv+0x278>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
			}
			memcpy(wavsram+server_index*970,p->payload,p->tot_len);
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <tcp_server_recv+0x278>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <tcp_server_recv+0x27c>)
 80015d4:	18d0      	adds	r0, r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	f011 f936 	bl	8012850 <memcpy>
		    total_length+=p->tot_len;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	891b      	ldrh	r3, [r3, #8]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <tcp_server_recv+0x28c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <tcp_server_recv+0x28c>)
 80015f2:	6013      	str	r3, [r2, #0]
		    if( first_pack){
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <tcp_server_recv+0x290>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <tcp_server_recv+0x18a>
		    	Audio_Player_Start();
 80015fc:	f7ff f946 	bl	800088c <Audio_Player_Start>
		    	first_pack=0;
 8001600:	4b45      	ldr	r3, [pc, #276]	; (8001718 <tcp_server_recv+0x290>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
		    	wav_end=0;
 8001606:	4b45      	ldr	r3, [pc, #276]	; (800171c <tcp_server_recv+0x294>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
		    	direction=1;
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <tcp_server_recv+0x298>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
		    }
		    if(total_length==file_size){
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <tcp_server_recv+0x28c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <tcp_server_recv+0x29c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d112      	bne.n	8001644 <tcp_server_recv+0x1bc>
		    	printf("end %d\n",file_size);
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <tcp_server_recv+0x29c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4840      	ldr	r0, [pc, #256]	; (8001728 <tcp_server_recv+0x2a0>)
 8001626:	f011 f929 	bl	801287c <iprintf>
		    	total_length=0;
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <tcp_server_recv+0x28c>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
		    	server_index=0;
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <tcp_server_recv+0x278>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
		    	wav_end=1;
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <tcp_server_recv+0x294>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
		    	first_pack=1;
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <tcp_server_recv+0x290>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e023      	b.n	800168c <tcp_server_recv+0x204>
			}else{
				server_index+=direction;
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <tcp_server_recv+0x278>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <tcp_server_recv+0x298>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <tcp_server_recv+0x278>)
 8001650:	6013      	str	r3, [r2, #0]
				while(server_index-wav_index>6*direction){
 8001652:	e002      	b.n	800165a <tcp_server_recv+0x1d2>
					HAL_Delay(5);
 8001654:	2005      	movs	r0, #5
 8001656:	f000 f9eb 	bl	8001a30 <HAL_Delay>
				while(server_index-wav_index>6*direction){
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <tcp_server_recv+0x278>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <tcp_server_recv+0x2a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1ad1      	subs	r1, r2, r3
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <tcp_server_recv+0x298>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4299      	cmp	r1, r3
 8001672:	dcef      	bgt.n	8001654 <tcp_server_recv+0x1cc>
				}
				send_information(s);
 8001674:	4824      	ldr	r0, [pc, #144]	; (8001708 <tcp_server_recv+0x280>)
 8001676:	f000 f90d 	bl	8001894 <send_information>
				printf("------%d %d %d\n",server_index,total_circle,wav_index);
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <tcp_server_recv+0x278>)
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <tcp_server_recv+0x288>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <tcp_server_recv+0x2a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	482a      	ldr	r0, [pc, #168]	; (8001730 <tcp_server_recv+0x2a8>)
 8001688:	f011 f8f8 	bl	801287c <iprintf>
			}
			if (p != NULL) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <tcp_server_recv+0x210>
				pbuf_free(p);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f007 ff74 	bl	8009580 <pbuf_free>
			}

		}


		ret_err = ERR_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	75fb      	strb	r3, [r7, #23]
 800169c:	e020      	b.n	80016e0 <tcp_server_recv+0x258>
	} else if (es->state == ES_CLOSING) {
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d10e      	bne.n	80016c4 <tcp_server_recv+0x23c>
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	891b      	ldrh	r3, [r3, #8]
 80016aa:	4619      	mov	r1, r3
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f008 ff5b 	bl	800a568 <tcp_recved>
		es->p = NULL;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f007 ff61 	bl	8009580 <pbuf_free>
		ret_err = ERR_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
 80016c2:	e00d      	b.n	80016e0 <tcp_server_recv+0x258>
	} else {
		/* unknown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	891b      	ldrh	r3, [r3, #8]
 80016c8:	4619      	mov	r1, r3
 80016ca:	68b8      	ldr	r0, [r7, #8]
 80016cc:	f008 ff4c 	bl	800a568 <tcp_recved>
		es->p = NULL;
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f007 ff52 	bl	8009580 <pbuf_free>
		ret_err = ERR_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 80016e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	080139dc 	.word	0x080139dc
 80016f0:	080139f8 	.word	0x080139f8
 80016f4:	08013a04 	.word	0x08013a04
 80016f8:	080017a5 	.word	0x080017a5
 80016fc:	08013a2c 	.word	0x08013a2c
 8001700:	20000854 	.word	0x20000854
 8001704:	68000000 	.word	0x68000000
 8001708:	20000004 	.word	0x20000004
 800170c:	08013a38 	.word	0x08013a38
 8001710:	20000858 	.word	0x20000858
 8001714:	2000085c 	.word	0x2000085c
 8001718:	20000010 	.word	0x20000010
 800171c:	200000a4 	.word	0x200000a4
 8001720:	2000000c 	.word	0x2000000c
 8001724:	20000008 	.word	0x20000008
 8001728:	08013a44 	.word	0x08013a44
 800172c:	200000a8 	.word	0x200000a8
 8001730:	08013a4c 	.word	0x08013a4c

08001734 <tcp_server_error>:
 *         when a fatal tcp_connection error occurs.
 * @param  arg: pointer on argument parameter
 * @param  err: not used
 * @retval None
 */
static void tcp_server_error(void *arg, err_t err) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
//  if (es != NULL)
//  {
//    /*  free es structure */
//    mem_free(es);
//  }
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <tcp_server_poll>:
 * @brief  This function implements the tcp_poll LwIP callback function
 * @param  arg: pointer on argument passed to callback
 * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
 * @retval err_t: error code
 */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_server_struct *es;

	es = (struct tcp_server_struct*) arg;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60bb      	str	r3, [r7, #8]
	if (es != NULL) {
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <tcp_server_poll+0x3c>
		if (es->p != NULL) {
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <tcp_server_poll+0x26>
			tcp_sent(tpcb, tcp_server_sent);
 8001768:	490d      	ldr	r1, [pc, #52]	; (80017a0 <tcp_server_poll+0x54>)
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f009 fe0e 	bl	800b38c <tcp_sent>
 8001770:	e007      	b.n	8001782 <tcp_server_poll+0x36>
			/* there is a remaining pbuf (chain) , try to send data */
			// tcp_server_send(tpcb, es);
		} else {
			/* no remaining pbuf (chain)  */
			if (es->state == ES_CLOSING) {
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d103      	bne.n	8001782 <tcp_server_poll+0x36>
				/*  close tcp connection */
				tcp_server_connection_close(tpcb, es);
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f000 f84c 	bl	800181a <tcp_server_connection_close>
			}
		}
		ret_err = ERR_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e004      	b.n	8001792 <tcp_server_poll+0x46>
	} else {
		/* nothing to be done */
		tcp_abort(tpcb);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f008 fd13 	bl	800a1b4 <tcp_abort>
		ret_err = ERR_ABRT;
 800178e:	23f3      	movs	r3, #243	; 0xf3
 8001790:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	080017a5 	.word	0x080017a5

080017a4 <tcp_server_sent>:
 * @brief  This function implements the tcp_sent LwIP callback (called when ACK
 *         is received from remote host for sent data)
 * @param  None
 * @retval None
 */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
	struct tcp_server_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_server_struct*) arg;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	617b      	str	r3, [r7, #20]
	es->retries = 0;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]

	if (es->p != NULL) {
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <tcp_server_sent+0x2a>
		/* still got pbufs to send */
		tcp_sent(tpcb, tcp_server_sent);
 80017c4:	4908      	ldr	r1, [pc, #32]	; (80017e8 <tcp_server_sent+0x44>)
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f009 fde0 	bl	800b38c <tcp_sent>
 80017cc:	e007      	b.n	80017de <tcp_server_sent+0x3a>
		//tcp_server_send(tpcb, es);
	} else {
		/* if no more data to send and client closed connection*/
		if (es->state == ES_CLOSING)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d103      	bne.n	80017de <tcp_server_sent+0x3a>
			tcp_server_connection_close(tpcb, es);
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f000 f81e 	bl	800181a <tcp_server_connection_close>
	}
	return ERR_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	080017a5 	.word	0x080017a5

080017ec <tcp_server_send>:
 * @brief  This function is used to send data for tcp connection
 * @param  tpcb: pointer on the tcp_pcb connection
 * @param  es: pointer on _state structure
 * @retval None
 */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;

	ptr = es->p;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	60fb      	str	r3, [r7, #12]

	tcp_write(tpcb, ptr->payload, ptr->len, 0);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	895a      	ldrh	r2, [r3, #10]
 8001804:	2300      	movs	r3, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f00c fccc 	bl	800e1a4 <tcp_write>

	tcp_output(tpcb);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f00d fab5 	bl	800ed7c <tcp_output>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <tcp_server_connection_close>:
 * @param  tcp_pcb: pointer on the tcp connection
 * @param  es: pointer on _state structure
 * @retval None
 */
static void tcp_server_connection_close(struct tcp_pcb *tpcb,
		struct tcp_server_struct *es) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f009 fd7c 	bl	800b324 <tcp_arg>
	tcp_sent(tpcb, NULL);
 800182c:	2100      	movs	r1, #0
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f009 fdac 	bl	800b38c <tcp_sent>
	tcp_recv(tpcb, NULL);
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f009 fd86 	bl	800b348 <tcp_recv>
	tcp_err(tpcb, NULL);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f009 fdc6 	bl	800b3d0 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f009 fdfb 	bl	800b444 <tcp_poll>

	/* delete es structure */
	if (es != NULL) {
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <tcp_server_connection_close+0x40>
		mem_free(es);
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f006 fd61 	bl	800831c <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f008 fbc0 	bl	8009fe0 <tcp_close>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb,
		struct tcp_server_struct *es) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	esTx = es;
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <tcp_server_handle+0x24>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <tcp_server_handle+0x28>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]

}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000084c 	.word	0x2000084c
 8001890:	20000850 	.word	0x20000850

08001894 <send_information>:

void send_information(char* z) {
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

	esTx->p = pbuf_alloc(PBUF_RAW, 1, PBUF_POOL);
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <send_information+0x5c>)
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80018a4:	2101      	movs	r1, #1
 80018a6:	2000      	movs	r0, #0
 80018a8:	f007 fb86 	bl	8008fb8 <pbuf_alloc>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60a3      	str	r3, [r4, #8]
	if (esTx->p != NULL) {
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <send_information+0x5c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <send_information+0x52>
		pbuf_take(esTx->p, z, 1);
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <send_information+0x5c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2201      	movs	r2, #1
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f008 f8b7 	bl	8009a38 <pbuf_take>
		tcp_server_send(pcbTx, esTx);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <send_information+0x60>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <send_information+0x5c>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff89 	bl	80017ec <tcp_server_send>
		pbuf_free(esTx->p);
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <send_information+0x5c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fe4d 	bl	8009580 <pbuf_free>
	}

}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000084c 	.word	0x2000084c
 80018f4:	20000850 	.word	0x20000850

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fe:	490e      	ldr	r1, [pc, #56]	; (8001938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001914:	4c0b      	ldr	r4, [pc, #44]	; (8001944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001922:	f7ff fd21 	bl	8001368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001926:	f010 ff61 	bl	80127ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7fe ffe5 	bl	80008f8 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800193c:	0801669c 	.word	0x0801669c
  ldr r2, =_sbss
 8001940:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001944:	20011670 	.word	0x20011670

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_Init+0x40>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_Init+0x40>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x40>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f94f 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f808 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff f9cc 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f967 	bl	8001c82 <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 f92f 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000018 	.word	0x20000018
 80019ec:	20000014 	.word	0x20000014

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000018 	.word	0x20000018
 8001a14:	20000b68 	.word	0x20000b68

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000b68 	.word	0x20000b68

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000018 	.word	0x20000018

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff3e 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff31 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff feb6 	bl	8001a18 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e099      	b.n	8001dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd8:	e00f      	b.n	8001cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cda:	f7ff fe9d 	bl	8001a18 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d908      	bls.n	8001cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e078      	b.n	8001dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_DMA_Init+0x158>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d107      	bne.n	8001d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f023 0307 	bic.w	r3, r3, #7
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d117      	bne.n	8001dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fa59 	bl	8002258 <DMA_CheckFifoParam>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e016      	b.n	8001dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fa10 	bl	80021ec <DMA_CalcBaseAndBitshift>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	223f      	movs	r2, #63	; 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	f010803f 	.word	0xf010803f

08001df8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e06:	f7ff fe07 	bl	8001a18 <HAL_GetTick>
 8001e0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e052      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0216 	bic.w	r2, r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_DMA_Abort+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7a:	e013      	b.n	8001ea4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7c:	f7ff fdcc 	bl	8001a18 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d90c      	bls.n	8001ea4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e015      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e4      	bne.n	8001e7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	223f      	movs	r2, #63	; 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b92      	ldr	r3, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x258>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_DMA_IRQHandler+0x25c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808e 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8086 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e078      	b.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01c      	beq.n	8002138 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d030      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02b      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d027      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e022      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d032      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d307      	bcc.n	80021be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f2      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x2ca>
 80021bc:	e000      	b.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e000      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021e2:	bf00      	nop
    }
  }
}
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop

080021ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3b10      	subs	r3, #16
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <DMA_CalcBaseAndBitshift+0x64>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <DMA_CalcBaseAndBitshift+0x68>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d909      	bls.n	800222e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	659a      	str	r2, [r3, #88]	; 0x58
 800222c:	e007      	b.n	800223e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	aaaaaaab 	.word	0xaaaaaaab
 8002254:	08016454 	.word	0x08016454

08002258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0x5a>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d856      	bhi.n	8002326 <DMA_CheckFifoParam+0xce>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <DMA_CheckFifoParam+0x28>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002291 	.word	0x08002291
 8002284:	080022a3 	.word	0x080022a3
 8002288:	08002291 	.word	0x08002291
 800228c:	08002327 	.word	0x08002327
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d046      	beq.n	800232a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e043      	b.n	800232a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022aa:	d140      	bne.n	800232e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b0:	e03d      	b.n	800232e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	d121      	bne.n	8002300 <DMA_CheckFifoParam+0xa8>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d837      	bhi.n	8002332 <DMA_CheckFifoParam+0xda>
 80022c2:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <DMA_CheckFifoParam+0x70>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022df 	.word	0x080022df
 80022d0:	080022d9 	.word	0x080022d9
 80022d4:	080022f1 	.word	0x080022f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      break;
 80022dc:	e030      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d025      	beq.n	8002336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ee:	e022      	b.n	8002336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f8:	d11f      	bne.n	800233a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022fe:	e01c      	b.n	800233a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d903      	bls.n	800230e <DMA_CheckFifoParam+0xb6>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d003      	beq.n	8002314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800230c:	e018      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      break;
 8002312:	e015      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00e      	beq.n	800233e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      break;
 8002324:	e00b      	b.n	800233e <DMA_CheckFifoParam+0xe6>
      break;
 8002326:	bf00      	nop
 8002328:	e00a      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800232a:	bf00      	nop
 800232c:	e008      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800232e:	bf00      	nop
 8002330:	e006      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
 8002334:	e004      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 8002336:	bf00      	nop
 8002338:	e002      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;   
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
    }
  } 
  
  return status; 
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b80      	cmp	r3, #128	; 0x80
 8002368:	d106      	bne.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f001 b913 	b.w	800359e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f001 b901 	b.w	800359e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f001 b8f9 	b.w	800359e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f041 80e7 	bne.w	8003590 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023de:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f001 f8f6 	bl	80035e0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b99      	ldr	r3, [pc, #612]	; (8002660 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d960      	bls.n	80024c2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a97      	ldr	r2, [pc, #604]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d057      	beq.n	80024ba <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a96      	ldr	r2, [pc, #600]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d050      	beq.n	80024b6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a94      	ldr	r2, [pc, #592]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d049      	beq.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a93      	ldr	r2, [pc, #588]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d042      	beq.n	80024ae <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a91      	ldr	r2, [pc, #580]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d03a      	beq.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a90      	ldr	r2, [pc, #576]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d032      	beq.n	80024a2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02a      	beq.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a8d      	ldr	r2, [pc, #564]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a8b      	ldr	r2, [pc, #556]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01a      	beq.n	8002490 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d012      	beq.n	800248a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a88      	ldr	r2, [pc, #544]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00a      	beq.n	8002484 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a87      	ldr	r2, [pc, #540]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002478:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800247c:	e01e      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800247e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002482:	e01b      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002488:	e018      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800248a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248e:	e015      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002494:	e012      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249a:	e00f      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800249c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a0:	e00c      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a6:	e009      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ac:	e006      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024b2:	2320      	movs	r3, #32
 80024b4:	e002      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024b6:	2320      	movs	r3, #32
 80024b8:	e000      	b.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80024ba:	2320      	movs	r3, #32
 80024bc:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80024be:	60d3      	str	r3, [r2, #12]
 80024c0:	e150      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d960      	bls.n	8002590 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d057      	beq.n	8002588 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a62      	ldr	r2, [pc, #392]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d050      	beq.n	8002584 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d049      	beq.n	8002580 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d042      	beq.n	800257c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5e      	ldr	r2, [pc, #376]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d03a      	beq.n	8002576 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a5c      	ldr	r2, [pc, #368]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d032      	beq.n	8002570 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02a      	beq.n	800256a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a59      	ldr	r2, [pc, #356]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d022      	beq.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01a      	beq.n	800255e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d012      	beq.n	8002558 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a55      	ldr	r2, [pc, #340]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00a      	beq.n	8002552 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a53      	ldr	r2, [pc, #332]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d102      	bne.n	800254c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002546:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800254a:	e01e      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800254c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002550:	e01b      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002552:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002556:	e018      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800255c:	e015      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800255e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002562:	e012      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002568:	e00f      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800256a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800256e:	e00c      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002574:	e009      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800257a:	e006      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800257c:	2320      	movs	r3, #32
 800257e:	e004      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002580:	2320      	movs	r3, #32
 8002582:	e002      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002584:	2320      	movs	r3, #32
 8002586:	e000      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002588:	2320      	movs	r3, #32
 800258a:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800258c:	6093      	str	r3, [r2, #8]
 800258e:	e0e9      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002598:	429a      	cmp	r2, r3
 800259a:	f240 8083 	bls.w	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a30      	ldr	r2, [pc, #192]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d057      	beq.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d050      	beq.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2d      	ldr	r2, [pc, #180]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d049      	beq.n	8002650 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d042      	beq.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d03a      	beq.n	8002646 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d032      	beq.n	8002640 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d02a      	beq.n	800263a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d022      	beq.n	8002634 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01a      	beq.n	800262e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d012      	beq.n	8002628 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00a      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d102      	bne.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800261a:	e01e      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800261c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002620:	e01b      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002626:	e018      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800262c:	e015      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800262e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002632:	e012      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002638:	e00f      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800263a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800263e:	e00c      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002644:	e009      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800264a:	e006      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800264c:	2320      	movs	r3, #32
 800264e:	e004      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002650:	2320      	movs	r3, #32
 8002652:	e002      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002654:	2320      	movs	r3, #32
 8002656:	e000      	b.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002658:	2320      	movs	r3, #32
 800265a:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 800265c:	60d3      	str	r3, [r2, #12]
 800265e:	e081      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002660:	40026458 	.word	0x40026458
 8002664:	40026010 	.word	0x40026010
 8002668:	40026410 	.word	0x40026410
 800266c:	40026070 	.word	0x40026070
 8002670:	40026470 	.word	0x40026470
 8002674:	40026028 	.word	0x40026028
 8002678:	40026428 	.word	0x40026428
 800267c:	40026088 	.word	0x40026088
 8002680:	40026488 	.word	0x40026488
 8002684:	40026040 	.word	0x40026040
 8002688:	40026440 	.word	0x40026440
 800268c:	400260a0 	.word	0x400260a0
 8002690:	400264a0 	.word	0x400264a0
 8002694:	40026400 	.word	0x40026400
 8002698:	400260b8 	.word	0x400260b8
 800269c:	40026058 	.word	0x40026058
 80026a0:	40026000 	.word	0x40026000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a96      	ldr	r2, [pc, #600]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d057      	beq.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a95      	ldr	r2, [pc, #596]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d050      	beq.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a93      	ldr	r2, [pc, #588]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d049      	beq.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a92      	ldr	r2, [pc, #584]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d042      	beq.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a90      	ldr	r2, [pc, #576]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d03a      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a8f      	ldr	r2, [pc, #572]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d032      	beq.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8d      	ldr	r2, [pc, #564]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02a      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8c      	ldr	r2, [pc, #560]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a8a      	ldr	r2, [pc, #552]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01a      	beq.n	8002734 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a89      	ldr	r2, [pc, #548]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d012      	beq.n	800272e <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a87      	ldr	r2, [pc, #540]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00a      	beq.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a86      	ldr	r2, [pc, #536]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 800271c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002720:	e01e      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002726:	e01b      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272c:	e018      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800272e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002732:	e015      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002738:	e012      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800273a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800273e:	e00f      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002744:	e00c      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274a:	e009      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800274c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002750:	e006      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002752:	2320      	movs	r3, #32
 8002754:	e004      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002756:	2320      	movs	r3, #32
 8002758:	e002      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800275a:	2320      	movs	r3, #32
 800275c:	e000      	b.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800275e:	2320      	movs	r3, #32
 8002760:	4a74      	ldr	r2, [pc, #464]	; (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002762:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b73      	ldr	r3, [pc, #460]	; (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d960      	bls.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d057      	beq.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a62      	ldr	r2, [pc, #392]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d050      	beq.n	8002826 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a60      	ldr	r2, [pc, #384]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d049      	beq.n	8002822 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5f      	ldr	r2, [pc, #380]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d042      	beq.n	800281e <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03a      	beq.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d032      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02a      	beq.n	800280c <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a59      	ldr	r2, [pc, #356]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01a      	beq.n	8002800 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a56      	ldr	r2, [pc, #344]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d012      	beq.n	80027fa <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a54      	ldr	r2, [pc, #336]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00a      	beq.n	80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a53      	ldr	r2, [pc, #332]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80027e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ec:	e01e      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80027ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027f2:	e01b      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80027f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027f8:	e018      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80027fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027fe:	e015      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002800:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002804:	e012      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280a:	e00f      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	e00c      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002816:	e009      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281c:	e006      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800281e:	2310      	movs	r3, #16
 8002820:	e004      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002822:	2310      	movs	r3, #16
 8002824:	e002      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002826:	2310      	movs	r3, #16
 8002828:	e000      	b.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800282a:	2310      	movs	r3, #16
 800282c:	4a43      	ldr	r2, [pc, #268]	; (800293c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800282e:	60d3      	str	r3, [r2, #12]
 8002830:	e14f      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800283a:	429a      	cmp	r2, r3
 800283c:	f240 8082 	bls.w	8002944 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d057      	beq.n	80028fa <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2e      	ldr	r2, [pc, #184]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d050      	beq.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d049      	beq.n	80028f2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d042      	beq.n	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03a      	beq.n	80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d032      	beq.n	80028e2 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02a      	beq.n	80028dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a23      	ldr	r2, [pc, #140]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01a      	beq.n	80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d012      	beq.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00a      	beq.n	80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d102      	bne.n	80028be <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80028b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028bc:	e01e      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028c2:	e01b      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c8:	e018      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028ce:	e015      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d4:	e012      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028da:	e00f      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e0:	e00c      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	e009      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ec:	e006      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028ee:	2310      	movs	r3, #16
 80028f0:	e004      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028f2:	2310      	movs	r3, #16
 80028f4:	e002      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028f6:	2310      	movs	r3, #16
 80028f8:	e000      	b.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80028fa:	2310      	movs	r3, #16
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	e0e7      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002902:	bf00      	nop
 8002904:	40026010 	.word	0x40026010
 8002908:	40026410 	.word	0x40026410
 800290c:	40026070 	.word	0x40026070
 8002910:	40026470 	.word	0x40026470
 8002914:	40026028 	.word	0x40026028
 8002918:	40026428 	.word	0x40026428
 800291c:	40026088 	.word	0x40026088
 8002920:	40026488 	.word	0x40026488
 8002924:	40026040 	.word	0x40026040
 8002928:	40026440 	.word	0x40026440
 800292c:	400260a0 	.word	0x400260a0
 8002930:	400264a0 	.word	0x400264a0
 8002934:	40026000 	.word	0x40026000
 8002938:	40026458 	.word	0x40026458
 800293c:	40026400 	.word	0x40026400
 8002940:	400260b8 	.word	0x400260b8
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b96      	ldr	r3, [pc, #600]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800294c:	429a      	cmp	r2, r3
 800294e:	d960      	bls.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a94      	ldr	r2, [pc, #592]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d057      	beq.n	8002a0a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a93      	ldr	r2, [pc, #588]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d050      	beq.n	8002a06 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a91      	ldr	r2, [pc, #580]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d049      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a90      	ldr	r2, [pc, #576]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d042      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a8e      	ldr	r2, [pc, #568]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d03a      	beq.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8d      	ldr	r2, [pc, #564]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d032      	beq.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02a      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8a      	ldr	r2, [pc, #552]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a88      	ldr	r2, [pc, #544]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01a      	beq.n	80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a87      	ldr	r2, [pc, #540]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d012      	beq.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a85      	ldr	r2, [pc, #532]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a84      	ldr	r2, [pc, #528]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d102      	bne.n	80029ce <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80029c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029cc:	e01e      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029d2:	e01b      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d8:	e018      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029de:	e015      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e4:	e012      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ea:	e00f      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	e00c      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f6:	e009      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fc:	e006      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80029fe:	2310      	movs	r3, #16
 8002a00:	e004      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002a02:	2310      	movs	r3, #16
 8002a04:	e002      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002a06:	2310      	movs	r3, #16
 8002a08:	e000      	b.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002a0e:	60d3      	str	r3, [r2, #12]
 8002a10:	e05f      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a64      	ldr	r2, [pc, #400]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d057      	beq.n	8002acc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a62      	ldr	r2, [pc, #392]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d050      	beq.n	8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d049      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d042      	beq.n	8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a5e      	ldr	r2, [pc, #376]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03a      	beq.n	8002aba <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d032      	beq.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5b      	ldr	r2, [pc, #364]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d02a      	beq.n	8002aae <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a59      	ldr	r2, [pc, #356]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01a      	beq.n	8002aa2 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a56      	ldr	r2, [pc, #344]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d012      	beq.n	8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00a      	beq.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a53      	ldr	r2, [pc, #332]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d102      	bne.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002a8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a8e:	e01e      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a94:	e01b      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a9a:	e018      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa0:	e015      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa6:	e012      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	e00f      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab2:	e00c      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab8:	e009      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abe:	e006      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	e004      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	e002      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ac8:	2310      	movs	r3, #16
 8002aca:	e000      	b.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002acc:	2310      	movs	r3, #16
 8002ace:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002ad0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f240 8082 	bls.w	8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d057      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d050      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d049      	beq.n	8002b92 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d042      	beq.n	8002b8e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d03a      	beq.n	8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d032      	beq.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02a      	beq.n	8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a23      	ldr	r2, [pc, #140]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002b58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b5c:	e01e      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b62:	e01b      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b68:	e018      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b6e:	e015      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b74:	e012      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7a:	e00f      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b80:	e00c      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b86:	e009      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8c:	e006      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e004      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e002      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e000      	b.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e16f      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002ba2:	bf00      	nop
 8002ba4:	40026058 	.word	0x40026058
 8002ba8:	40026010 	.word	0x40026010
 8002bac:	40026410 	.word	0x40026410
 8002bb0:	40026070 	.word	0x40026070
 8002bb4:	40026470 	.word	0x40026470
 8002bb8:	40026028 	.word	0x40026028
 8002bbc:	40026428 	.word	0x40026428
 8002bc0:	40026088 	.word	0x40026088
 8002bc4:	40026488 	.word	0x40026488
 8002bc8:	40026040 	.word	0x40026040
 8002bcc:	40026440 	.word	0x40026440
 8002bd0:	400260a0 	.word	0x400260a0
 8002bd4:	400264a0 	.word	0x400264a0
 8002bd8:	40026000 	.word	0x40026000
 8002bdc:	40026458 	.word	0x40026458
 8002be0:	40026400 	.word	0x40026400
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b94      	ldr	r3, [pc, #592]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d960      	bls.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d057      	beq.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a91      	ldr	r2, [pc, #580]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d050      	beq.n	8002ca6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8f      	ldr	r2, [pc, #572]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d049      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a8e      	ldr	r2, [pc, #568]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d042      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a8c      	ldr	r2, [pc, #560]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d03a      	beq.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a8b      	ldr	r2, [pc, #556]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d032      	beq.n	8002c92 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a89      	ldr	r2, [pc, #548]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02a      	beq.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a88      	ldr	r2, [pc, #544]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a86      	ldr	r2, [pc, #536]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a85      	ldr	r2, [pc, #532]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d012      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a83      	ldr	r2, [pc, #524]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00a      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a82      	ldr	r2, [pc, #520]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d102      	bne.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002c68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c6c:	e01e      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	e01b      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c78:	e018      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c7e:	e015      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c84:	e012      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8a:	e00f      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	e00c      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c96:	e009      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9c:	e006      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	e004      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e002      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	e000      	b.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002caa:	2308      	movs	r3, #8
 8002cac:	4a70      	ldr	r2, [pc, #448]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	e0e7      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b6e      	ldr	r3, [pc, #440]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d960      	bls.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5f      	ldr	r2, [pc, #380]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d057      	beq.n	8002d78 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d050      	beq.n	8002d74 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d049      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d042      	beq.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a59      	ldr	r2, [pc, #356]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d03a      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a57      	ldr	r2, [pc, #348]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d032      	beq.n	8002d60 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d02a      	beq.n	8002d5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01a      	beq.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d012      	beq.n	8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a50      	ldr	r2, [pc, #320]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00a      	beq.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d102      	bne.n	8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002d36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d3a:	e01e      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d40:	e01b      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d46:	e018      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d4c:	e015      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d52:	e012      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d58:	e00f      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d5e:	e00c      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d64:	e009      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6a:	e006      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	e004      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d70:	2308      	movs	r3, #8
 8002d72:	e002      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d74:	2308      	movs	r3, #8
 8002d76:	e000      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	4a3f      	ldr	r2, [pc, #252]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002d7c:	60d3      	str	r3, [r2, #12]
 8002d7e:	e080      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d078      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d050      	beq.n	8002e36 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d049      	beq.n	8002e32 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d042      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03a      	beq.n	8002e28 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d032      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02a      	beq.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01a      	beq.n	8002e10 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d012      	beq.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00a      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002df8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dfc:	e03f      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	e03c      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e08:	e039      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e0e:	e036      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e14:	e033      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1a:	e030      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e20:	e02d      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e26:	e02a      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e2c:	e027      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	e025      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e32:	2308      	movs	r3, #8
 8002e34:	e023      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e36:	2308      	movs	r3, #8
 8002e38:	e021      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002e3a:	bf00      	nop
 8002e3c:	400260b8 	.word	0x400260b8
 8002e40:	40026010 	.word	0x40026010
 8002e44:	40026410 	.word	0x40026410
 8002e48:	40026070 	.word	0x40026070
 8002e4c:	40026470 	.word	0x40026470
 8002e50:	40026028 	.word	0x40026028
 8002e54:	40026428 	.word	0x40026428
 8002e58:	40026088 	.word	0x40026088
 8002e5c:	40026488 	.word	0x40026488
 8002e60:	40026040 	.word	0x40026040
 8002e64:	40026440 	.word	0x40026440
 8002e68:	400260a0 	.word	0x400260a0
 8002e6c:	400264a0 	.word	0x400264a0
 8002e70:	40026400 	.word	0x40026400
 8002e74:	40026058 	.word	0x40026058
 8002e78:	40026000 	.word	0x40026000
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	4a9a      	ldr	r2, [pc, #616]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002e80:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b98      	ldr	r3, [pc, #608]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d960      	bls.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a97      	ldr	r2, [pc, #604]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d057      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a95      	ldr	r2, [pc, #596]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d050      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a94      	ldr	r2, [pc, #592]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d049      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a92      	ldr	r2, [pc, #584]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d042      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a91      	ldr	r2, [pc, #580]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03a      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a8f      	ldr	r2, [pc, #572]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d032      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a8e      	ldr	r2, [pc, #568]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02a      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a8c      	ldr	r2, [pc, #560]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a8b      	ldr	r2, [pc, #556]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01a      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a89      	ldr	r2, [pc, #548]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a88      	ldr	r2, [pc, #544]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00a      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a86      	ldr	r2, [pc, #536]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d102      	bne.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002f06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f0a:	e01e      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f10:	e01b      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f16:	e018      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f1c:	e015      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f22:	e012      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	e00f      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2e:	e00c      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f34:	e009      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	e006      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	e004      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f40:	2304      	movs	r3, #4
 8002f42:	e002      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e000      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002f4c:	60d3      	str	r3, [r2, #12]
 8002f4e:	e151      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b73      	ldr	r3, [pc, #460]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d960      	bls.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d057      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a62      	ldr	r2, [pc, #392]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d050      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a60      	ldr	r2, [pc, #384]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d049      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5f      	ldr	r2, [pc, #380]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d042      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5d      	ldr	r2, [pc, #372]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d03a      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5c      	ldr	r2, [pc, #368]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d032      	beq.n	8002ffe <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5a      	ldr	r2, [pc, #360]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a59      	ldr	r2, [pc, #356]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a56      	ldr	r2, [pc, #344]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d012      	beq.n	8002fe6 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002fd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fd8:	e01e      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002fda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fde:	e01b      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002fe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fe4:	e018      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002fe6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fea:	e015      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002fec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ff0:	e012      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff6:	e00f      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffc:	e00c      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003002:	e009      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003008:	e006      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800300a:	2304      	movs	r3, #4
 800300c:	e004      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800300e:	2304      	movs	r3, #4
 8003010:	e002      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003012:	2304      	movs	r3, #4
 8003014:	e000      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003016:	2304      	movs	r3, #4
 8003018:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800301a:	6093      	str	r3, [r2, #8]
 800301c:	e0ea      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003026:	429a      	cmp	r2, r3
 8003028:	f240 8084 	bls.w	8003134 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d07a      	beq.n	800312c <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d050      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d049      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d042      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a29      	ldr	r2, [pc, #164]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03a      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d032      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02a      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01a      	beq.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d012      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00a      	beq.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80030a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030a8:	e041      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ae:	e03e      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030b4:	e03b      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030ba:	e038      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030c0:	e035      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c6:	e032      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030cc:	e02f      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d2:	e02c      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d8:	e029      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030da:	2304      	movs	r3, #4
 80030dc:	e027      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030de:	2304      	movs	r3, #4
 80030e0:	e025      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e023      	b.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80030e6:	bf00      	nop
 80030e8:	40026000 	.word	0x40026000
 80030ec:	40026458 	.word	0x40026458
 80030f0:	40026010 	.word	0x40026010
 80030f4:	40026410 	.word	0x40026410
 80030f8:	40026070 	.word	0x40026070
 80030fc:	40026470 	.word	0x40026470
 8003100:	40026028 	.word	0x40026028
 8003104:	40026428 	.word	0x40026428
 8003108:	40026088 	.word	0x40026088
 800310c:	40026488 	.word	0x40026488
 8003110:	40026040 	.word	0x40026040
 8003114:	40026440 	.word	0x40026440
 8003118:	400260a0 	.word	0x400260a0
 800311c:	400264a0 	.word	0x400264a0
 8003120:	40026400 	.word	0x40026400
 8003124:	400260b8 	.word	0x400260b8
 8003128:	40026058 	.word	0x40026058
 800312c:	2304      	movs	r3, #4
 800312e:	4a94      	ldr	r2, [pc, #592]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e05f      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a92      	ldr	r2, [pc, #584]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d057      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a91      	ldr	r2, [pc, #580]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d050      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a8f      	ldr	r2, [pc, #572]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d049      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a8e      	ldr	r2, [pc, #568]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d042      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8c      	ldr	r2, [pc, #560]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03a      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8b      	ldr	r2, [pc, #556]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d032      	beq.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a89      	ldr	r2, [pc, #548]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02a      	beq.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a88      	ldr	r2, [pc, #544]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a86      	ldr	r2, [pc, #536]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01a      	beq.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a85      	ldr	r2, [pc, #532]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d012      	beq.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a83      	ldr	r2, [pc, #524]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00a      	beq.n	80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a82      	ldr	r2, [pc, #520]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d102      	bne.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80031ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031b0:	e01e      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b6:	e01b      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031bc:	e018      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c2:	e015      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c8:	e012      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ce:	e00f      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d4:	e00c      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031da:	e009      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e0:	e006      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e004      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e002      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e000      	b.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031ee:	2304      	movs	r3, #4
 80031f0:	4a63      	ldr	r2, [pc, #396]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80031f2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d95c      	bls.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5f      	ldr	r2, [pc, #380]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d053      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5e      	ldr	r2, [pc, #376]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04c      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5c      	ldr	r2, [pc, #368]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d03e      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a59      	ldr	r2, [pc, #356]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d037      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d030      	beq.n	800329e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a56      	ldr	r2, [pc, #344]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d029      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a55      	ldr	r2, [pc, #340]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a53      	ldr	r2, [pc, #332]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01a      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d012      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a50      	ldr	r2, [pc, #320]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00a      	beq.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d102      	bne.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327c:	e01a      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800327e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003282:	e017      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003288:	e014      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800328a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328e:	e011      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003294:	e00e      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	e00c      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800329a:	2340      	movs	r3, #64	; 0x40
 800329c:	e00a      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	e008      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	e006      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e004      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e002      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80032b2:	2301      	movs	r3, #1
 80032b4:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80032b6:	60d3      	str	r3, [r2, #12]
 80032b8:	e141      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d97c      	bls.n	80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d053      	beq.n	8003378 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d04c      	beq.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d045      	beq.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03e      	beq.n	800336c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a28      	ldr	r2, [pc, #160]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d037      	beq.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d030      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d029      	beq.n	8003360 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01a      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d012      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00a      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d102      	bne.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 800333e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003342:	e01a      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003348:	e017      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	e014      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003354:	e011      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800335a:	e00e      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	e00c      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	e00a      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003364:	2340      	movs	r3, #64	; 0x40
 8003366:	e008      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003368:	2340      	movs	r3, #64	; 0x40
 800336a:	e006      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800336c:	2301      	movs	r3, #1
 800336e:	e004      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003370:	2301      	movs	r3, #1
 8003372:	e002      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003378:	2301      	movs	r3, #1
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	e0de      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003380:	40026000 	.word	0x40026000
 8003384:	40026010 	.word	0x40026010
 8003388:	40026410 	.word	0x40026410
 800338c:	40026070 	.word	0x40026070
 8003390:	40026470 	.word	0x40026470
 8003394:	40026028 	.word	0x40026028
 8003398:	40026428 	.word	0x40026428
 800339c:	40026088 	.word	0x40026088
 80033a0:	40026488 	.word	0x40026488
 80033a4:	40026040 	.word	0x40026040
 80033a8:	40026440 	.word	0x40026440
 80033ac:	400260a0 	.word	0x400260a0
 80033b0:	400264a0 	.word	0x400264a0
 80033b4:	40026458 	.word	0x40026458
 80033b8:	40026400 	.word	0x40026400
 80033bc:	400260b8 	.word	0x400260b8
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d95c      	bls.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a76      	ldr	r2, [pc, #472]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d053      	beq.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04c      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a73      	ldr	r2, [pc, #460]	; (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d045      	beq.n	8003476 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a72      	ldr	r2, [pc, #456]	; (80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d03e      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a70      	ldr	r2, [pc, #448]	; (80035bc <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d037      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d030      	beq.n	800346a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a6d      	ldr	r2, [pc, #436]	; (80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d029      	beq.n	8003466 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01a      	beq.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d012      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a67      	ldr	r2, [pc, #412]	; (80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00a      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d102      	bne.n	800344a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003448:	e01a      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800344a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800344e:	e017      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003454:	e014      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345a:	e011      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800345c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003460:	e00e      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	e00c      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003466:	2340      	movs	r3, #64	; 0x40
 8003468:	e00a      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800346a:	2340      	movs	r3, #64	; 0x40
 800346c:	e008      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800346e:	2340      	movs	r3, #64	; 0x40
 8003470:	e006      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003472:	2301      	movs	r3, #1
 8003474:	e004      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003476:	2301      	movs	r3, #1
 8003478:	e002      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800347e:	2301      	movs	r3, #1
 8003480:	4a56      	ldr	r2, [pc, #344]	; (80035dc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003482:	60d3      	str	r3, [r2, #12]
 8003484:	e05b      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a48      	ldr	r2, [pc, #288]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d053      	beq.n	8003538 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a46      	ldr	r2, [pc, #280]	; (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04c      	beq.n	8003534 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a45      	ldr	r2, [pc, #276]	; (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a43      	ldr	r2, [pc, #268]	; (80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d03e      	beq.n	800352c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a42      	ldr	r2, [pc, #264]	; (80035bc <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d037      	beq.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a40      	ldr	r2, [pc, #256]	; (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d030      	beq.n	8003524 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3f      	ldr	r2, [pc, #252]	; (80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d029      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01a      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d012      	beq.n	8003510 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a39      	ldr	r2, [pc, #228]	; (80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00a      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a37      	ldr	r2, [pc, #220]	; (80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d102      	bne.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80034fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003502:	e01a      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003508:	e017      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800350a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800350e:	e014      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	e011      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800351a:	e00e      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800351c:	2340      	movs	r3, #64	; 0x40
 800351e:	e00c      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	e00a      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003524:	2340      	movs	r3, #64	; 0x40
 8003526:	e008      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003528:	2340      	movs	r3, #64	; 0x40
 800352a:	e006      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800352c:	2301      	movs	r3, #1
 800352e:	e004      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003530:	2301      	movs	r3, #1
 8003532:	e002      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003538:	2301      	movs	r3, #1
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800353c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0216 	orr.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800355c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0208 	orr.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e005      	b.n	800359c <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800359c:	7dfb      	ldrb	r3, [r7, #23]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40026058 	.word	0x40026058
 80035ac:	40026010 	.word	0x40026010
 80035b0:	40026410 	.word	0x40026410
 80035b4:	40026070 	.word	0x40026070
 80035b8:	40026470 	.word	0x40026470
 80035bc:	40026028 	.word	0x40026028
 80035c0:	40026428 	.word	0x40026428
 80035c4:	40026088 	.word	0x40026088
 80035c8:	40026488 	.word	0x40026488
 80035cc:	40026040 	.word	0x40026040
 80035d0:	40026440 	.word	0x40026440
 80035d4:	400260a0 	.word	0x400260a0
 80035d8:	400264a0 	.word	0x400264a0
 80035dc:	40026000 	.word	0x40026000

080035e0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d108      	bne.n	8003610 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800360e:	e007      	b.n	8003620 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800363c:	4baa      	ldr	r3, [pc, #680]	; (80038e8 <HAL_ETH_Init+0x2bc>)
 800363e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e183      	b.n	800395a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f004 f942 	bl	80078f0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	4b9e      	ldr	r3, [pc, #632]	; (80038ec <HAL_ETH_Init+0x2c0>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	4a9d      	ldr	r2, [pc, #628]	; (80038ec <HAL_ETH_Init+0x2c0>)
 8003676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800367a:	6453      	str	r3, [r2, #68]	; 0x44
 800367c:	4b9b      	ldr	r3, [pc, #620]	; (80038ec <HAL_ETH_Init+0x2c0>)
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003688:	4b99      	ldr	r3, [pc, #612]	; (80038f0 <HAL_ETH_Init+0x2c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a98      	ldr	r2, [pc, #608]	; (80038f0 <HAL_ETH_Init+0x2c4>)
 800368e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003692:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003694:	4b96      	ldr	r3, [pc, #600]	; (80038f0 <HAL_ETH_Init+0x2c4>)
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4994      	ldr	r1, [pc, #592]	; (80038f0 <HAL_ETH_Init+0x2c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036ba:	f7fe f9ad 	bl	8001a18 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80036c0:	e011      	b.n	80036e6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80036c2:	f7fe f9a9 	bl	8001a18 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036d0:	d909      	bls.n	80036e6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2203      	movs	r2, #3
 80036d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e139      	b.n	800395a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e4      	bne.n	80036c2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f023 031c 	bic.w	r3, r3, #28
 8003706:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003708:	f003 fa16 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 800370c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4a78      	ldr	r2, [pc, #480]	; (80038f4 <HAL_ETH_Init+0x2c8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d908      	bls.n	8003728 <HAL_ETH_Init+0xfc>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4a77      	ldr	r2, [pc, #476]	; (80038f8 <HAL_ETH_Init+0x2cc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d804      	bhi.n	8003728 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f043 0308 	orr.w	r3, r3, #8
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e027      	b.n	8003778 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4a73      	ldr	r2, [pc, #460]	; (80038f8 <HAL_ETH_Init+0x2cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d908      	bls.n	8003742 <HAL_ETH_Init+0x116>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	4a6d      	ldr	r2, [pc, #436]	; (80038e8 <HAL_ETH_Init+0x2bc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d204      	bcs.n	8003742 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f043 030c 	orr.w	r3, r3, #12
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	e01a      	b.n	8003778 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <HAL_ETH_Init+0x2bc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d303      	bcc.n	8003752 <HAL_ETH_Init+0x126>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4a6b      	ldr	r2, [pc, #428]	; (80038fc <HAL_ETH_Init+0x2d0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d911      	bls.n	8003776 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4a69      	ldr	r2, [pc, #420]	; (80038fc <HAL_ETH_Init+0x2d0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d908      	bls.n	800376c <HAL_ETH_Init+0x140>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4a68      	ldr	r2, [pc, #416]	; (8003900 <HAL_ETH_Init+0x2d4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d804      	bhi.n	800376c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e005      	b.n	8003778 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e000      	b.n	8003778 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003776:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003784:	2100      	movs	r1, #0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fc1d 	bl	8003fc6 <HAL_ETH_WritePHYRegister>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003796:	6939      	ldr	r1, [r7, #16]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fdd3 	bl	8004344 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0d7      	b.n	800395a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80037aa:	20ff      	movs	r0, #255	; 0xff
 80037ac:	f7fe f940 	bl	8001a30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a5 	beq.w	8003904 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037ba:	f7fe f92d 	bl	8001a18 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	461a      	mov	r2, r3
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fb94 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80037ce:	f7fe f923 	bl	8001a18 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d90f      	bls.n	8003800 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fdac 	bl	8004344 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0ac      	b.n	800395a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0da      	beq.n	80037c0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800380a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fbd8 	bl	8003fc6 <HAL_ETH_WritePHYRegister>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003820:	6939      	ldr	r1, [r7, #16]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fd8e 	bl	8004344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003830:	2301      	movs	r3, #1
 8003832:	e092      	b.n	800395a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003834:	f7fe f8f0 	bl	8001a18 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	461a      	mov	r2, r3
 8003840:	2101      	movs	r1, #1
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fb57 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003848:	f7fe f8e6 	bl	8001a18 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d90f      	bls.n	800387a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fd6f 	bl	8004344 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e06f      	b.n	800395a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0da      	beq.n	800383a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	461a      	mov	r2, r3
 800388a:	2110      	movs	r1, #16
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb32 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fd50 	bl	8004344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80038ac:	2301      	movs	r3, #1
 80038ae:	e054      	b.n	800395a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	e002      	b.n	80038ca <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	e035      	b.n	8003948 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e030      	b.n	8003948 <HAL_ETH_Init+0x31c>
 80038e6:	bf00      	nop
 80038e8:	03938700 	.word	0x03938700
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40013800 	.word	0x40013800
 80038f4:	01312cff 	.word	0x01312cff
 80038f8:	02160ebf 	.word	0x02160ebf
 80038fc:	05f5e0ff 	.word	0x05f5e0ff
 8003900:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003914:	4313      	orrs	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	2100      	movs	r1, #0
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb52 	bl	8003fc6 <HAL_ETH_WritePHYRegister>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800392c:	6939      	ldr	r1, [r7, #16]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd08 	bl	8004344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e00c      	b.n	800395a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003940:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003944:	f7fe f874 	bl	8001a30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003948:	6939      	ldr	r1, [r7, #16]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fcfa 	bl	8004344 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop

08003964 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_ETH_DMATxDescListInit+0x20>
 8003980:	2302      	movs	r3, #2
 8003982:	e052      	b.n	8003a2a <HAL_ETH_DMATxDescListInit+0xc6>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e030      	b.n	8003a02 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4413      	add	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039b0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d208      	bcs.n	80039f6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	015b      	lsls	r3, r3, #5
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	461a      	mov	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e002      	b.n	80039fc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3301      	adds	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3ca      	bcc.n	80039a0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a14:	3310      	adds	r3, #16
 8003a16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ETH_DMARxDescListInit+0x20>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e056      	b.n	8003b04 <HAL_ETH_DMARxDescListInit+0xce>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e034      	b.n	8003adc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	4413      	add	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a82:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003a8a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d208      	bcs.n	8003ad0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	e002      	b.n	8003ad6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d3c6      	bcc.n	8003a72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aee:	330c      	adds	r3, #12
 8003af0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_ETH_TransmitFrame+0x24>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0cd      	b.n	8003cd0 <HAL_ETH_TransmitFrame+0x1c0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0b8      	b.n	8003cd0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da09      	bge.n	8003b7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2212      	movs	r2, #18
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0a9      	b.n	8003cd0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d915      	bls.n	8003bb2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	4a54      	ldr	r2, [pc, #336]	; (8003cdc <HAL_ETH_TransmitFrame+0x1cc>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4b51      	ldr	r3, [pc, #324]	; (8003cdc <HAL_ETH_TransmitFrame+0x1cc>)
 8003b96:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3301      	adds	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e001      	b.n	8003bb6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11c      	bne.n	8003bf6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003bca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003bd6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003be6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bf4:	e04b      	b.n	8003c8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e044      	b.n	8003c86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d107      	bne.n	8003c22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d116      	bne.n	8003c64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_ETH_TransmitFrame+0x1d0>)
 8003c4a:	fb02 f203 	mul.w	r2, r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003c62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3301      	adds	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3b6      	bcc.n	8003bfc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c96:	3314      	adds	r3, #20
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003caa:	3314      	adds	r3, #20
 8003cac:	2204      	movs	r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	ac02b00b 	.word	0xac02b00b
 8003ce0:	fffffa0c 	.word	0xfffffa0c

08003ce4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_ETH_GetReceivedFrame+0x1a>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e070      	b.n	8003de0 <HAL_ETH_GetReceivedFrame+0xfc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db5a      	blt.n	8003dce <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d030      	beq.n	8003d88 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d103      	bne.n	8003d40 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003d54:	3b04      	subs	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e02b      	b.n	8003de0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28
 8003db6:	e00a      	b.n	8003dce <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d112      	bne.n	8003e2e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f860 	bl	8003ece <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	3314      	adds	r3, #20
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	e01b      	b.n	8003e66 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e36:	3314      	adds	r3, #20
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d111      	bne.n	8003e66 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f839 	bl	8003eba <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e50:	3314      	adds	r3, #20
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6e:	3314      	adds	r3, #20
 8003e70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e74:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	3314      	adds	r3, #20
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d112      	bne.n	8003eb2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f828 	bl	8003ee2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ea0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	460b      	mov	r3, r1
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b82      	cmp	r3, #130	; 0x82
 8003f16:	d101      	bne.n	8003f1c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e050      	b.n	8003fbe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2282      	movs	r2, #130	; 0x82
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 031c 	and.w	r3, r3, #28
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8a1b      	ldrh	r3, [r3, #16]
 8003f38:	02db      	lsls	r3, r3, #11
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0302 	bic.w	r3, r3, #2
 8003f56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f68:	f7fd fd56 	bl	8001a18 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f6e:	e015      	b.n	8003f9c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003f70:	f7fd fd52 	bl	8001a18 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d309      	bcc.n	8003f94 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e014      	b.n	8003fbe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e4      	bne.n	8003f70 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b42      	cmp	r3, #66	; 0x42
 8003fe6:	d101      	bne.n	8003fec <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e04e      	b.n	800408a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2242      	movs	r2, #66	; 0x42
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 031c 	and.w	r3, r3, #28
 8004002:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8a1b      	ldrh	r3, [r3, #16]
 8004008:	02db      	lsls	r3, r3, #11
 800400a:	b29b      	uxth	r3, r3
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004012:	897b      	ldrh	r3, [r7, #10]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004042:	f7fd fce9 	bl	8001a18 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004048:	e015      	b.n	8004076 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800404a:	f7fd fce5 	bl	8001a18 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d309      	bcc.n	800406e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00d      	b.n	800408a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e4      	bne.n	800404a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_ETH_Start+0x16>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e01f      	b.n	80040e8 <HAL_ETH_Start+0x56>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fb45 	bl	8004748 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb7c 	bl	80047bc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fc13 	bl	80048f0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fbb0 	bl	8004830 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fbdd 	bl	8004890 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_ETH_Stop+0x16>
 8004102:	2302      	movs	r3, #2
 8004104:	e01f      	b.n	8004146 <HAL_ETH_Stop+0x56>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fba2 	bl	8004860 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fbcf 	bl	80048c0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fb67 	bl	80047f6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fbe1 	bl	80048f0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb27 	bl	8004782 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_ETH_ConfigMAC+0x1c>
 8004168:	2302      	movs	r3, #2
 800416a:	e0e4      	b.n	8004336 <HAL_ETH_ConfigMAC+0x1e6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80b1 	beq.w	80042e6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_ETH_ConfigMAC+0x1f0>)
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800419c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80041a2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80041a8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80041ae:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80041b4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80041ba:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80041c0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80041c6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80041cc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80041d2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80041d8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80041de:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fd fc1a 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800420c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004212:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004218:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800421e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004224:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800422a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004236:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004238:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004242:	2001      	movs	r0, #1
 8004244:	f7fd fbf4 	bl	8001a30 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004258:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004262:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004272:	4013      	ands	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004280:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004286:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800428c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004292:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004298:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80042b0:	2001      	movs	r0, #1
 80042b2:	f7fd fbbd 	bl	8001a30 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80042d6:	2001      	movs	r0, #1
 80042d8:	f7fd fbaa 	bl	8001a30 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	61da      	str	r2, [r3, #28]
 80042e4:	e01e      	b.n	8004324 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80042f4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004316:	2001      	movs	r0, #1
 8004318:	f7fd fb8a 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	ff20810f 	.word	0xff20810f

08004344 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b0b0      	sub	sp, #192	; 0xc0
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004360:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004368:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800436e:	2300      	movs	r3, #0
 8004370:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004372:	2300      	movs	r3, #0
 8004374:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800438a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438e:	663b      	str	r3, [r7, #96]	; 0x60
 8004390:	e001      	b.n	8004396 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800439a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043a0:	2300      	movs	r3, #0
 80043a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004418:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800441c:	4bac      	ldr	r3, [pc, #688]	; (80046d0 <ETH_MACDMAConfig+0x38c>)
 800441e:	4013      	ands	r3, r2
 8004420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004424:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004428:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800442c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004430:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004436:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800443a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800443c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800443e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004444:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004448:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800444a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800444c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800444e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004450:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004454:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004458:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800445a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800446c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004478:	2001      	movs	r0, #1
 800447a:	f7fd fad9 	bl	8001a30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004486:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004488:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800448a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800448c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800448e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004490:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004496:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800449c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800449e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80044a2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80044a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80044ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80044b4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044b6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f7fd fab4 	bl	8001a30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044d0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044da:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044e4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80044f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044f4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80044f8:	4013      	ands	r3, r2
 80044fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80044fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004502:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004508:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800450a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800450e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004514:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800451a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800451c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004520:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004522:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004534:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004540:	2001      	movs	r0, #1
 8004542:	f7fd fa75 	bl	8001a30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800454e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004550:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800456a:	2001      	movs	r0, #1
 800456c:	f7fd fa60 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004578:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800457e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004582:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800458c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800459e:	2304      	movs	r3, #4
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80045a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80045a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80045b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80045c2:	2300      	movs	r3, #0
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	3318      	adds	r3, #24
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80045d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045da:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <ETH_MACDMAConfig+0x390>)
 80045dc:	4013      	ands	r3, r2
 80045de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045e2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80045e4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045e6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80045e8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80045ea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80045ec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80045ee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80045f0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80045f2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80045f4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80045f6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80045f8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80045fa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80045fe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004602:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004604:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	3318      	adds	r3, #24
 8004618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800461c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004626:	3318      	adds	r3, #24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800462e:	2001      	movs	r0, #1
 8004630:	f7fd f9fe 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463c:	3318      	adds	r3, #24
 800463e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004642:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004648:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800464c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004650:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004654:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800465a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800465c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800465e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800467c:	2001      	movs	r0, #1
 800467e:	f7fd f9d7 	bl	8001a30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800468e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10f      	bne.n	80046b8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	331c      	adds	r3, #28
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	331c      	adds	r3, #28
 80046b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	461a      	mov	r2, r3
 80046be:	2100      	movs	r1, #0
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f809 	bl	80046d8 <ETH_MACAddressConfig>
}
 80046c6:	bf00      	nop
 80046c8:	37c0      	adds	r7, #192	; 0xc0
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	ff20810f 	.word	0xff20810f
 80046d4:	f8de3f23 	.word	0xf8de3f23

080046d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3305      	adds	r3, #5
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	3204      	adds	r2, #4
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <ETH_MACAddressConfig+0x68>)
 80046fa:	4413      	add	r3, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3303      	adds	r3, #3
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	061a      	lsls	r2, r3, #24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3302      	adds	r3, #2
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3301      	adds	r3, #1
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4313      	orrs	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <ETH_MACAddressConfig+0x6c>)
 800472a:	4413      	add	r3, r2
 800472c:	461a      	mov	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6013      	str	r3, [r2, #0]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40028040 	.word	0x40028040
 8004744:	40028044 	.word	0x40028044

08004748 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800476c:	2001      	movs	r0, #1
 800476e:	f000 f8e9 	bl	8004944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0208 	bic.w	r2, r2, #8
 800479c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80047a6:	2001      	movs	r0, #1
 80047a8:	f000 f8cc 	bl	8004944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0204 	orr.w	r2, r2, #4
 80047d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80047e0:	2001      	movs	r0, #1
 80047e2:	f000 f8af 	bl	8004944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0204 	bic.w	r2, r2, #4
 8004810:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800481a:	2001      	movs	r0, #1
 800481c:	f000 f892 	bl	8004944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	3318      	adds	r3, #24
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	3318      	adds	r3, #24
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	3318      	adds	r3, #24
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	3318      	adds	r3, #24
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	3318      	adds	r3, #24
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0202 	orr.w	r2, r2, #2
 80048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b0:	3318      	adds	r3, #24
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	3318      	adds	r3, #24
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0202 	bic.w	r2, r2, #2
 80048dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e0:	3318      	adds	r3, #24
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	3318      	adds	r3, #24
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	3318      	adds	r3, #24
 8004916:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	3318      	adds	r3, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004926:	2001      	movs	r0, #1
 8004928:	f000 f80c 	bl	8004944 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004936:	3318      	adds	r3, #24
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <ETH_Delay+0x38>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <ETH_Delay+0x3c>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0a5b      	lsrs	r3, r3, #9
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004960:	bf00      	nop
  } 
  while (Delay --);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	60fa      	str	r2, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f9      	bne.n	8004960 <ETH_Delay+0x1c>
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000000 	.word	0x20000000
 8004980:	10624dd3 	.word	0x10624dd3

08004984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	; 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e16b      	b.n	8004c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 815a 	bne.w	8004c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d005      	beq.n	80049d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d130      	bne.n	8004a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0201 	and.w	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d017      	beq.n	8004a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d123      	bne.n	8004ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80b4 	beq.w	8004c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	4a5f      	ldr	r2, [pc, #380]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b18:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1a:	4b5d      	ldr	r3, [pc, #372]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b26:	4a5b      	ldr	r2, [pc, #364]	; (8004c94 <HAL_GPIO_Init+0x310>)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <HAL_GPIO_Init+0x314>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02b      	beq.n	8004baa <HAL_GPIO_Init+0x226>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_GPIO_Init+0x318>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d025      	beq.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a50      	ldr	r2, [pc, #320]	; (8004ca0 <HAL_GPIO_Init+0x31c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <HAL_GPIO_Init+0x21e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4f      	ldr	r2, [pc, #316]	; (8004ca4 <HAL_GPIO_Init+0x320>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d019      	beq.n	8004b9e <HAL_GPIO_Init+0x21a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <HAL_GPIO_Init+0x324>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_GPIO_Init+0x216>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_GPIO_Init+0x328>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00d      	beq.n	8004b96 <HAL_GPIO_Init+0x212>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a4c      	ldr	r2, [pc, #304]	; (8004cb0 <HAL_GPIO_Init+0x32c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <HAL_GPIO_Init+0x20e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a4b      	ldr	r2, [pc, #300]	; (8004cb4 <HAL_GPIO_Init+0x330>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_GPIO_Init+0x20a>
 8004b8a:	2307      	movs	r3, #7
 8004b8c:	e00e      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	e00c      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b92:	2306      	movs	r3, #6
 8004b94:	e00a      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b96:	2305      	movs	r3, #5
 8004b98:	e008      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e006      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e004      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e002      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004baa:	2300      	movs	r3, #0
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	f002 0203 	and.w	r2, r2, #3
 8004bb2:	0092      	lsls	r2, r2, #2
 8004bb4:	4093      	lsls	r3, r2
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bbc:	4935      	ldr	r1, [pc, #212]	; (8004c94 <HAL_GPIO_Init+0x310>)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bca:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bee:	4a32      	ldr	r2, [pc, #200]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c42:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c6c:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	f67f ae90 	bls.w	80049a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e12b      	b.n	8004f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc f842 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d20:	f001 ff16 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a81      	ldr	r2, [pc, #516]	; (8004f30 <HAL_I2C_Init+0x274>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d807      	bhi.n	8004d40 <HAL_I2C_Init+0x84>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_I2C_Init+0x278>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bf94      	ite	ls
 8004d38:	2301      	movls	r3, #1
 8004d3a:	2300      	movhi	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e006      	b.n	8004d4e <HAL_I2C_Init+0x92>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a7d      	ldr	r2, [pc, #500]	; (8004f38 <HAL_I2C_Init+0x27c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bf94      	ite	ls
 8004d48:	2301      	movls	r3, #1
 8004d4a:	2300      	movhi	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0e7      	b.n	8004f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a78      	ldr	r2, [pc, #480]	; (8004f3c <HAL_I2C_Init+0x280>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0c9b      	lsrs	r3, r3, #18
 8004d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a6a      	ldr	r2, [pc, #424]	; (8004f30 <HAL_I2C_Init+0x274>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d802      	bhi.n	8004d90 <HAL_I2C_Init+0xd4>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	e009      	b.n	8004da4 <HAL_I2C_Init+0xe8>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	4a69      	ldr	r2, [pc, #420]	; (8004f40 <HAL_I2C_Init+0x284>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	3301      	adds	r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004db6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	495c      	ldr	r1, [pc, #368]	; (8004f30 <HAL_I2C_Init+0x274>)
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d819      	bhi.n	8004df8 <HAL_I2C_Init+0x13c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e59      	subs	r1, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dd8:	400b      	ands	r3, r1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_I2C_Init+0x138>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e59      	subs	r1, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df2:	e051      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004df4:	2304      	movs	r3, #4
 8004df6:	e04f      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d111      	bne.n	8004e24 <HAL_I2C_Init+0x168>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e58      	subs	r0, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	440b      	add	r3, r1
 8004e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e012      	b.n	8004e4a <HAL_I2C_Init+0x18e>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Init+0x196>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e022      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10e      	bne.n	8004e78 <HAL_I2C_Init+0x1bc>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1e58      	subs	r0, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	440b      	add	r3, r1
 8004e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1e58      	subs	r0, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	0099      	lsls	r1, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	6809      	ldr	r1, [r1, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6911      	ldr	r1, [r2, #16]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68d2      	ldr	r2, [r2, #12]
 8004ed2:	4311      	orrs	r1, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	000186a0 	.word	0x000186a0
 8004f34:	001e847f 	.word	0x001e847f
 8004f38:	003d08ff 	.word	0x003d08ff
 8004f3c:	431bde83 	.word	0x431bde83
 8004f40:	10624dd3 	.word	0x10624dd3

08004f44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	460b      	mov	r3, r1
 8004f52:	817b      	strh	r3, [r7, #10]
 8004f54:	4613      	mov	r3, r2
 8004f56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f58:	f7fc fd5e 	bl	8001a18 <HAL_GetTick>
 8004f5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	f040 80e0 	bne.w	800512c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2319      	movs	r3, #25
 8004f72:	2201      	movs	r2, #1
 8004f74:	4970      	ldr	r1, [pc, #448]	; (8005138 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f964 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0d3      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_I2C_Master_Transmit+0x50>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0cc      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d007      	beq.n	8004fba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2221      	movs	r2, #33	; 0x21
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	893a      	ldrh	r2, [r7, #8]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a50      	ldr	r2, [pc, #320]	; (800513c <HAL_I2C_Master_Transmit+0x1f8>)
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ffc:	8979      	ldrh	r1, [r7, #10]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f89c 	bl	8005140 <I2C_MasterRequestWrite>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e08d      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005028:	e066      	b.n	80050f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	6a39      	ldr	r1, [r7, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f9de 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b04      	cmp	r3, #4
 8005040:	d107      	bne.n	8005052 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005050:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06b      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_I2C_Master_Transmit+0x188>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d017      	beq.n	80050cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f9ce 	bl	8005472 <I2C_WaitOnBTFFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e01a      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d194      	bne.n	800502a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	00100002 	.word	0x00100002
 800513c:	ffff0000 	.word	0xffff0000

08005140 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	460b      	mov	r3, r1
 800514e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d006      	beq.n	800516a <I2C_MasterRequestWrite+0x2a>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d003      	beq.n	800516a <I2C_MasterRequestWrite+0x2a>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005168:	d108      	bne.n	800517c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e00b      	b.n	8005194 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	2b12      	cmp	r3, #18
 8005182:	d107      	bne.n	8005194 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f84f 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00d      	beq.n	80051c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d103      	bne.n	80051c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e035      	b.n	8005234 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d0:	d108      	bne.n	80051e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e01b      	b.n	800521c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051e4:	897b      	ldrh	r3, [r7, #10]
 80051e6:	11db      	asrs	r3, r3, #7
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0306 	and.w	r3, r3, #6
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f063 030f 	orn	r3, r3, #15
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	490e      	ldr	r1, [pc, #56]	; (800523c <I2C_MasterRequestWrite+0xfc>)
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f875 	bl	80052f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e010      	b.n	8005234 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4907      	ldr	r1, [pc, #28]	; (8005240 <I2C_MasterRequestWrite+0x100>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f865 	bl	80052f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	00010008 	.word	0x00010008
 8005240:	00010002 	.word	0x00010002

08005244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	e025      	b.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d021      	beq.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fc fbdb 	bl	8001a18 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d116      	bne.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e023      	b.n	80052ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10d      	bne.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	43da      	mvns	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	e00c      	b.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d0b6      	beq.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005300:	e051      	b.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d123      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800532a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e046      	b.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d021      	beq.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fc fb59 	bl	8001a18 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d116      	bne.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e020      	b.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10c      	bne.n	80053ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	43da      	mvns	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e00b      	b.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	43da      	mvns	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d18d      	bne.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fc:	e02d      	b.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f878 	bl	80054f4 <I2C_IsAcknowledgeFailed>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e02d      	b.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d021      	beq.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fc faff 	bl	8001a18 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d116      	bne.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e007      	b.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d1ca      	bne.n	80053fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800547e:	e02d      	b.n	80054dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f837 	bl	80054f4 <I2C_IsAcknowledgeFailed>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e02d      	b.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d021      	beq.n	80054dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fc fabe 	bl	8001a18 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d116      	bne.n	80054dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e007      	b.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d1ca      	bne.n	8005480 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d11b      	bne.n	8005544 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005514:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	f043 0204 	orr.w	r2, r3, #4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e128      	b.n	80057b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a90      	ldr	r2, [pc, #576]	; (80057c0 <HAL_I2S_Init+0x26c>)
 800557e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fb fc3b 	bl	8000dfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800559c:	f023 030f 	bic.w	r3, r3, #15
 80055a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2202      	movs	r2, #2
 80055a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d060      	beq.n	8005674 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d102      	bne.n	80055c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80055ba:	2310      	movs	r3, #16
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e001      	b.n	80055c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80055c0:	2320      	movs	r3, #32
 80055c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d802      	bhi.n	80055d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80055d2:	2001      	movs	r0, #1
 80055d4:	f001 fbc6 	bl	8006d64 <HAL_RCCEx_GetPeriphCLKFreq>
 80055d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	d125      	bne.n	8005630 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	3305      	adds	r3, #5
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e01f      	b.n	800564e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	fbb2 f2f3 	udiv	r2, r2, r3
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	3305      	adds	r3, #5
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e00e      	b.n	800564e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	fbb2 f2f3 	udiv	r2, r2, r3
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	3305      	adds	r3, #5
 800564c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4a5c      	ldr	r2, [pc, #368]	; (80057c4 <HAL_I2S_Init+0x270>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	08db      	lsrs	r3, r3, #3
 8005658:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e003      	b.n	800567c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005674:	2302      	movs	r3, #2
 8005676:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d902      	bls.n	8005688 <HAL_I2S_Init+0x134>
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2bff      	cmp	r3, #255	; 0xff
 8005686:	d907      	bls.n	8005698 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	f043 0210 	orr.w	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e08f      	b.n	80057b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	ea42 0103 	orr.w	r1, r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056b6:	f023 030f 	bic.w	r3, r3, #15
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6851      	ldr	r1, [r2, #4]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68d2      	ldr	r2, [r2, #12]
 80056c8:	4311      	orrs	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6992      	ldr	r2, [r2, #24]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d161      	bne.n	80057a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a38      	ldr	r2, [pc, #224]	; (80057c8 <HAL_I2S_Init+0x274>)
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a37      	ldr	r2, [pc, #220]	; (80057cc <HAL_I2S_Init+0x278>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_I2S_Init+0x1a4>
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <HAL_I2S_Init+0x27c>)
 80056f6:	e001      	b.n	80056fc <HAL_I2S_Init+0x1a8>
 80056f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	4932      	ldr	r1, [pc, #200]	; (80057cc <HAL_I2S_Init+0x278>)
 8005704:	428a      	cmp	r2, r1
 8005706:	d101      	bne.n	800570c <HAL_I2S_Init+0x1b8>
 8005708:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <HAL_I2S_Init+0x27c>)
 800570a:	e001      	b.n	8005710 <HAL_I2S_Init+0x1bc>
 800570c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005710:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005714:	f023 030f 	bic.w	r3, r3, #15
 8005718:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2b      	ldr	r2, [pc, #172]	; (80057cc <HAL_I2S_Init+0x278>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_I2S_Init+0x1d4>
 8005724:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <HAL_I2S_Init+0x27c>)
 8005726:	e001      	b.n	800572c <HAL_I2S_Init+0x1d8>
 8005728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800572c:	2202      	movs	r2, #2
 800572e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <HAL_I2S_Init+0x278>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <HAL_I2S_Init+0x1ea>
 800573a:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <HAL_I2S_Init+0x27c>)
 800573c:	e001      	b.n	8005742 <HAL_I2S_Init+0x1ee>
 800573e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574e:	d003      	beq.n	8005758 <HAL_I2S_Init+0x204>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e001      	b.n	8005764 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800576e:	4313      	orrs	r3, r2
 8005770:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005778:	4313      	orrs	r3, r2
 800577a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005782:	4313      	orrs	r3, r2
 8005784:	b29a      	uxth	r2, r3
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	4313      	orrs	r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005790:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <HAL_I2S_Init+0x278>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <HAL_I2S_Init+0x24c>
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <HAL_I2S_Init+0x27c>)
 800579e:	e001      	b.n	80057a4 <HAL_I2S_Init+0x250>
 80057a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a4:	897a      	ldrh	r2, [r7, #10]
 80057a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	08005c7f 	.word	0x08005c7f
 80057c4:	cccccccd 	.word	0xcccccccd
 80057c8:	08005e05 	.word	0x08005e05
 80057cc:	40003800 	.word	0x40003800
 80057d0:	40003400 	.word	0x40003400

080057d4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e8:	d004      	beq.n	80057f4 <HAL_I2S_DMAStop+0x20>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 80d1 	bne.w	8005996 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00f      	beq.n	800581c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	4618      	mov	r0, r3
 8005802:	f7fc faf9 	bl	8001df8 <HAL_DMA_Abort>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005810:	f043 0208 	orr.w	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800581c:	2364      	movs	r3, #100	; 0x64
 800581e:	2201      	movs	r2, #1
 8005820:	2102      	movs	r1, #2
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fab5 	bl	8005d92 <I2S_WaitFlagStateUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005846:	2364      	movs	r3, #100	; 0x64
 8005848:	2200      	movs	r2, #0
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 faa0 	bl	8005d92 <I2S_WaitFlagStateUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0202 	bic.w	r2, r2, #2
 800589c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	f040 8165 	bne.w	8005b76 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00f      	beq.n	80058d4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fc fa9d 	bl	8001df8 <HAL_DMA_Abort>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c8:	f043 0208 	orr.w	r2, r3, #8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a8a      	ldr	r2, [pc, #552]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d101      	bne.n	80058e2 <HAL_I2S_DMAStop+0x10e>
 80058de:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 80058e0:	e001      	b.n	80058e6 <HAL_I2S_DMAStop+0x112>
 80058e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4985      	ldr	r1, [pc, #532]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 80058ee:	428b      	cmp	r3, r1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2S_DMAStop+0x122>
 80058f2:	4b85      	ldr	r3, [pc, #532]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 80058f4:	e001      	b.n	80058fa <HAL_I2S_DMAStop+0x126>
 80058f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7e      	ldr	r2, [pc, #504]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_I2S_DMAStop+0x13e>
 800590e:	4b7e      	ldr	r3, [pc, #504]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005910:	e001      	b.n	8005916 <HAL_I2S_DMAStop+0x142>
 8005912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a79      	ldr	r2, [pc, #484]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_I2S_DMAStop+0x154>
 8005924:	4b78      	ldr	r3, [pc, #480]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005926:	e001      	b.n	800592c <HAL_I2S_DMAStop+0x158>
 8005928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a73      	ldr	r2, [pc, #460]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_I2S_DMAStop+0x16c>
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 800593e:	e001      	b.n	8005944 <HAL_I2S_DMAStop+0x170>
 8005940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	496e      	ldr	r1, [pc, #440]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 800594c:	428b      	cmp	r3, r1
 800594e:	d101      	bne.n	8005954 <HAL_I2S_DMAStop+0x180>
 8005950:	4b6d      	ldr	r3, [pc, #436]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005952:	e001      	b.n	8005958 <HAL_I2S_DMAStop+0x184>
 8005954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800597e:	e0fa      	b.n	8005b76 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5f      	ldr	r2, [pc, #380]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_I2S_DMAStop+0x1ba>
 800598a:	4b5f      	ldr	r3, [pc, #380]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 800598c:	e001      	b.n	8005992 <HAL_I2S_DMAStop+0x1be>
 800598e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005992:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005994:	e0ef      	b.n	8005b76 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800599e:	d005      	beq.n	80059ac <HAL_I2S_DMAStop+0x1d8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	f040 80e5 	bne.w	8005b76 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00f      	beq.n	80059d4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fc fa1d 	bl	8001df8 <HAL_DMA_Abort>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f043 0208 	orr.w	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b05      	cmp	r3, #5
 80059de:	f040 809a 	bne.w	8005b16 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00f      	beq.n	8005a0a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fa02 	bl	8001df8 <HAL_DMA_Abort>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f043 0208 	orr.w	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005a0a:	f7fc f805 	bl	8001a18 <HAL_GetTick>
 8005a0e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a10:	e012      	b.n	8005a38 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a12:	f7fc f801 	bl	8001a18 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d90b      	bls.n	8005a38 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a31      	ldr	r2, [pc, #196]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_I2S_DMAStop+0x272>
 8005a42:	4b31      	ldr	r3, [pc, #196]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005a44:	e001      	b.n	8005a4a <HAL_I2S_DMAStop+0x276>
 8005a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d1de      	bne.n	8005a12 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005a54:	e012      	b.n	8005a7c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a56:	f7fb ffdf 	bl	8001a18 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d90b      	bls.n	8005a7c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <HAL_I2S_DMAStop+0x2b6>
 8005a86:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005a88:	e001      	b.n	8005a8e <HAL_I2S_DMAStop+0x2ba>
 8005a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d0de      	beq.n	8005a56 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2S_DMAStop+0x2d2>
 8005aa2:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005aa4:	e001      	b.n	8005aaa <HAL_I2S_DMAStop+0x2d6>
 8005aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4914      	ldr	r1, [pc, #80]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005ab2:	428b      	cmp	r3, r1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2S_DMAStop+0x2e6>
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005ab8:	e001      	b.n	8005abe <HAL_I2S_DMAStop+0x2ea>
 8005aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac2:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2S_DMAStop+0x302>
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005ad4:	e001      	b.n	8005ada <HAL_I2S_DMAStop+0x306>
 8005ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a07      	ldr	r2, [pc, #28]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d101      	bne.n	8005aee <HAL_I2S_DMAStop+0x31a>
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005aec:	e001      	b.n	8005af2 <HAL_I2S_DMAStop+0x31e>
 8005aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4902      	ldr	r1, [pc, #8]	; (8005b04 <HAL_I2S_DMAStop+0x330>)
 8005afa:	428b      	cmp	r3, r1
 8005afc:	d106      	bne.n	8005b0c <HAL_I2S_DMAStop+0x338>
 8005afe:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <HAL_I2S_DMAStop+0x334>)
 8005b00:	e006      	b.n	8005b10 <HAL_I2S_DMAStop+0x33c>
 8005b02:	bf00      	nop
 8005b04:	40003800 	.word	0x40003800
 8005b08:	40003400 	.word	0x40003400
 8005b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b10:	f022 0202 	bic.w	r2, r2, #2
 8005b14:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b54:	d10c      	bne.n	8005b70 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e002      	b.n	8005b76 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ffb8 	bl	8005b88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	b292      	uxth	r2, r2
 8005c34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10e      	bne.n	8005c76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff93 	bl	8005b9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d13a      	bne.n	8005d10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d109      	bne.n	8005cb8 <I2S_IRQHandler+0x3a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d102      	bne.n	8005cb8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffb4 	bl	8005c20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d126      	bne.n	8005d10 <I2S_IRQHandler+0x92>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d11f      	bne.n	8005d10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f043 0202 	orr.w	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ff50 	bl	8005bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d136      	bne.n	8005d8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d109      	bne.n	8005d3a <I2S_IRQHandler+0xbc>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d102      	bne.n	8005d3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ff45 	bl	8005bc4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d122      	bne.n	8005d8a <I2S_IRQHandler+0x10c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d11b      	bne.n	8005d8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	f043 0204 	orr.w	r2, r3, #4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff13 	bl	8005bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005da2:	f7fb fe39 	bl	8001a18 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005da8:	e018      	b.n	8005ddc <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d014      	beq.n	8005ddc <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005db2:	f7fb fe31 	bl	8001a18 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d902      	bls.n	8005dc8 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e00f      	b.n	8005dfc <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d1d7      	bne.n	8005daa <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4aa2      	ldr	r2, [pc, #648]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e1e:	4ba2      	ldr	r3, [pc, #648]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e20:	e001      	b.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a9b      	ldr	r2, [pc, #620]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e3c:	4b9a      	ldr	r3, [pc, #616]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e3e:	e001      	b.n	8005e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d004      	beq.n	8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f040 8099 	bne.w	8005f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d107      	bne.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f925 	bl	80060c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9c8 	bl	8006220 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d13a      	bne.n	8005f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d035      	beq.n	8005f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7e      	ldr	r2, [pc, #504]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005eae:	4b7e      	ldr	r3, [pc, #504]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eb0:	e001      	b.n	8005eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4979      	ldr	r1, [pc, #484]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ebe:	428b      	cmp	r3, r1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005ec2:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ec4:	e001      	b.n	8005eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ece:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ede:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f043 0202 	orr.w	r2, r3, #2
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fe50 	bl	8005bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	f040 80be 	bne.w	8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80b8 	beq.w	8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a59      	ldr	r2, [pc, #356]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d101      	bne.n	8005f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f44:	e001      	b.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4954      	ldr	r1, [pc, #336]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f52:	428b      	cmp	r3, r1
 8005f54:	d101      	bne.n	8005f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f56:	4b54      	ldr	r3, [pc, #336]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f58:	e001      	b.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f043 0204 	orr.w	r2, r3, #4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fe12 	bl	8005bb0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f8c:	e084      	b.n	8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d107      	bne.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8be 	bl	8006124 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d107      	bne.n	8005fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f8fd 	bl	80061bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d12f      	bne.n	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d02a      	beq.n	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ff0:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ff2:	e001      	b.n	8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4929      	ldr	r1, [pc, #164]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006000:	428b      	cmp	r3, r1
 8006002:	d101      	bne.n	8006008 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006006:	e001      	b.n	800600c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006010:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fdc2 	bl	8005bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b08      	cmp	r3, #8
 8006034:	d131      	bne.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02c      	beq.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800604c:	e001      	b.n	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800604e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4912      	ldr	r1, [pc, #72]	; (80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800605a:	428b      	cmp	r3, r1
 800605c:	d101      	bne.n	8006062 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800605e:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006060:	e001      	b.n	8006066 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006066:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800606a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800607a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	f043 0204 	orr.w	r2, r3, #4
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fd8d 	bl	8005bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006096:	e000      	b.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006098:	bf00      	nop
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40003800 	.word	0x40003800
 80060a8:	40003400 	.word	0x40003400

080060ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	1c99      	adds	r1, r3, #2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6251      	str	r1, [r2, #36]	; 0x24
 80060d2:	881a      	ldrh	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d113      	bne.n	800611a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006100:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ffc9 	bl	80060ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c99      	adds	r1, r3, #2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6251      	str	r1, [r2, #36]	; 0x24
 8006136:	8819      	ldrh	r1, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <I2SEx_TxISR_I2SExt+0x90>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <I2SEx_TxISR_I2SExt+0x22>
 8006142:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <I2SEx_TxISR_I2SExt+0x94>)
 8006144:	e001      	b.n	800614a <I2SEx_TxISR_I2SExt+0x26>
 8006146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800614a:	460a      	mov	r2, r1
 800614c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d121      	bne.n	80061aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <I2SEx_TxISR_I2SExt+0x90>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d101      	bne.n	8006174 <I2SEx_TxISR_I2SExt+0x50>
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <I2SEx_TxISR_I2SExt+0x94>)
 8006172:	e001      	b.n	8006178 <I2SEx_TxISR_I2SExt+0x54>
 8006174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	490d      	ldr	r1, [pc, #52]	; (80061b4 <I2SEx_TxISR_I2SExt+0x90>)
 8006180:	428b      	cmp	r3, r1
 8006182:	d101      	bne.n	8006188 <I2SEx_TxISR_I2SExt+0x64>
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <I2SEx_TxISR_I2SExt+0x94>)
 8006186:	e001      	b.n	800618c <I2SEx_TxISR_I2SExt+0x68>
 8006188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800618c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006190:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ff81 	bl	80060ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40003800 	.word	0x40003800
 80061b8:	40003400 	.word	0x40003400

080061bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68d8      	ldr	r0, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	1c99      	adds	r1, r3, #2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80061d4:	b282      	uxth	r2, r0
 80061d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d113      	bne.n	8006218 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff4a 	bl	80060ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <I2SEx_RxISR_I2SExt+0x90>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <I2SEx_RxISR_I2SExt+0x16>
 8006232:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <I2SEx_RxISR_I2SExt+0x94>)
 8006234:	e001      	b.n	800623a <I2SEx_RxISR_I2SExt+0x1a>
 8006236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800623a:	68d8      	ldr	r0, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	1c99      	adds	r1, r3, #2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006246:	b282      	uxth	r2, r0
 8006248:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d121      	bne.n	80062a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a12      	ldr	r2, [pc, #72]	; (80062b0 <I2SEx_RxISR_I2SExt+0x90>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <I2SEx_RxISR_I2SExt+0x50>
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <I2SEx_RxISR_I2SExt+0x94>)
 800626e:	e001      	b.n	8006274 <I2SEx_RxISR_I2SExt+0x54>
 8006270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	490d      	ldr	r1, [pc, #52]	; (80062b0 <I2SEx_RxISR_I2SExt+0x90>)
 800627c:	428b      	cmp	r3, r1
 800627e:	d101      	bne.n	8006284 <I2SEx_RxISR_I2SExt+0x64>
 8006280:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <I2SEx_RxISR_I2SExt+0x94>)
 8006282:	e001      	b.n	8006288 <I2SEx_RxISR_I2SExt+0x68>
 8006284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800628c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff03 	bl	80060ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40003800 	.word	0x40003800
 80062b4:	40003400 	.word	0x40003400

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e264      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d075      	beq.n	80063c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062d6:	4ba3      	ldr	r3, [pc, #652]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00c      	beq.n	80062fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b9d      	ldr	r3, [pc, #628]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d157      	bne.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e23f      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x74>
 800631e:	4b91      	ldr	r3, [pc, #580]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a90      	ldr	r2, [pc, #576]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a8a      	ldr	r2, [pc, #552]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e00b      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 8006350:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a80      	ldr	r2, [pc, #512]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fb fb52 	bl	8001a18 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006378:	f7fb fb4e 	bl	8001a18 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e204      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b76      	ldr	r3, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0xc0>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fb fb3e 	bl	8001a18 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fb fb3a 	bl	8001a18 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1f0      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d063      	beq.n	8006496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ce:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b62      	ldr	r3, [pc, #392]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1c4      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4952      	ldr	r1, [pc, #328]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fb faf3 	bl	8001a18 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fb faef 	bl	8001a18 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1a5      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b46      	ldr	r3, [pc, #280]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4940      	ldr	r1, [pc, #256]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fb fad2 	bl	8001a18 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fb face 	bl	8001a18 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e184      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d030      	beq.n	8006504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fb fab2 	bl	8001a18 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fb faae 	bl	8001a18 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e164      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x200>
 80064d6:	e015      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fb fa9b 	bl	8001a18 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fb fa97 	bl	8001a18 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e14d      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a0 	beq.w	8006652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d121      	bne.n	8006592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fb fa5d 	bl	8001a18 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e011      	b.n	8006586 <HAL_RCC_OscConfig+0x2ce>
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	42470000 	.word	0x42470000
 800656c:	42470e80 	.word	0x42470e80
 8006570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006574:	f7fb fa50 	bl	8001a18 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e106      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	4b85      	ldr	r3, [pc, #532]	; (800679c <HAL_RCC_OscConfig+0x4e4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d106      	bne.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
 800659a:	4b81      	ldr	r3, [pc, #516]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a80      	ldr	r2, [pc, #512]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	e01c      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x312>
 80065b0:	4b7b      	ldr	r3, [pc, #492]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a7a      	ldr	r2, [pc, #488]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065b6:	f043 0304 	orr.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	4b78      	ldr	r3, [pc, #480]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	4a77      	ldr	r2, [pc, #476]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	; 0x70
 80065c8:	e00b      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065ca:	4b75      	ldr	r3, [pc, #468]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a74      	ldr	r2, [pc, #464]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	4b72      	ldr	r3, [pc, #456]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a71      	ldr	r2, [pc, #452]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fb fa15 	bl	8001a18 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fb fa11 	bl	8001a18 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0c5      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	4b65      	ldr	r3, [pc, #404]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ee      	beq.n	80065f2 <HAL_RCC_OscConfig+0x33a>
 8006614:	e014      	b.n	8006640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fb f9ff 	bl	8001a18 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fb f9fb 	bl	8001a18 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0af      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	4b5a      	ldr	r3, [pc, #360]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d105      	bne.n	8006652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006646:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a55      	ldr	r2, [pc, #340]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 809b 	beq.w	8006792 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665c:	4b50      	ldr	r3, [pc, #320]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d05c      	beq.n	8006722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d141      	bne.n	80066f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006670:	4b4c      	ldr	r3, [pc, #304]	; (80067a4 <HAL_RCC_OscConfig+0x4ec>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fb f9cf 	bl	8001a18 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fb f9cb 	bl	8001a18 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e081      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006690:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	4937      	ldr	r1, [pc, #220]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c6:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <HAL_RCC_OscConfig+0x4ec>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fb f9a4 	bl	8001a18 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fb f9a0 	bl	8001a18 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e056      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x41c>
 80066f2:	e04e      	b.n	8006792 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <HAL_RCC_OscConfig+0x4ec>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fa:	f7fb f98d 	bl	8001a18 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fb f989 	bl	8001a18 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e03f      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006714:	4b22      	ldr	r3, [pc, #136]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x44a>
 8006720:	e037      	b.n	8006792 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e032      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <HAL_RCC_OscConfig+0x4e8>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d028      	beq.n	800678e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006746:	429a      	cmp	r2, r3
 8006748:	d121      	bne.n	800678e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d11a      	bne.n	800678e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800675e:	4013      	ands	r3, r2
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006764:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006766:	4293      	cmp	r3, r2
 8006768:	d111      	bne.n	800678e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	3b01      	subs	r3, #1
 8006778:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800677a:	429a      	cmp	r2, r3
 800677c:	d107      	bne.n	800678e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d001      	beq.n	8006792 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40007000 	.word	0x40007000
 80067a0:	40023800 	.word	0x40023800
 80067a4:	42470060 	.word	0x42470060

080067a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0cc      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067bc:	4b68      	ldr	r3, [pc, #416]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90c      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b65      	ldr	r3, [pc, #404]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b63      	ldr	r3, [pc, #396]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0b8      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067fc:	4b59      	ldr	r3, [pc, #356]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4a58      	ldr	r2, [pc, #352]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006814:	4b53      	ldr	r3, [pc, #332]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4a52      	ldr	r2, [pc, #328]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800681e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006820:	4b50      	ldr	r3, [pc, #320]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	494d      	ldr	r1, [pc, #308]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d044      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b47      	ldr	r3, [pc, #284]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d119      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e07f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d003      	beq.n	8006866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006862:	2b03      	cmp	r3, #3
 8006864:	d107      	bne.n	8006876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006866:	4b3f      	ldr	r3, [pc, #252]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e06f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006876:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e067      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006886:	4b37      	ldr	r3, [pc, #220]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f023 0203 	bic.w	r2, r3, #3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4934      	ldr	r1, [pc, #208]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006894:	4313      	orrs	r3, r2
 8006896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006898:	f7fb f8be 	bl	8001a18 <HAL_GetTick>
 800689c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a0:	f7fb f8ba 	bl	8001a18 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e04f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b6:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 020c 	and.w	r2, r3, #12
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d1eb      	bne.n	80068a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d20c      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d6:	4b22      	ldr	r3, [pc, #136]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b20      	ldr	r3, [pc, #128]	; (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e032      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fc:	4b19      	ldr	r3, [pc, #100]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4916      	ldr	r1, [pc, #88]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	490e      	ldr	r1, [pc, #56]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800692e:	f000 f821 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8006932:	4602      	mov	r2, r0
 8006934:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	490a      	ldr	r1, [pc, #40]	; (8006968 <HAL_RCC_ClockConfig+0x1c0>)
 8006940:	5ccb      	ldrb	r3, [r1, r3]
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <HAL_RCC_ClockConfig+0x1c4>)
 8006948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCC_ClockConfig+0x1c8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7fb f81e 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023c00 	.word	0x40023c00
 8006964:	40023800 	.word	0x40023800
 8006968:	0801643c 	.word	0x0801643c
 800696c:	20000000 	.word	0x20000000
 8006970:	20000014 	.word	0x20000014

08006974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	2300      	movs	r3, #0
 8006986:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800698c:	4b67      	ldr	r3, [pc, #412]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b08      	cmp	r3, #8
 8006996:	d00d      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006998:	2b08      	cmp	r3, #8
 800699a:	f200 80bd 	bhi.w	8006b18 <HAL_RCC_GetSysClockFreq+0x1a4>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x34>
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d003      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x3a>
 80069a6:	e0b7      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069a8:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80069aa:	60bb      	str	r3, [r7, #8]
       break;
 80069ac:	e0b7      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80069b0:	60bb      	str	r3, [r7, #8]
      break;
 80069b2:	e0b4      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b4:	4b5d      	ldr	r3, [pc, #372]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069be:	4b5b      	ldr	r3, [pc, #364]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d04d      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b58      	ldr	r3, [pc, #352]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	461a      	mov	r2, r3
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	ea02 0800 	and.w	r8, r2, r0
 80069e2:	ea03 0901 	and.w	r9, r3, r1
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	014b      	lsls	r3, r1, #5
 80069f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069f8:	0142      	lsls	r2, r0, #5
 80069fa:	4610      	mov	r0, r2
 80069fc:	4619      	mov	r1, r3
 80069fe:	ebb0 0008 	subs.w	r0, r0, r8
 8006a02:	eb61 0109 	sbc.w	r1, r1, r9
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	018b      	lsls	r3, r1, #6
 8006a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a14:	0182      	lsls	r2, r0, #6
 8006a16:	1a12      	subs	r2, r2, r0
 8006a18:	eb63 0301 	sbc.w	r3, r3, r1
 8006a1c:	f04f 0000 	mov.w	r0, #0
 8006a20:	f04f 0100 	mov.w	r1, #0
 8006a24:	00d9      	lsls	r1, r3, #3
 8006a26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a2a:	00d0      	lsls	r0, r2, #3
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	eb12 0208 	adds.w	r2, r2, r8
 8006a34:	eb43 0309 	adc.w	r3, r3, r9
 8006a38:	f04f 0000 	mov.w	r0, #0
 8006a3c:	f04f 0100 	mov.w	r1, #0
 8006a40:	0259      	lsls	r1, r3, #9
 8006a42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006a46:	0250      	lsls	r0, r2, #9
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4619      	mov	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	f7f9 fc0a 	bl	8000270 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e04a      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b31      	ldr	r3, [pc, #196]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a76:	f04f 0100 	mov.w	r1, #0
 8006a7a:	ea02 0400 	and.w	r4, r2, r0
 8006a7e:	ea03 0501 	and.w	r5, r3, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	014b      	lsls	r3, r1, #5
 8006a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a94:	0142      	lsls	r2, r0, #5
 8006a96:	4610      	mov	r0, r2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	1b00      	subs	r0, r0, r4
 8006a9c:	eb61 0105 	sbc.w	r1, r1, r5
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	018b      	lsls	r3, r1, #6
 8006aaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006aae:	0182      	lsls	r2, r0, #6
 8006ab0:	1a12      	subs	r2, r2, r0
 8006ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ab6:	f04f 0000 	mov.w	r0, #0
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	00d9      	lsls	r1, r3, #3
 8006ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ac4:	00d0      	lsls	r0, r2, #3
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	1912      	adds	r2, r2, r4
 8006acc:	eb45 0303 	adc.w	r3, r5, r3
 8006ad0:	f04f 0000 	mov.w	r0, #0
 8006ad4:	f04f 0100 	mov.w	r1, #0
 8006ad8:	0299      	lsls	r1, r3, #10
 8006ada:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ade:	0290      	lsls	r0, r2, #10
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	f7f9 fbbe 	bl	8000270 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4613      	mov	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	0c1b      	lsrs	r3, r3, #16
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	3301      	adds	r3, #1
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	60bb      	str	r3, [r7, #8]
      break;
 8006b16:	e002      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b1a:	60bb      	str	r3, [r7, #8]
      break;
 8006b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	007a1200 	.word	0x007a1200

08006b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000000 	.word	0x20000000

08006b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b54:	f7ff fff0 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	0a9b      	lsrs	r3, r3, #10
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	4903      	ldr	r1, [pc, #12]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b66:	5ccb      	ldrb	r3, [r1, r3]
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40023800 	.word	0x40023800
 8006b74:	0801644c 	.word	0x0801644c

08006b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b7c:	f7ff ffdc 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b80:	4602      	mov	r2, r0
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	0b5b      	lsrs	r3, r3, #13
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	4903      	ldr	r1, [pc, #12]	; (8006b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b8e:	5ccb      	ldrb	r3, [r1, r3]
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	0801644c 	.word	0x0801644c

08006ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d035      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bc8:	4b62      	ldr	r3, [pc, #392]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bce:	f7fa ff23 	bl	8001a18 <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bd6:	f7fa ff1f 	bl	8001a18 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e0b0      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	019a      	lsls	r2, r3, #6
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	071b      	lsls	r3, r3, #28
 8006c00:	4955      	ldr	r1, [pc, #340]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c08:	4b52      	ldr	r3, [pc, #328]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0e:	f7fa ff03 	bl	8001a18 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c16:	f7fa feff 	bl	8001a18 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e090      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c28:	4b4b      	ldr	r3, [pc, #300]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8083 	beq.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	4a43      	ldr	r2, [pc, #268]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	6413      	str	r3, [r2, #64]	; 0x40
 8006c52:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3e      	ldr	r2, [pc, #248]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6a:	f7fa fed5 	bl	8001a18 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c70:	e008      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c72:	f7fa fed1 	bl	8001a18 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e062      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c84:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c90:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02f      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d028      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cae:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cb8:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cbe:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cc4:	4a24      	ldr	r2, [pc, #144]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d114      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cd6:	f7fa fe9f 	bl	8001a18 <HAL_GetTick>
 8006cda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fa fe9b 	bl	8001a18 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e02a      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf4:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ee      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d22:	490d      	ldr	r1, [pc, #52]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	608b      	str	r3, [r1, #8]
 8006d28:	e005      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d34:	6093      	str	r3, [r2, #8]
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d42:	4905      	ldr	r1, [pc, #20]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	42470068 	.word	0x42470068
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	42470e40 	.word	0x42470e40

08006d64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d13e      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d12f      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d98:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d9a:	617b      	str	r3, [r7, #20]
          break;
 8006d9c:	e02f      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d9e:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006daa:	d108      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db4:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	e007      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dbe:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
 8006de0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de8:	0f1b      	lsrs	r3, r3, #28
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]
          break;
 8006df6:	e002      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]
          break;
 8006dfc:	bf00      	nop
        }
      }
      break;
 8006dfe:	bf00      	nop
    }
  }
  return frequency;
 8006e00:	697b      	ldr	r3, [r7, #20]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800
 8006e14:	00bb8000 	.word	0x00bb8000
 8006e18:	007a1200 	.word	0x007a1200
 8006e1c:	00f42400 	.word	0x00f42400

08006e20 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e034      	b.n	8006ea0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fa f97a 	bl	8001144 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3308      	adds	r3, #8
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f000 fb3a 	bl	80074d4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	f000 fb84 	bl	8007578 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6858      	ldr	r0, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	f000 fbb9 	bl	80075f4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	6892      	ldr	r2, [r2, #8]
 8006e8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	6892      	ldr	r2, [r2, #8]
 8006e96:	f041 0101 	orr.w	r1, r1, #1
 8006e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e03f      	b.n	8006f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fa f860 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2224      	movs	r2, #36	; 0x24
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f929 	bl	8007144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b08a      	sub	sp, #40	; 0x28
 8006f46:	af02      	add	r7, sp, #8
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d17c      	bne.n	800705c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_UART_Transmit+0x2c>
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e075      	b.n	800705e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_UART_Transmit+0x3e>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e06e      	b.n	800705e <HAL_UART_Transmit+0x11c>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2221      	movs	r2, #33	; 0x21
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f96:	f7fa fd3f 	bl	8001a18 <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb0:	d108      	bne.n	8006fc4 <HAL_UART_Transmit+0x82>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	e003      	b.n	8006fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fd4:	e02a      	b.n	800702c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f840 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e036      	b.n	800705e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	3302      	adds	r3, #2
 800700a:	61bb      	str	r3, [r7, #24]
 800700c:	e007      	b.n	800701e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	3301      	adds	r3, #1
 800701c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1cf      	bne.n	8006fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	2140      	movs	r1, #64	; 0x40
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f810 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e006      	b.n	800705e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e000      	b.n	800705e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b090      	sub	sp, #64	; 0x40
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007076:	e050      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d04c      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <UART_WaitOnFlagUntilTimeout+0x30>
 8007086:	f7fa fcc7 	bl	8001a18 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007092:	429a      	cmp	r2, r3
 8007094:	d241      	bcs.n	800711a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	330c      	adds	r3, #12
 80070b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070b6:	637a      	str	r2, [r7, #52]	; 0x34
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	613b      	str	r3, [r7, #16]
   return(result);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3314      	adds	r3, #20
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	623a      	str	r2, [r7, #32]
 80070ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	69f9      	ldr	r1, [r7, #28]
 80070f0:	6a3a      	ldr	r2, [r7, #32]
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e5      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00f      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	429a      	cmp	r2, r3
 8007136:	d09f      	beq.n	8007078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3740      	adds	r7, #64	; 0x40
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b09f      	sub	sp, #124	; 0x7c
 800714a:	af00      	add	r7, sp, #0
 800714c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	ea40 0301 	orr.w	r3, r0, r1
 8007164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	431a      	orrs	r2, r3
 8007170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	431a      	orrs	r2, r3
 8007176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4313      	orrs	r3, r2
 800717c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800717e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007188:	f021 010c 	bic.w	r1, r1, #12
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007192:	430b      	orrs	r3, r1
 8007194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a2:	6999      	ldr	r1, [r3, #24]
 80071a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	ea40 0301 	orr.w	r3, r0, r1
 80071ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4bc5      	ldr	r3, [pc, #788]	; (80074c8 <UART_SetConfig+0x384>)
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d004      	beq.n	80071c2 <UART_SetConfig+0x7e>
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4bc3      	ldr	r3, [pc, #780]	; (80074cc <UART_SetConfig+0x388>)
 80071be:	429a      	cmp	r2, r3
 80071c0:	d103      	bne.n	80071ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c2:	f7ff fcd9 	bl	8006b78 <HAL_RCC_GetPCLK2Freq>
 80071c6:	6778      	str	r0, [r7, #116]	; 0x74
 80071c8:	e002      	b.n	80071d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7ff fcc1 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 80071ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d8:	f040 80b6 	bne.w	8007348 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071de:	461c      	mov	r4, r3
 80071e0:	f04f 0500 	mov.w	r5, #0
 80071e4:	4622      	mov	r2, r4
 80071e6:	462b      	mov	r3, r5
 80071e8:	1891      	adds	r1, r2, r2
 80071ea:	6439      	str	r1, [r7, #64]	; 0x40
 80071ec:	415b      	adcs	r3, r3
 80071ee:	647b      	str	r3, [r7, #68]	; 0x44
 80071f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071f4:	1912      	adds	r2, r2, r4
 80071f6:	eb45 0303 	adc.w	r3, r5, r3
 80071fa:	f04f 0000 	mov.w	r0, #0
 80071fe:	f04f 0100 	mov.w	r1, #0
 8007202:	00d9      	lsls	r1, r3, #3
 8007204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007208:	00d0      	lsls	r0, r2, #3
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	1911      	adds	r1, r2, r4
 8007210:	6639      	str	r1, [r7, #96]	; 0x60
 8007212:	416b      	adcs	r3, r5
 8007214:	667b      	str	r3, [r7, #100]	; 0x64
 8007216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	461a      	mov	r2, r3
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	1891      	adds	r1, r2, r2
 8007222:	63b9      	str	r1, [r7, #56]	; 0x38
 8007224:	415b      	adcs	r3, r3
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800722c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007230:	f7f9 f81e 	bl	8000270 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4ba5      	ldr	r3, [pc, #660]	; (80074d0 <UART_SetConfig+0x38c>)
 800723a:	fba3 2302 	umull	r2, r3, r3, r2
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	011e      	lsls	r6, r3, #4
 8007242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007244:	461c      	mov	r4, r3
 8007246:	f04f 0500 	mov.w	r5, #0
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	1891      	adds	r1, r2, r2
 8007250:	6339      	str	r1, [r7, #48]	; 0x30
 8007252:	415b      	adcs	r3, r3
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
 8007256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800725a:	1912      	adds	r2, r2, r4
 800725c:	eb45 0303 	adc.w	r3, r5, r3
 8007260:	f04f 0000 	mov.w	r0, #0
 8007264:	f04f 0100 	mov.w	r1, #0
 8007268:	00d9      	lsls	r1, r3, #3
 800726a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800726e:	00d0      	lsls	r0, r2, #3
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	1911      	adds	r1, r2, r4
 8007276:	65b9      	str	r1, [r7, #88]	; 0x58
 8007278:	416b      	adcs	r3, r5
 800727a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800727c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	461a      	mov	r2, r3
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	1891      	adds	r1, r2, r2
 8007288:	62b9      	str	r1, [r7, #40]	; 0x28
 800728a:	415b      	adcs	r3, r3
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800728e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007292:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007296:	f7f8 ffeb 	bl	8000270 <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4b8c      	ldr	r3, [pc, #560]	; (80074d0 <UART_SetConfig+0x38c>)
 80072a0:	fba3 1302 	umull	r1, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2164      	movs	r1, #100	; 0x64
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	4a87      	ldr	r2, [pc, #540]	; (80074d0 <UART_SetConfig+0x38c>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072c0:	441e      	add	r6, r3
 80072c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c4:	4618      	mov	r0, r3
 80072c6:	f04f 0100 	mov.w	r1, #0
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	1894      	adds	r4, r2, r2
 80072d0:	623c      	str	r4, [r7, #32]
 80072d2:	415b      	adcs	r3, r3
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072da:	1812      	adds	r2, r2, r0
 80072dc:	eb41 0303 	adc.w	r3, r1, r3
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	f04f 0500 	mov.w	r5, #0
 80072e8:	00dd      	lsls	r5, r3, #3
 80072ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072ee:	00d4      	lsls	r4, r2, #3
 80072f0:	4622      	mov	r2, r4
 80072f2:	462b      	mov	r3, r5
 80072f4:	1814      	adds	r4, r2, r0
 80072f6:	653c      	str	r4, [r7, #80]	; 0x50
 80072f8:	414b      	adcs	r3, r1
 80072fa:	657b      	str	r3, [r7, #84]	; 0x54
 80072fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	461a      	mov	r2, r3
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	1891      	adds	r1, r2, r2
 8007308:	61b9      	str	r1, [r7, #24]
 800730a:	415b      	adcs	r3, r3
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007316:	f7f8 ffab 	bl	8000270 <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4b6c      	ldr	r3, [pc, #432]	; (80074d0 <UART_SetConfig+0x38c>)
 8007320:	fba3 1302 	umull	r1, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	2164      	movs	r1, #100	; 0x64
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	3332      	adds	r3, #50	; 0x32
 8007332:	4a67      	ldr	r2, [pc, #412]	; (80074d0 <UART_SetConfig+0x38c>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f003 0207 	and.w	r2, r3, #7
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4432      	add	r2, r6
 8007344:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007346:	e0b9      	b.n	80074bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734a:	461c      	mov	r4, r3
 800734c:	f04f 0500 	mov.w	r5, #0
 8007350:	4622      	mov	r2, r4
 8007352:	462b      	mov	r3, r5
 8007354:	1891      	adds	r1, r2, r2
 8007356:	6139      	str	r1, [r7, #16]
 8007358:	415b      	adcs	r3, r3
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007360:	1912      	adds	r2, r2, r4
 8007362:	eb45 0303 	adc.w	r3, r5, r3
 8007366:	f04f 0000 	mov.w	r0, #0
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	00d9      	lsls	r1, r3, #3
 8007370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007374:	00d0      	lsls	r0, r2, #3
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	eb12 0804 	adds.w	r8, r2, r4
 800737e:	eb43 0905 	adc.w	r9, r3, r5
 8007382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	4618      	mov	r0, r3
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	008b      	lsls	r3, r1, #2
 8007396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800739a:	0082      	lsls	r2, r0, #2
 800739c:	4640      	mov	r0, r8
 800739e:	4649      	mov	r1, r9
 80073a0:	f7f8 ff66 	bl	8000270 <__aeabi_uldivmod>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4b49      	ldr	r3, [pc, #292]	; (80074d0 <UART_SetConfig+0x38c>)
 80073aa:	fba3 2302 	umull	r2, r3, r3, r2
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	011e      	lsls	r6, r3, #4
 80073b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b4:	4618      	mov	r0, r3
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	1894      	adds	r4, r2, r2
 80073c0:	60bc      	str	r4, [r7, #8]
 80073c2:	415b      	adcs	r3, r3
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ca:	1812      	adds	r2, r2, r0
 80073cc:	eb41 0303 	adc.w	r3, r1, r3
 80073d0:	f04f 0400 	mov.w	r4, #0
 80073d4:	f04f 0500 	mov.w	r5, #0
 80073d8:	00dd      	lsls	r5, r3, #3
 80073da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073de:	00d4      	lsls	r4, r2, #3
 80073e0:	4622      	mov	r2, r4
 80073e2:	462b      	mov	r3, r5
 80073e4:	1814      	adds	r4, r2, r0
 80073e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80073e8:	414b      	adcs	r3, r1
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f04f 0100 	mov.w	r1, #0
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	008b      	lsls	r3, r1, #2
 8007400:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007404:	0082      	lsls	r2, r0, #2
 8007406:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800740a:	f7f8 ff31 	bl	8000270 <__aeabi_uldivmod>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <UART_SetConfig+0x38c>)
 8007414:	fba3 1302 	umull	r1, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	2164      	movs	r1, #100	; 0x64
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	3332      	adds	r3, #50	; 0x32
 8007426:	4a2a      	ldr	r2, [pc, #168]	; (80074d0 <UART_SetConfig+0x38c>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007432:	441e      	add	r6, r3
 8007434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007436:	4618      	mov	r0, r3
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	1894      	adds	r4, r2, r2
 8007442:	603c      	str	r4, [r7, #0]
 8007444:	415b      	adcs	r3, r3
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	1812      	adds	r2, r2, r0
 800744e:	eb41 0303 	adc.w	r3, r1, r3
 8007452:	f04f 0400 	mov.w	r4, #0
 8007456:	f04f 0500 	mov.w	r5, #0
 800745a:	00dd      	lsls	r5, r3, #3
 800745c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007460:	00d4      	lsls	r4, r2, #3
 8007462:	4622      	mov	r2, r4
 8007464:	462b      	mov	r3, r5
 8007466:	eb12 0a00 	adds.w	sl, r2, r0
 800746a:	eb43 0b01 	adc.w	fp, r3, r1
 800746e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4618      	mov	r0, r3
 8007474:	f04f 0100 	mov.w	r1, #0
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007486:	0082      	lsls	r2, r0, #2
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	f7f8 fef0 	bl	8000270 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <UART_SetConfig+0x38c>)
 8007496:	fba3 1302 	umull	r1, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2164      	movs	r1, #100	; 0x64
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	3332      	adds	r3, #50	; 0x32
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <UART_SetConfig+0x38c>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4432      	add	r2, r6
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	377c      	adds	r7, #124	; 0x7c
 80074c0:	46bd      	mov	sp, r7
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	bf00      	nop
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40011400 	.word	0x40011400
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ec:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4b20      	ldr	r3, [pc, #128]	; (8007574 <FSMC_NORSRAM_Init+0xa0>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80074fe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007504:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800750a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007510:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007516:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800751c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007522:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007528:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800752e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007534:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800753a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007540:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b08      	cmp	r3, #8
 800754e:	d103      	bne.n	8007558 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007556:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	fff00080 	.word	0xfff00080

08007578 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800759a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075a6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075ae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80075b6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	3b01      	subs	r3, #1
 80075be:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075c0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	3b02      	subs	r3, #2
 80075c8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80075ca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075d0:	4313      	orrs	r3, r2
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6979      	ldr	r1, [r7, #20]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760c:	d122      	bne.n	8007654 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800761c:	4013      	ands	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800762a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007632:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800763a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007640:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007652:	e005      	b.n	8007660 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800765c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	cff00000 	.word	0xcff00000

08007674 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800767a:	4b8d      	ldr	r3, [pc, #564]	; (80078b0 <MX_LWIP_Init+0x23c>)
 800767c:	22c0      	movs	r2, #192	; 0xc0
 800767e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007680:	4b8b      	ldr	r3, [pc, #556]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007682:	22a8      	movs	r2, #168	; 0xa8
 8007684:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007686:	4b8a      	ldr	r3, [pc, #552]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007688:	2201      	movs	r2, #1
 800768a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800768c:	4b88      	ldr	r3, [pc, #544]	; (80078b0 <MX_LWIP_Init+0x23c>)
 800768e:	22c8      	movs	r2, #200	; 0xc8
 8007690:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007692:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007694:	22ff      	movs	r2, #255	; 0xff
 8007696:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007698:	4b86      	ldr	r3, [pc, #536]	; (80078b4 <MX_LWIP_Init+0x240>)
 800769a:	22ff      	movs	r2, #255	; 0xff
 800769c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800769e:	4b85      	ldr	r3, [pc, #532]	; (80078b4 <MX_LWIP_Init+0x240>)
 80076a0:	22ff      	movs	r2, #255	; 0xff
 80076a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80076a4:	4b83      	ldr	r3, [pc, #524]	; (80078b4 <MX_LWIP_Init+0x240>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80076aa:	4b83      	ldr	r3, [pc, #524]	; (80078b8 <MX_LWIP_Init+0x244>)
 80076ac:	22c0      	movs	r2, #192	; 0xc0
 80076ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80076b0:	4b81      	ldr	r3, [pc, #516]	; (80078b8 <MX_LWIP_Init+0x244>)
 80076b2:	22a8      	movs	r2, #168	; 0xa8
 80076b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80076b6:	4b80      	ldr	r3, [pc, #512]	; (80078b8 <MX_LWIP_Init+0x244>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80076bc:	4b7e      	ldr	r3, [pc, #504]	; (80078b8 <MX_LWIP_Init+0x244>)
 80076be:	2201      	movs	r2, #1
 80076c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80076c2:	f000 fcd7 	bl	8008074 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80076c6:	4b7a      	ldr	r3, [pc, #488]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	061a      	lsls	r2, r3, #24
 80076cc:	4b78      	ldr	r3, [pc, #480]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	431a      	orrs	r2, r3
 80076d4:	4b76      	ldr	r3, [pc, #472]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076d6:	789b      	ldrb	r3, [r3, #2]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	4313      	orrs	r3, r2
 80076dc:	4a74      	ldr	r2, [pc, #464]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076de:	78d2      	ldrb	r2, [r2, #3]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	061a      	lsls	r2, r3, #24
 80076e4:	4b72      	ldr	r3, [pc, #456]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	0619      	lsls	r1, r3, #24
 80076ea:	4b71      	ldr	r3, [pc, #452]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	4319      	orrs	r1, r3
 80076f2:	4b6f      	ldr	r3, [pc, #444]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	430b      	orrs	r3, r1
 80076fa:	496d      	ldr	r1, [pc, #436]	; (80078b0 <MX_LWIP_Init+0x23c>)
 80076fc:	78c9      	ldrb	r1, [r1, #3]
 80076fe:	430b      	orrs	r3, r1
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007706:	431a      	orrs	r2, r3
 8007708:	4b69      	ldr	r3, [pc, #420]	; (80078b0 <MX_LWIP_Init+0x23c>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	0619      	lsls	r1, r3, #24
 800770e:	4b68      	ldr	r3, [pc, #416]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	4319      	orrs	r1, r3
 8007716:	4b66      	ldr	r3, [pc, #408]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007718:	789b      	ldrb	r3, [r3, #2]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	430b      	orrs	r3, r1
 800771e:	4964      	ldr	r1, [pc, #400]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007720:	78c9      	ldrb	r1, [r1, #3]
 8007722:	430b      	orrs	r3, r1
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800772a:	431a      	orrs	r2, r3
 800772c:	4b60      	ldr	r3, [pc, #384]	; (80078b0 <MX_LWIP_Init+0x23c>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	0619      	lsls	r1, r3, #24
 8007732:	4b5f      	ldr	r3, [pc, #380]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	4319      	orrs	r1, r3
 800773a:	4b5d      	ldr	r3, [pc, #372]	; (80078b0 <MX_LWIP_Init+0x23c>)
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	430b      	orrs	r3, r1
 8007742:	495b      	ldr	r1, [pc, #364]	; (80078b0 <MX_LWIP_Init+0x23c>)
 8007744:	78c9      	ldrb	r1, [r1, #3]
 8007746:	430b      	orrs	r3, r1
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	4313      	orrs	r3, r2
 800774c:	4a5b      	ldr	r2, [pc, #364]	; (80078bc <MX_LWIP_Init+0x248>)
 800774e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007750:	4b58      	ldr	r3, [pc, #352]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	061a      	lsls	r2, r3, #24
 8007756:	4b57      	ldr	r3, [pc, #348]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	431a      	orrs	r2, r3
 800775e:	4b55      	ldr	r3, [pc, #340]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007760:	789b      	ldrb	r3, [r3, #2]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	4313      	orrs	r3, r2
 8007766:	4a53      	ldr	r2, [pc, #332]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007768:	78d2      	ldrb	r2, [r2, #3]
 800776a:	4313      	orrs	r3, r2
 800776c:	061a      	lsls	r2, r3, #24
 800776e:	4b51      	ldr	r3, [pc, #324]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	0619      	lsls	r1, r3, #24
 8007774:	4b4f      	ldr	r3, [pc, #316]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	4319      	orrs	r1, r3
 800777c:	4b4d      	ldr	r3, [pc, #308]	; (80078b4 <MX_LWIP_Init+0x240>)
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	430b      	orrs	r3, r1
 8007784:	494b      	ldr	r1, [pc, #300]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007786:	78c9      	ldrb	r1, [r1, #3]
 8007788:	430b      	orrs	r3, r1
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007790:	431a      	orrs	r2, r3
 8007792:	4b48      	ldr	r3, [pc, #288]	; (80078b4 <MX_LWIP_Init+0x240>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	0619      	lsls	r1, r3, #24
 8007798:	4b46      	ldr	r3, [pc, #280]	; (80078b4 <MX_LWIP_Init+0x240>)
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	4319      	orrs	r1, r3
 80077a0:	4b44      	ldr	r3, [pc, #272]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077a2:	789b      	ldrb	r3, [r3, #2]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	430b      	orrs	r3, r1
 80077a8:	4942      	ldr	r1, [pc, #264]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077aa:	78c9      	ldrb	r1, [r1, #3]
 80077ac:	430b      	orrs	r3, r1
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077b4:	431a      	orrs	r2, r3
 80077b6:	4b3f      	ldr	r3, [pc, #252]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	0619      	lsls	r1, r3, #24
 80077bc:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	4319      	orrs	r1, r3
 80077c4:	4b3b      	ldr	r3, [pc, #236]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077c6:	789b      	ldrb	r3, [r3, #2]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	430b      	orrs	r3, r1
 80077cc:	4939      	ldr	r1, [pc, #228]	; (80078b4 <MX_LWIP_Init+0x240>)
 80077ce:	78c9      	ldrb	r1, [r1, #3]
 80077d0:	430b      	orrs	r3, r1
 80077d2:	0e1b      	lsrs	r3, r3, #24
 80077d4:	4313      	orrs	r3, r2
 80077d6:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <MX_LWIP_Init+0x24c>)
 80077d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80077da:	4b37      	ldr	r3, [pc, #220]	; (80078b8 <MX_LWIP_Init+0x244>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	061a      	lsls	r2, r3, #24
 80077e0:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <MX_LWIP_Init+0x244>)
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	431a      	orrs	r2, r3
 80077e8:	4b33      	ldr	r3, [pc, #204]	; (80078b8 <MX_LWIP_Init+0x244>)
 80077ea:	789b      	ldrb	r3, [r3, #2]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4313      	orrs	r3, r2
 80077f0:	4a31      	ldr	r2, [pc, #196]	; (80078b8 <MX_LWIP_Init+0x244>)
 80077f2:	78d2      	ldrb	r2, [r2, #3]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	061a      	lsls	r2, r3, #24
 80077f8:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <MX_LWIP_Init+0x244>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	0619      	lsls	r1, r3, #24
 80077fe:	4b2e      	ldr	r3, [pc, #184]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	4319      	orrs	r1, r3
 8007806:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007808:	789b      	ldrb	r3, [r3, #2]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	430b      	orrs	r3, r1
 800780e:	492a      	ldr	r1, [pc, #168]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007810:	78c9      	ldrb	r1, [r1, #3]
 8007812:	430b      	orrs	r3, r1
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800781a:	431a      	orrs	r2, r3
 800781c:	4b26      	ldr	r3, [pc, #152]	; (80078b8 <MX_LWIP_Init+0x244>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	0619      	lsls	r1, r3, #24
 8007822:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	4319      	orrs	r1, r3
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <MX_LWIP_Init+0x244>)
 800782c:	789b      	ldrb	r3, [r3, #2]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	430b      	orrs	r3, r1
 8007832:	4921      	ldr	r1, [pc, #132]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007834:	78c9      	ldrb	r1, [r1, #3]
 8007836:	430b      	orrs	r3, r1
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800783e:	431a      	orrs	r2, r3
 8007840:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	0619      	lsls	r1, r3, #24
 8007846:	4b1c      	ldr	r3, [pc, #112]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	041b      	lsls	r3, r3, #16
 800784c:	4319      	orrs	r1, r3
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007850:	789b      	ldrb	r3, [r3, #2]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	430b      	orrs	r3, r1
 8007856:	4918      	ldr	r1, [pc, #96]	; (80078b8 <MX_LWIP_Init+0x244>)
 8007858:	78c9      	ldrb	r1, [r1, #3]
 800785a:	430b      	orrs	r3, r1
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	4313      	orrs	r3, r2
 8007860:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <MX_LWIP_Init+0x250>)
 8007862:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <MX_LWIP_Init+0x254>)
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	4b18      	ldr	r3, [pc, #96]	; (80078cc <MX_LWIP_Init+0x258>)
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	2300      	movs	r3, #0
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <MX_LWIP_Init+0x250>)
 8007872:	4a13      	ldr	r2, [pc, #76]	; (80078c0 <MX_LWIP_Init+0x24c>)
 8007874:	4911      	ldr	r1, [pc, #68]	; (80078bc <MX_LWIP_Init+0x248>)
 8007876:	4816      	ldr	r0, [pc, #88]	; (80078d0 <MX_LWIP_Init+0x25c>)
 8007878:	f001 f8a2 	bl	80089c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800787c:	4814      	ldr	r0, [pc, #80]	; (80078d0 <MX_LWIP_Init+0x25c>)
 800787e:	f001 fa51 	bl	8008d24 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <MX_LWIP_Init+0x25c>)
 8007884:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007894:	480e      	ldr	r0, [pc, #56]	; (80078d0 <MX_LWIP_Init+0x25c>)
 8007896:	f001 fa55 	bl	8008d44 <netif_set_up>
 800789a:	e002      	b.n	80078a2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800789c:	480c      	ldr	r0, [pc, #48]	; (80078d0 <MX_LWIP_Init+0x25c>)
 800789e:	f001 fabd 	bl	8008e1c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80078a2:	490c      	ldr	r1, [pc, #48]	; (80078d4 <MX_LWIP_Init+0x260>)
 80078a4:	480a      	ldr	r0, [pc, #40]	; (80078d0 <MX_LWIP_Init+0x25c>)
 80078a6:	f001 faeb 	bl	8008e80 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000bac 	.word	0x20000bac
 80078b4:	20000ba8 	.word	0x20000ba8
 80078b8:	20000b6c 	.word	0x20000b6c
 80078bc:	20000ba4 	.word	0x20000ba4
 80078c0:	20000bb0 	.word	0x20000bb0
 80078c4:	20000bb4 	.word	0x20000bb4
 80078c8:	08012641 	.word	0x08012641
 80078cc:	08007ea1 	.word	0x08007ea1
 80078d0:	20000b70 	.word	0x20000b70
 80078d4:	08007f0d 	.word	0x08007f0d

080078d8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80078dc:	4803      	ldr	r0, [pc, #12]	; (80078ec <MX_LWIP_Process+0x14>)
 80078de:	f000 fabf 	bl	8007e60 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80078e2:	f008 fac7 	bl	800fe74 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000b70 	.word	0x20000b70

080078f0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08e      	sub	sp, #56	; 0x38
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	609a      	str	r2, [r3, #8]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a4a      	ldr	r2, [pc, #296]	; (8007a38 <HAL_ETH_MspInit+0x148>)
 800790e:	4293      	cmp	r3, r2
 8007910:	f040 808d 	bne.w	8007a2e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007914:	2300      	movs	r3, #0
 8007916:	623b      	str	r3, [r7, #32]
 8007918:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	4a47      	ldr	r2, [pc, #284]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800791e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007922:	6313      	str	r3, [r2, #48]	; 0x30
 8007924:	4b45      	ldr	r3, [pc, #276]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792c:	623b      	str	r3, [r7, #32]
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	4b41      	ldr	r3, [pc, #260]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	4a40      	ldr	r2, [pc, #256]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800793a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800793e:	6313      	str	r3, [r2, #48]	; 0x30
 8007940:	4b3e      	ldr	r3, [pc, #248]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007948:	61fb      	str	r3, [r7, #28]
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	4b3a      	ldr	r3, [pc, #232]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	4a39      	ldr	r2, [pc, #228]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800795a:	6313      	str	r3, [r2, #48]	; 0x30
 800795c:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	4b33      	ldr	r3, [pc, #204]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	4a32      	ldr	r2, [pc, #200]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007972:	f043 0304 	orr.w	r3, r3, #4
 8007976:	6313      	str	r3, [r2, #48]	; 0x30
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	4a2b      	ldr	r2, [pc, #172]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	6313      	str	r3, [r2, #48]	; 0x30
 8007994:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 80079aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ae:	6313      	str	r3, [r2, #48]	; 0x30
 80079b0:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <HAL_ETH_MspInit+0x14c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80079bc:	2332      	movs	r3, #50	; 0x32
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c0:	2302      	movs	r3, #2
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c8:	2303      	movs	r3, #3
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079cc:	230b      	movs	r3, #11
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079d4:	4619      	mov	r1, r3
 80079d6:	481a      	ldr	r0, [pc, #104]	; (8007a40 <HAL_ETH_MspInit+0x150>)
 80079d8:	f7fc ffd4 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80079dc:	2386      	movs	r3, #134	; 0x86
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e0:	2302      	movs	r3, #2
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e8:	2303      	movs	r3, #3
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079ec:	230b      	movs	r3, #11
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079f4:	4619      	mov	r1, r3
 80079f6:	4813      	ldr	r0, [pc, #76]	; (8007a44 <HAL_ETH_MspInit+0x154>)
 80079f8:	f7fc ffc4 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80079fc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a02:	2302      	movs	r3, #2
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a0e:	230b      	movs	r3, #11
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a16:	4619      	mov	r1, r3
 8007a18:	480b      	ldr	r0, [pc, #44]	; (8007a48 <HAL_ETH_MspInit+0x158>)
 8007a1a:	f7fc ffb3 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2101      	movs	r1, #1
 8007a22:	203d      	movs	r0, #61	; 0x3d
 8007a24:	f7fa f903 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007a28:	203d      	movs	r0, #61	; 0x3d
 8007a2a:	f7fa f91c 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3738      	adds	r7, #56	; 0x38
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40028000 	.word	0x40028000
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	40020800 	.word	0x40020800
 8007a44:	40020000 	.word	0x40020000
 8007a48:	40021800 	.word	0x40021800

08007a4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007a58:	4b52      	ldr	r3, [pc, #328]	; (8007ba4 <low_level_init+0x158>)
 8007a5a:	4a53      	ldr	r2, [pc, #332]	; (8007ba8 <low_level_init+0x15c>)
 8007a5c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007a5e:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <low_level_init+0x158>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007a64:	4b4f      	ldr	r3, [pc, #316]	; (8007ba4 <low_level_init+0x158>)
 8007a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a6a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a6c:	4b4d      	ldr	r3, [pc, #308]	; (8007ba4 <low_level_init+0x158>)
 8007a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a72:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8007a74:	4b4b      	ldr	r3, [pc, #300]	; (8007ba4 <low_level_init+0x158>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007a82:	23e1      	movs	r3, #225	; 0xe1
 8007a84:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007a86:	2300      	movs	r3, #0
 8007a88:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007a92:	4a44      	ldr	r2, [pc, #272]	; (8007ba4 <low_level_init+0x158>)
 8007a94:	f107 0308 	add.w	r3, r7, #8
 8007a98:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007a9a:	4b42      	ldr	r3, [pc, #264]	; (8007ba4 <low_level_init+0x158>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007aa0:	4b40      	ldr	r3, [pc, #256]	; (8007ba4 <low_level_init+0x158>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007aa6:	4b3f      	ldr	r3, [pc, #252]	; (8007ba4 <low_level_init+0x158>)
 8007aa8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007aac:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007aae:	483d      	ldr	r0, [pc, #244]	; (8007ba4 <low_level_init+0x158>)
 8007ab0:	f7fb fdbc 	bl	800362c <HAL_ETH_Init>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d108      	bne.n	8007ad0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ac4:	f043 0304 	orr.w	r3, r3, #4
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	4a36      	ldr	r2, [pc, #216]	; (8007bac <low_level_init+0x160>)
 8007ad4:	4936      	ldr	r1, [pc, #216]	; (8007bb0 <low_level_init+0x164>)
 8007ad6:	4833      	ldr	r0, [pc, #204]	; (8007ba4 <low_level_init+0x158>)
 8007ad8:	f7fb ff44 	bl	8003964 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007adc:	2304      	movs	r3, #4
 8007ade:	4a35      	ldr	r2, [pc, #212]	; (8007bb4 <low_level_init+0x168>)
 8007ae0:	4935      	ldr	r1, [pc, #212]	; (8007bb8 <low_level_init+0x16c>)
 8007ae2:	4830      	ldr	r0, [pc, #192]	; (8007ba4 <low_level_init+0x158>)
 8007ae4:	f7fb ffa7 	bl	8003a36 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2206      	movs	r2, #6
 8007aec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007af0:	4b2c      	ldr	r3, [pc, #176]	; (8007ba4 <low_level_init+0x158>)
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007afc:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <low_level_init+0x158>)
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	785a      	ldrb	r2, [r3, #1]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007b08:	4b26      	ldr	r3, [pc, #152]	; (8007ba4 <low_level_init+0x158>)
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	789a      	ldrb	r2, [r3, #2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007b14:	4b23      	ldr	r3, [pc, #140]	; (8007ba4 <low_level_init+0x158>)
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	78da      	ldrb	r2, [r3, #3]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007b20:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <low_level_init+0x158>)
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	791a      	ldrb	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <low_level_init+0x158>)
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	795a      	ldrb	r2, [r3, #5]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007b3e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b46:	f043 030a 	orr.w	r3, r3, #10
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007b52:	4814      	ldr	r0, [pc, #80]	; (8007ba4 <low_level_init+0x158>)
 8007b54:	f7fc fa9d 	bl	8004092 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8007b58:	f107 0310 	add.w	r3, r7, #16
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2111      	movs	r1, #17
 8007b60:	4810      	ldr	r0, [pc, #64]	; (8007ba4 <low_level_init+0x158>)
 8007b62:	f7fc f9c8 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f043 0303 	orr.w	r3, r3, #3
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	461a      	mov	r2, r3
 8007b72:	2111      	movs	r1, #17
 8007b74:	480b      	ldr	r0, [pc, #44]	; (8007ba4 <low_level_init+0x158>)
 8007b76:	f7fc fa26 	bl	8003fc6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8007b7a:	f107 0310 	add.w	r3, r7, #16
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2112      	movs	r1, #18
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <low_level_init+0x158>)
 8007b84:	f7fc f9b7 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f043 0320 	orr.w	r3, r3, #32
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	461a      	mov	r2, r3
 8007b94:	2112      	movs	r1, #18
 8007b96:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <low_level_init+0x158>)
 8007b98:	f7fc fa15 	bl	8003fc6 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007b9c:	bf00      	nop
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20002488 	.word	0x20002488
 8007ba8:	40028000 	.word	0x40028000
 8007bac:	200024d0 	.word	0x200024d0
 8007bb0:	20000bb8 	.word	0x20000bb8
 8007bb4:	20000c38 	.word	0x20000c38
 8007bb8:	20002408 	.word	0x20002408

08007bbc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007bc6:	4b4b      	ldr	r3, [pc, #300]	; (8007cf4 <low_level_output+0x138>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007bde:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <low_level_output+0x138>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	623b      	str	r3, [r7, #32]
 8007bec:	e05a      	b.n	8007ca4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da03      	bge.n	8007bfe <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007bf6:	23f8      	movs	r3, #248	; 0xf8
 8007bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007bfc:	e05c      	b.n	8007cb8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	895b      	ldrh	r3, [r3, #10]
 8007c02:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007c08:	e02f      	b.n	8007c6a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	18d0      	adds	r0, r2, r3
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	18d1      	adds	r1, r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007c1e:	3304      	adds	r3, #4
 8007c20:	461a      	mov	r2, r3
 8007c22:	f00a fe15 	bl	8012850 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da03      	bge.n	8007c3c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007c34:	23f8      	movs	r3, #248	; 0xf8
 8007c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007c3a:	e03d      	b.n	8007cb8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007c4c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c58:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c64:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d8c8      	bhi.n	8007c0a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	18d0      	adds	r0, r2, r3
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f00a fde1 	bl	8012850 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	623b      	str	r3, [r7, #32]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1a1      	bne.n	8007bee <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007caa:	6979      	ldr	r1, [r7, #20]
 8007cac:	4811      	ldr	r0, [pc, #68]	; (8007cf4 <low_level_output+0x138>)
 8007cae:	f7fb ff2f 	bl	8003b10 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <low_level_output+0x138>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00d      	beq.n	8007ce8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <low_level_output+0x138>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <low_level_output+0x138>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3728      	adds	r7, #40	; 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20002488 	.word	0x20002488

08007cf8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007d1c:	484f      	ldr	r0, [pc, #316]	; (8007e5c <low_level_input+0x164>)
 8007d1e:	f7fb ffe1 	bl	8003ce4 <HAL_ETH_GetReceivedFrame>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <low_level_input+0x34>

    return NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e092      	b.n	8007e52 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007d2c:	4b4b      	ldr	r3, [pc, #300]	; (8007e5c <low_level_input+0x164>)
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d30:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007d32:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <low_level_input+0x164>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007d38:	89fb      	ldrh	r3, [r7, #14]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007d3e:	89fb      	ldrh	r3, [r7, #14]
 8007d40:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007d44:	4619      	mov	r1, r3
 8007d46:	2000      	movs	r0, #0
 8007d48:	f001 f936 	bl	8008fb8 <pbuf_alloc>
 8007d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d04b      	beq.n	8007dec <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007d54:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <low_level_input+0x164>)
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d62:	e040      	b.n	8007de6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	895b      	ldrh	r3, [r3, #10]
 8007d68:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007d6e:	e021      	b.n	8007db4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	18d0      	adds	r0, r2, r3
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	18d1      	adds	r1, r2, r3
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007d84:	3304      	adds	r3, #4
 8007d86:	461a      	mov	r2, r3
 8007d88:	f00a fd62 	bl	8012850 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007da2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007dae:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d8d6      	bhi.n	8007d70 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	18d0      	adds	r0, r2, r3
 8007dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f00a fd3c 	bl	8012850 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1bb      	bne.n	8007d64 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <low_level_input+0x164>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	e00b      	b.n	8007e10 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <low_level_input+0x164>)
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d3ee      	bcc.n	8007df8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007e1a:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <low_level_input+0x164>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <low_level_input+0x164>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e28:	3314      	adds	r3, #20
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00d      	beq.n	8007e50 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <low_level_input+0x164>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	2280      	movs	r2, #128	; 0x80
 8007e40:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <low_level_input+0x164>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3730      	adds	r7, #48	; 0x30
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20002488 	.word	0x20002488

08007e60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ff45 	bl	8007cf8 <low_level_input>
 8007e6e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d010      	beq.n	8007e98 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	4798      	blx	r3
 8007e80:	4603      	mov	r3, r0
 8007e82:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007e84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d006      	beq.n	8007e9a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f001 fb77 	bl	8009580 <pbuf_free>
    p = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e000      	b.n	8007e9a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007e98:	bf00      	nop
  }
}
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <ethernetif_init+0x1c>
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <ethernetif_init+0x48>)
 8007eb0:	f240 2215 	movw	r2, #533	; 0x215
 8007eb4:	490d      	ldr	r1, [pc, #52]	; (8007eec <ethernetif_init+0x4c>)
 8007eb6:	480e      	ldr	r0, [pc, #56]	; (8007ef0 <ethernetif_init+0x50>)
 8007eb8:	f00a fce0 	bl	801287c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2273      	movs	r2, #115	; 0x73
 8007ec0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2274      	movs	r2, #116	; 0x74
 8007ec8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <ethernetif_init+0x54>)
 8007ed0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <ethernetif_init+0x58>)
 8007ed6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fdb7 	bl	8007a4c <low_level_init>

  return ERR_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08013a5c 	.word	0x08013a5c
 8007eec:	08013a78 	.word	0x08013a78
 8007ef0:	08013a88 	.word	0x08013a88
 8007ef4:	08010b05 	.word	0x08010b05
 8007ef8:	08007bbd 	.word	0x08007bbd

08007efc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f00:	f7f9 fd8a 	bl	8001a18 <HAL_GetTick>
 8007f04:	4603      	mov	r3, r0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f22:	089b      	lsrs	r3, r3, #2
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d05d      	beq.n	8007fea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007f2e:	4b34      	ldr	r3, [pc, #208]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d03f      	beq.n	8007fb6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4830      	ldr	r0, [pc, #192]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f3e:	f7fc f842 	bl	8003fc6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007f42:	f7f9 fd69 	bl	8001a18 <HAL_GetTick>
 8007f46:	4603      	mov	r3, r0
 8007f48:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2101      	movs	r1, #1
 8007f52:	482b      	ldr	r0, [pc, #172]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f54:	f7fb ffcf 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007f58:	f7f9 fd5e 	bl	8001a18 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f66:	d828      	bhi.n	8007fba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0eb      	beq.n	8007f4a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	461a      	mov	r2, r3
 8007f78:	2110      	movs	r1, #16
 8007f7a:	4821      	ldr	r0, [pc, #132]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f7c:	f7fb ffbb 	bl	8003ef6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	e002      	b.n	8007f9a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007f94:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <ethernetif_update_config+0xf4>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	e016      	b.n	8007fda <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007fac:	4b14      	ldr	r3, [pc, #80]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	e011      	b.n	8007fda <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <ethernetif_update_config+0xb0>
          goto error;
 8007fba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	08db      	lsrs	r3, r3, #3
 8007fc2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	480a      	ldr	r0, [pc, #40]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fd6:	f7fb fff6 	bl	8003fc6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4808      	ldr	r0, [pc, #32]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fde:	f7fc f8b7 	bl	8004150 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007fe2:	4807      	ldr	r0, [pc, #28]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fe4:	f7fc f855 	bl	8004092 <HAL_ETH_Start>
 8007fe8:	e002      	b.n	8007ff0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007fea:	4805      	ldr	r0, [pc, #20]	; (8008000 <ethernetif_update_config+0xf4>)
 8007fec:	f7fc f880 	bl	80040f0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f807 	bl	8008004 <ethernetif_notify_conn_changed>
}
 8007ff6:	bf00      	nop
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20002488 	.word	0x20002488

08008004 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b21a      	sxth	r2, r3
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	b29b      	uxth	r3, r3
 800802e:	b21b      	sxth	r3, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	b21b      	sxth	r3, r3
 8008034:	b29b      	uxth	r3, r3
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	061a      	lsls	r2, r3, #24
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0e1b      	lsrs	r3, r3, #24
 8008066:	4313      	orrs	r3, r2
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800807e:	f000 f8d5 	bl	800822c <mem_init>
  memp_init();
 8008082:	f000 fbdb 	bl	800883c <memp_init>
  pbuf_init();
  netif_init();
 8008086:	f000 fc93 	bl	80089b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800808a:	f007 ff35 	bl	800fef8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800808e:	f001 fd97 	bl	8009bc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008092:	f007 fea7 	bl	800fde4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <ptr_to_mem+0x20>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	4413      	add	r3, r2
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000860 	.word	0x20000860

080080c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <mem_to_ptr+0x20>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	b29b      	uxth	r3, r3
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000860 	.word	0x20000860

080080e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80080f0:	4b45      	ldr	r3, [pc, #276]	; (8008208 <plug_holes+0x120>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d206      	bcs.n	8008108 <plug_holes+0x20>
 80080fa:	4b44      	ldr	r3, [pc, #272]	; (800820c <plug_holes+0x124>)
 80080fc:	f240 12df 	movw	r2, #479	; 0x1df
 8008100:	4943      	ldr	r1, [pc, #268]	; (8008210 <plug_holes+0x128>)
 8008102:	4844      	ldr	r0, [pc, #272]	; (8008214 <plug_holes+0x12c>)
 8008104:	f00a fbba 	bl	801287c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008108:	4b43      	ldr	r3, [pc, #268]	; (8008218 <plug_holes+0x130>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d306      	bcc.n	8008120 <plug_holes+0x38>
 8008112:	4b3e      	ldr	r3, [pc, #248]	; (800820c <plug_holes+0x124>)
 8008114:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008118:	4940      	ldr	r1, [pc, #256]	; (800821c <plug_holes+0x134>)
 800811a:	483e      	ldr	r0, [pc, #248]	; (8008214 <plug_holes+0x12c>)
 800811c:	f00a fbae 	bl	801287c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	791b      	ldrb	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d006      	beq.n	8008136 <plug_holes+0x4e>
 8008128:	4b38      	ldr	r3, [pc, #224]	; (800820c <plug_holes+0x124>)
 800812a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800812e:	493c      	ldr	r1, [pc, #240]	; (8008220 <plug_holes+0x138>)
 8008130:	4838      	ldr	r0, [pc, #224]	; (8008214 <plug_holes+0x12c>)
 8008132:	f00a fba3 	bl	801287c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800813e:	d906      	bls.n	800814e <plug_holes+0x66>
 8008140:	4b32      	ldr	r3, [pc, #200]	; (800820c <plug_holes+0x124>)
 8008142:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008146:	4937      	ldr	r1, [pc, #220]	; (8008224 <plug_holes+0x13c>)
 8008148:	4832      	ldr	r0, [pc, #200]	; (8008214 <plug_holes+0x12c>)
 800814a:	f00a fb97 	bl	801287c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff ffa4 	bl	80080a0 <ptr_to_mem>
 8008158:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	429a      	cmp	r2, r3
 8008160:	d024      	beq.n	80081ac <plug_holes+0xc4>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <plug_holes+0xc4>
 800816a:	4b2b      	ldr	r3, [pc, #172]	; (8008218 <plug_holes+0x130>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	429a      	cmp	r2, r3
 8008172:	d01b      	beq.n	80081ac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008174:	4b2c      	ldr	r3, [pc, #176]	; (8008228 <plug_holes+0x140>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d102      	bne.n	8008184 <plug_holes+0x9c>
      lfree = mem;
 800817e:	4a2a      	ldr	r2, [pc, #168]	; (8008228 <plug_holes+0x140>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	881a      	ldrh	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008194:	d00a      	beq.n	80081ac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff ff80 	bl	80080a0 <ptr_to_mem>
 80081a0:	4604      	mov	r4, r0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff ff8e 	bl	80080c4 <mem_to_ptr>
 80081a8:	4603      	mov	r3, r0
 80081aa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ff75 	bl	80080a0 <ptr_to_mem>
 80081b6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d01f      	beq.n	8008200 <plug_holes+0x118>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11b      	bne.n	8008200 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <plug_holes+0x140>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d102      	bne.n	80081d8 <plug_holes+0xf0>
      lfree = pmem;
 80081d2:	4a15      	ldr	r2, [pc, #84]	; (8008228 <plug_holes+0x140>)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	881a      	ldrh	r2, [r3, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80081e8:	d00a      	beq.n	8008200 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff ff56 	bl	80080a0 <ptr_to_mem>
 80081f4:	4604      	mov	r4, r0
 80081f6:	68b8      	ldr	r0, [r7, #8]
 80081f8:	f7ff ff64 	bl	80080c4 <mem_to_ptr>
 80081fc:	4603      	mov	r3, r0
 80081fe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	bd90      	pop	{r4, r7, pc}
 8008208:	20000860 	.word	0x20000860
 800820c:	08013ab0 	.word	0x08013ab0
 8008210:	08013ae0 	.word	0x08013ae0
 8008214:	08013af8 	.word	0x08013af8
 8008218:	20000864 	.word	0x20000864
 800821c:	08013b20 	.word	0x08013b20
 8008220:	08013b3c 	.word	0x08013b3c
 8008224:	08013b58 	.word	0x08013b58
 8008228:	20000868 	.word	0x20000868

0800822c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008232:	4b18      	ldr	r3, [pc, #96]	; (8008294 <mem_init+0x68>)
 8008234:	3303      	adds	r3, #3
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	461a      	mov	r2, r3
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <mem_init+0x6c>)
 800823e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008240:	4b15      	ldr	r3, [pc, #84]	; (8008298 <mem_init+0x6c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800824c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800825a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800825e:	f7ff ff1f 	bl	80080a0 <ptr_to_mem>
 8008262:	4603      	mov	r3, r0
 8008264:	4a0d      	ldr	r2, [pc, #52]	; (800829c <mem_init+0x70>)
 8008266:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008268:	4b0c      	ldr	r3, [pc, #48]	; (800829c <mem_init+0x70>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <mem_init+0x70>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8008278:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <mem_init+0x70>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8008282:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <mem_init+0x6c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a05      	ldr	r2, [pc, #20]	; (80082a0 <mem_init+0x74>)
 800828a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20003cb8 	.word	0x20003cb8
 8008298:	20000860 	.word	0x20000860
 800829c:	20000864 	.word	0x20000864
 80082a0:	20000868 	.word	0x20000868

080082a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ff09 	bl	80080c4 <mem_to_ptr>
 80082b2:	4603      	mov	r3, r0
 80082b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fef0 	bl	80080a0 <ptr_to_mem>
 80082c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	885b      	ldrh	r3, [r3, #2]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff feea 	bl	80080a0 <ptr_to_mem>
 80082cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80082d6:	d818      	bhi.n	800830a <mem_link_valid+0x66>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80082e0:	d813      	bhi.n	800830a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80082e6:	8afa      	ldrh	r2, [r7, #22]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d004      	beq.n	80082f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	8afa      	ldrh	r2, [r7, #22]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d109      	bne.n	800830a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80082f6:	4b08      	ldr	r3, [pc, #32]	; (8008318 <mem_link_valid+0x74>)
 80082f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d006      	beq.n	800830e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	885b      	ldrh	r3, [r3, #2]
 8008304:	8afa      	ldrh	r2, [r7, #22]
 8008306:	429a      	cmp	r2, r3
 8008308:	d001      	beq.n	800830e <mem_link_valid+0x6a>
    return 0;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <mem_link_valid+0x6c>
  }
  return 1;
 800830e:	2301      	movs	r3, #1
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000864 	.word	0x20000864

0800831c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d04c      	beq.n	80083c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d007      	beq.n	8008344 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008334:	4b25      	ldr	r3, [pc, #148]	; (80083cc <mem_free+0xb0>)
 8008336:	f240 2273 	movw	r2, #627	; 0x273
 800833a:	4925      	ldr	r1, [pc, #148]	; (80083d0 <mem_free+0xb4>)
 800833c:	4825      	ldr	r0, [pc, #148]	; (80083d4 <mem_free+0xb8>)
 800833e:	f00a fa9d 	bl	801287c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008342:	e040      	b.n	80083c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3b08      	subs	r3, #8
 8008348:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800834a:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <mem_free+0xbc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	429a      	cmp	r2, r3
 8008352:	d306      	bcc.n	8008362 <mem_free+0x46>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 020c 	add.w	r2, r3, #12
 800835a:	4b20      	ldr	r3, [pc, #128]	; (80083dc <mem_free+0xc0>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d907      	bls.n	8008372 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <mem_free+0xb0>)
 8008364:	f240 227f 	movw	r2, #639	; 0x27f
 8008368:	491d      	ldr	r1, [pc, #116]	; (80083e0 <mem_free+0xc4>)
 800836a:	481a      	ldr	r0, [pc, #104]	; (80083d4 <mem_free+0xb8>)
 800836c:	f00a fa86 	bl	801287c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008370:	e029      	b.n	80083c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d107      	bne.n	800838a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <mem_free+0xb0>)
 800837c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008380:	4918      	ldr	r1, [pc, #96]	; (80083e4 <mem_free+0xc8>)
 8008382:	4814      	ldr	r0, [pc, #80]	; (80083d4 <mem_free+0xb8>)
 8008384:	f00a fa7a 	bl	801287c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008388:	e01d      	b.n	80083c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ff8a 	bl	80082a4 <mem_link_valid>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <mem_free+0xb0>)
 8008398:	f240 2295 	movw	r2, #661	; 0x295
 800839c:	4912      	ldr	r1, [pc, #72]	; (80083e8 <mem_free+0xcc>)
 800839e:	480d      	ldr	r0, [pc, #52]	; (80083d4 <mem_free+0xb8>)
 80083a0:	f00a fa6c 	bl	801287c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80083a4:	e00f      	b.n	80083c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <mem_free+0xd0>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d202      	bcs.n	80083bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80083b6:	4a0d      	ldr	r2, [pc, #52]	; (80083ec <mem_free+0xd0>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fe93 	bl	80080e8 <plug_holes>
 80083c2:	e000      	b.n	80083c6 <mem_free+0xaa>
    return;
 80083c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	08013ab0 	.word	0x08013ab0
 80083d0:	08013b84 	.word	0x08013b84
 80083d4:	08013af8 	.word	0x08013af8
 80083d8:	20000860 	.word	0x20000860
 80083dc:	20000864 	.word	0x20000864
 80083e0:	08013ba8 	.word	0x08013ba8
 80083e4:	08013bc4 	.word	0x08013bc4
 80083e8:	08013bec 	.word	0x08013bec
 80083ec:	20000868 	.word	0x20000868

080083f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80083fc:	887b      	ldrh	r3, [r7, #2]
 80083fe:	3303      	adds	r3, #3
 8008400:	b29b      	uxth	r3, r3
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008408:	8bfb      	ldrh	r3, [r7, #30]
 800840a:	2b0b      	cmp	r3, #11
 800840c:	d801      	bhi.n	8008412 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800840e:	230c      	movs	r3, #12
 8008410:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008412:	8bfb      	ldrh	r3, [r7, #30]
 8008414:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008418:	d803      	bhi.n	8008422 <mem_trim+0x32>
 800841a:	8bfa      	ldrh	r2, [r7, #30]
 800841c:	887b      	ldrh	r3, [r7, #2]
 800841e:	429a      	cmp	r2, r3
 8008420:	d201      	bcs.n	8008426 <mem_trim+0x36>
    return NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	e0cc      	b.n	80085c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008426:	4b68      	ldr	r3, [pc, #416]	; (80085c8 <mem_trim+0x1d8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d304      	bcc.n	800843a <mem_trim+0x4a>
 8008430:	4b66      	ldr	r3, [pc, #408]	; (80085cc <mem_trim+0x1dc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d306      	bcc.n	8008448 <mem_trim+0x58>
 800843a:	4b65      	ldr	r3, [pc, #404]	; (80085d0 <mem_trim+0x1e0>)
 800843c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008440:	4964      	ldr	r1, [pc, #400]	; (80085d4 <mem_trim+0x1e4>)
 8008442:	4865      	ldr	r0, [pc, #404]	; (80085d8 <mem_trim+0x1e8>)
 8008444:	f00a fa1a 	bl	801287c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008448:	4b5f      	ldr	r3, [pc, #380]	; (80085c8 <mem_trim+0x1d8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d304      	bcc.n	800845c <mem_trim+0x6c>
 8008452:	4b5e      	ldr	r3, [pc, #376]	; (80085cc <mem_trim+0x1dc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d301      	bcc.n	8008460 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	e0af      	b.n	80085c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b08      	subs	r3, #8
 8008464:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008466:	69b8      	ldr	r0, [r7, #24]
 8008468:	f7ff fe2c 	bl	80080c4 <mem_to_ptr>
 800846c:	4603      	mov	r3, r0
 800846e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	881a      	ldrh	r2, [r3, #0]
 8008474:	8afb      	ldrh	r3, [r7, #22]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	b29b      	uxth	r3, r3
 800847a:	3b08      	subs	r3, #8
 800847c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800847e:	8bfa      	ldrh	r2, [r7, #30]
 8008480:	8abb      	ldrh	r3, [r7, #20]
 8008482:	429a      	cmp	r2, r3
 8008484:	d906      	bls.n	8008494 <mem_trim+0xa4>
 8008486:	4b52      	ldr	r3, [pc, #328]	; (80085d0 <mem_trim+0x1e0>)
 8008488:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800848c:	4953      	ldr	r1, [pc, #332]	; (80085dc <mem_trim+0x1ec>)
 800848e:	4852      	ldr	r0, [pc, #328]	; (80085d8 <mem_trim+0x1e8>)
 8008490:	f00a f9f4 	bl	801287c <iprintf>
  if (newsize > size) {
 8008494:	8bfa      	ldrh	r2, [r7, #30]
 8008496:	8abb      	ldrh	r3, [r7, #20]
 8008498:	429a      	cmp	r2, r3
 800849a:	d901      	bls.n	80084a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	e08f      	b.n	80085c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80084a0:	8bfa      	ldrh	r2, [r7, #30]
 80084a2:	8abb      	ldrh	r3, [r7, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d101      	bne.n	80084ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	e089      	b.n	80085c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fdf5 	bl	80080a0 <ptr_to_mem>
 80084b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	791b      	ldrb	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d13f      	bne.n	8008540 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80084c8:	d106      	bne.n	80084d8 <mem_trim+0xe8>
 80084ca:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <mem_trim+0x1e0>)
 80084cc:	f240 22f5 	movw	r2, #757	; 0x2f5
 80084d0:	4943      	ldr	r1, [pc, #268]	; (80085e0 <mem_trim+0x1f0>)
 80084d2:	4841      	ldr	r0, [pc, #260]	; (80085d8 <mem_trim+0x1e8>)
 80084d4:	f00a f9d2 	bl	801287c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80084de:	8afa      	ldrh	r2, [r7, #22]
 80084e0:	8bfb      	ldrh	r3, [r7, #30]
 80084e2:	4413      	add	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3308      	adds	r3, #8
 80084e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80084ea:	4b3e      	ldr	r3, [pc, #248]	; (80085e4 <mem_trim+0x1f4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d106      	bne.n	8008502 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fdd2 	bl	80080a0 <ptr_to_mem>
 80084fc:	4603      	mov	r3, r0
 80084fe:	4a39      	ldr	r2, [pc, #228]	; (80085e4 <mem_trim+0x1f4>)
 8008500:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008502:	89fb      	ldrh	r3, [r7, #14]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fdcb 	bl	80080a0 <ptr_to_mem>
 800850a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2200      	movs	r2, #0
 8008510:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	89ba      	ldrh	r2, [r7, #12]
 8008516:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	8afa      	ldrh	r2, [r7, #22]
 800851c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	89fa      	ldrh	r2, [r7, #14]
 8008522:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800852c:	d047      	beq.n	80085be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff fdb4 	bl	80080a0 <ptr_to_mem>
 8008538:	4602      	mov	r2, r0
 800853a:	89fb      	ldrh	r3, [r7, #14]
 800853c:	8053      	strh	r3, [r2, #2]
 800853e:	e03e      	b.n	80085be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008540:	8bfb      	ldrh	r3, [r7, #30]
 8008542:	f103 0214 	add.w	r2, r3, #20
 8008546:	8abb      	ldrh	r3, [r7, #20]
 8008548:	429a      	cmp	r2, r3
 800854a:	d838      	bhi.n	80085be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800854c:	8afa      	ldrh	r2, [r7, #22]
 800854e:	8bfb      	ldrh	r3, [r7, #30]
 8008550:	4413      	add	r3, r2
 8008552:	b29b      	uxth	r3, r3
 8008554:	3308      	adds	r3, #8
 8008556:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008560:	d106      	bne.n	8008570 <mem_trim+0x180>
 8008562:	4b1b      	ldr	r3, [pc, #108]	; (80085d0 <mem_trim+0x1e0>)
 8008564:	f240 3216 	movw	r2, #790	; 0x316
 8008568:	491d      	ldr	r1, [pc, #116]	; (80085e0 <mem_trim+0x1f0>)
 800856a:	481b      	ldr	r0, [pc, #108]	; (80085d8 <mem_trim+0x1e8>)
 800856c:	f00a f986 	bl	801287c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008570:	89fb      	ldrh	r3, [r7, #14]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fd94 	bl	80080a0 <ptr_to_mem>
 8008578:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <mem_trim+0x1f4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	429a      	cmp	r2, r3
 8008582:	d202      	bcs.n	800858a <mem_trim+0x19a>
      lfree = mem2;
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <mem_trim+0x1f4>)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2200      	movs	r2, #0
 800858e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	8afa      	ldrh	r2, [r7, #22]
 800859c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	89fa      	ldrh	r2, [r7, #14]
 80085a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80085ac:	d007      	beq.n	80085be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fd74 	bl	80080a0 <ptr_to_mem>
 80085b8:	4602      	mov	r2, r0
 80085ba:	89fb      	ldrh	r3, [r7, #14]
 80085bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80085be:	687b      	ldr	r3, [r7, #4]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000860 	.word	0x20000860
 80085cc:	20000864 	.word	0x20000864
 80085d0:	08013ab0 	.word	0x08013ab0
 80085d4:	08013c20 	.word	0x08013c20
 80085d8:	08013af8 	.word	0x08013af8
 80085dc:	08013c38 	.word	0x08013c38
 80085e0:	08013c58 	.word	0x08013c58
 80085e4:	20000868 	.word	0x20000868

080085e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <mem_malloc+0x14>
    return NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e0d9      	b.n	80087b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	3303      	adds	r3, #3
 8008600:	b29b      	uxth	r3, r3
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008608:	8bbb      	ldrh	r3, [r7, #28]
 800860a:	2b0b      	cmp	r3, #11
 800860c:	d801      	bhi.n	8008612 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800860e:	230c      	movs	r3, #12
 8008610:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008612:	8bbb      	ldrh	r3, [r7, #28]
 8008614:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008618:	d803      	bhi.n	8008622 <mem_malloc+0x3a>
 800861a:	8bba      	ldrh	r2, [r7, #28]
 800861c:	88fb      	ldrh	r3, [r7, #6]
 800861e:	429a      	cmp	r2, r3
 8008620:	d201      	bcs.n	8008626 <mem_malloc+0x3e>
    return NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	e0c4      	b.n	80087b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008626:	4b64      	ldr	r3, [pc, #400]	; (80087b8 <mem_malloc+0x1d0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fd4a 	bl	80080c4 <mem_to_ptr>
 8008630:	4603      	mov	r3, r0
 8008632:	83fb      	strh	r3, [r7, #30]
 8008634:	e0b4      	b.n	80087a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008636:	8bfb      	ldrh	r3, [r7, #30]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fd31 	bl	80080a0 <ptr_to_mem>
 800863e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	791b      	ldrb	r3, [r3, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 80a4 	bne.w	8008792 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	8bfb      	ldrh	r3, [r7, #30]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f1a3 0208 	sub.w	r2, r3, #8
 8008658:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800865a:	429a      	cmp	r2, r3
 800865c:	f0c0 8099 	bcc.w	8008792 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	8bfb      	ldrh	r3, [r7, #30]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f1a3 0208 	sub.w	r2, r3, #8
 800866e:	8bbb      	ldrh	r3, [r7, #28]
 8008670:	3314      	adds	r3, #20
 8008672:	429a      	cmp	r2, r3
 8008674:	d333      	bcc.n	80086de <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008676:	8bfa      	ldrh	r2, [r7, #30]
 8008678:	8bbb      	ldrh	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	3308      	adds	r3, #8
 8008680:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008682:	8a7b      	ldrh	r3, [r7, #18]
 8008684:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008688:	d106      	bne.n	8008698 <mem_malloc+0xb0>
 800868a:	4b4c      	ldr	r3, [pc, #304]	; (80087bc <mem_malloc+0x1d4>)
 800868c:	f240 3287 	movw	r2, #903	; 0x387
 8008690:	494b      	ldr	r1, [pc, #300]	; (80087c0 <mem_malloc+0x1d8>)
 8008692:	484c      	ldr	r0, [pc, #304]	; (80087c4 <mem_malloc+0x1dc>)
 8008694:	f00a f8f2 	bl	801287c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008698:	8a7b      	ldrh	r3, [r7, #18]
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fd00 	bl	80080a0 <ptr_to_mem>
 80086a0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	881a      	ldrh	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8bfa      	ldrh	r2, [r7, #30]
 80086b4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	8a7a      	ldrh	r2, [r7, #18]
 80086ba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2201      	movs	r2, #1
 80086c0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80086ca:	d00b      	beq.n	80086e4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff fce5 	bl	80080a0 <ptr_to_mem>
 80086d6:	4602      	mov	r2, r0
 80086d8:	8a7b      	ldrh	r3, [r7, #18]
 80086da:	8053      	strh	r3, [r2, #2]
 80086dc:	e002      	b.n	80086e4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2201      	movs	r2, #1
 80086e2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80086e4:	4b34      	ldr	r3, [pc, #208]	; (80087b8 <mem_malloc+0x1d0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d127      	bne.n	800873e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80086ee:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <mem_malloc+0x1d0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80086f4:	e005      	b.n	8008702 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fcd0 	bl	80080a0 <ptr_to_mem>
 8008700:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	791b      	ldrb	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <mem_malloc+0x12c>
 800870a:	4b2f      	ldr	r3, [pc, #188]	; (80087c8 <mem_malloc+0x1e0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	429a      	cmp	r2, r3
 8008712:	d1f0      	bne.n	80086f6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <mem_malloc+0x1d0>)
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800871a:	4b27      	ldr	r3, [pc, #156]	; (80087b8 <mem_malloc+0x1d0>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <mem_malloc+0x1e0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d00b      	beq.n	800873e <mem_malloc+0x156>
 8008726:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <mem_malloc+0x1d0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	791b      	ldrb	r3, [r3, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <mem_malloc+0x156>
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <mem_malloc+0x1d4>)
 8008732:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008736:	4925      	ldr	r1, [pc, #148]	; (80087cc <mem_malloc+0x1e4>)
 8008738:	4822      	ldr	r0, [pc, #136]	; (80087c4 <mem_malloc+0x1dc>)
 800873a:	f00a f89f 	bl	801287c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800873e:	8bba      	ldrh	r2, [r7, #28]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	4413      	add	r3, r2
 8008744:	3308      	adds	r3, #8
 8008746:	4a20      	ldr	r2, [pc, #128]	; (80087c8 <mem_malloc+0x1e0>)
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	4293      	cmp	r3, r2
 800874c:	d906      	bls.n	800875c <mem_malloc+0x174>
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <mem_malloc+0x1d4>)
 8008750:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008754:	491e      	ldr	r1, [pc, #120]	; (80087d0 <mem_malloc+0x1e8>)
 8008756:	481b      	ldr	r0, [pc, #108]	; (80087c4 <mem_malloc+0x1dc>)
 8008758:	f00a f890 	bl	801287c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d006      	beq.n	8008774 <mem_malloc+0x18c>
 8008766:	4b15      	ldr	r3, [pc, #84]	; (80087bc <mem_malloc+0x1d4>)
 8008768:	f240 32bb 	movw	r2, #955	; 0x3bb
 800876c:	4919      	ldr	r1, [pc, #100]	; (80087d4 <mem_malloc+0x1ec>)
 800876e:	4815      	ldr	r0, [pc, #84]	; (80087c4 <mem_malloc+0x1dc>)
 8008770:	f00a f884 	bl	801287c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d006      	beq.n	800878c <mem_malloc+0x1a4>
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <mem_malloc+0x1d4>)
 8008780:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008784:	4914      	ldr	r1, [pc, #80]	; (80087d8 <mem_malloc+0x1f0>)
 8008786:	480f      	ldr	r0, [pc, #60]	; (80087c4 <mem_malloc+0x1dc>)
 8008788:	f00a f878 	bl	801287c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	3308      	adds	r3, #8
 8008790:	e00e      	b.n	80087b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008792:	8bfb      	ldrh	r3, [r7, #30]
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fc83 	bl	80080a0 <ptr_to_mem>
 800879a:	4603      	mov	r3, r0
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80087a0:	8bfa      	ldrh	r2, [r7, #30]
 80087a2:	8bbb      	ldrh	r3, [r7, #28]
 80087a4:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 80087a8:	429a      	cmp	r2, r3
 80087aa:	f4ff af44 	bcc.w	8008636 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000868 	.word	0x20000868
 80087bc:	08013ab0 	.word	0x08013ab0
 80087c0:	08013c58 	.word	0x08013c58
 80087c4:	08013af8 	.word	0x08013af8
 80087c8:	20000864 	.word	0x20000864
 80087cc:	08013c6c 	.word	0x08013c6c
 80087d0:	08013c88 	.word	0x08013c88
 80087d4:	08013cb8 	.word	0x08013cb8
 80087d8:	08013ce8 	.word	0x08013ce8

080087dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	3303      	adds	r3, #3
 80087f2:	f023 0303 	bic.w	r3, r3, #3
 80087f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e011      	b.n	8008822 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	461a      	mov	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4293      	cmp	r3, r2
 800882c:	dbe7      	blt.n	80087fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008842:	2300      	movs	r3, #0
 8008844:	80fb      	strh	r3, [r7, #6]
 8008846:	e009      	b.n	800885c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	4a08      	ldr	r2, [pc, #32]	; (800886c <memp_init+0x30>)
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff ffc3 	bl	80087dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	3301      	adds	r3, #1
 800885a:	80fb      	strh	r3, [r7, #6]
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	2b08      	cmp	r3, #8
 8008860:	d9f2      	bls.n	8008848 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	080164c8 	.word	0x080164c8

08008870 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d012      	beq.n	80088ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d006      	beq.n	80088a8 <do_memp_malloc_pool+0x38>
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <do_memp_malloc_pool+0x48>)
 800889c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80088a0:	4906      	ldr	r1, [pc, #24]	; (80088bc <do_memp_malloc_pool+0x4c>)
 80088a2:	4807      	ldr	r0, [pc, #28]	; (80088c0 <do_memp_malloc_pool+0x50>)
 80088a4:	f009 ffea 	bl	801287c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	e000      	b.n	80088ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	08013d0c 	.word	0x08013d0c
 80088bc:	08013d3c 	.word	0x08013d3c
 80088c0:	08013d60 	.word	0x08013d60

080088c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d908      	bls.n	80088e6 <memp_malloc+0x22>
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <memp_malloc+0x3c>)
 80088d6:	f240 1257 	movw	r2, #343	; 0x157
 80088da:	490a      	ldr	r1, [pc, #40]	; (8008904 <memp_malloc+0x40>)
 80088dc:	480a      	ldr	r0, [pc, #40]	; (8008908 <memp_malloc+0x44>)
 80088de:	f009 ffcd 	bl	801287c <iprintf>
 80088e2:	2300      	movs	r3, #0
 80088e4:	e008      	b.n	80088f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	4a08      	ldr	r2, [pc, #32]	; (800890c <memp_malloc+0x48>)
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff ffbe 	bl	8008870 <do_memp_malloc_pool>
 80088f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80088f6:	68fb      	ldr	r3, [r7, #12]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	08013d0c 	.word	0x08013d0c
 8008904:	08013d9c 	.word	0x08013d9c
 8008908:	08013d60 	.word	0x08013d60
 800890c:	080164c8 	.word	0x080164c8

08008910 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <do_memp_free_pool+0x22>
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <do_memp_free_pool+0x40>)
 8008926:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800892a:	490a      	ldr	r1, [pc, #40]	; (8008954 <do_memp_free_pool+0x44>)
 800892c:	480a      	ldr	r0, [pc, #40]	; (8008958 <do_memp_free_pool+0x48>)
 800892e:	f009 ffa5 	bl	801287c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	08013d0c 	.word	0x08013d0c
 8008954:	08013dbc 	.word	0x08013dbc
 8008958:	08013d60 	.word	0x08013d60

0800895c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b08      	cmp	r3, #8
 800896c:	d907      	bls.n	800897e <memp_free+0x22>
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <memp_free+0x44>)
 8008970:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008974:	490b      	ldr	r1, [pc, #44]	; (80089a4 <memp_free+0x48>)
 8008976:	480c      	ldr	r0, [pc, #48]	; (80089a8 <memp_free+0x4c>)
 8008978:	f009 ff80 	bl	801287c <iprintf>
 800897c:	e00c      	b.n	8008998 <memp_free+0x3c>

  if (mem == NULL) {
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d008      	beq.n	8008996 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <memp_free+0x50>)
 8008988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ffbe 	bl	8008910 <do_memp_free_pool>
 8008994:	e000      	b.n	8008998 <memp_free+0x3c>
    return;
 8008996:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	08013d0c 	.word	0x08013d0c
 80089a4:	08013ddc 	.word	0x08013ddc
 80089a8:	08013d60 	.word	0x08013d60
 80089ac:	080164c8 	.word	0x080164c8

080089b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <netif_add+0x26>
 80089d4:	4b57      	ldr	r3, [pc, #348]	; (8008b34 <netif_add+0x174>)
 80089d6:	f240 1227 	movw	r2, #295	; 0x127
 80089da:	4957      	ldr	r1, [pc, #348]	; (8008b38 <netif_add+0x178>)
 80089dc:	4857      	ldr	r0, [pc, #348]	; (8008b3c <netif_add+0x17c>)
 80089de:	f009 ff4d 	bl	801287c <iprintf>
 80089e2:	2300      	movs	r3, #0
 80089e4:	e0a2      	b.n	8008b2c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <netif_add+0x3e>
 80089ec:	4b51      	ldr	r3, [pc, #324]	; (8008b34 <netif_add+0x174>)
 80089ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80089f2:	4953      	ldr	r1, [pc, #332]	; (8008b40 <netif_add+0x180>)
 80089f4:	4851      	ldr	r0, [pc, #324]	; (8008b3c <netif_add+0x17c>)
 80089f6:	f009 ff41 	bl	801287c <iprintf>
 80089fa:	2300      	movs	r3, #0
 80089fc:	e096      	b.n	8008b2c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008a04:	4b4f      	ldr	r3, [pc, #316]	; (8008b44 <netif_add+0x184>)
 8008a06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008a0e:	4b4d      	ldr	r3, [pc, #308]	; (8008b44 <netif_add+0x184>)
 8008a10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008a18:	4b4a      	ldr	r3, [pc, #296]	; (8008b44 <netif_add+0x184>)
 8008a1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4a45      	ldr	r2, [pc, #276]	; (8008b48 <netif_add+0x188>)
 8008a32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008a4e:	4b3f      	ldr	r3, [pc, #252]	; (8008b4c <netif_add+0x18c>)
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f913 	bl	8008c90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	4798      	blx	r3
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <netif_add+0xba>
    return NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e058      	b.n	8008b2c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a80:	2bff      	cmp	r3, #255	; 0xff
 8008a82:	d103      	bne.n	8008a8c <netif_add+0xcc>
        netif->num = 0;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a90:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <netif_add+0x190>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e02b      	b.n	8008af0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d106      	bne.n	8008aae <netif_add+0xee>
 8008aa0:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <netif_add+0x174>)
 8008aa2:	f240 128b 	movw	r2, #395	; 0x18b
 8008aa6:	492b      	ldr	r1, [pc, #172]	; (8008b54 <netif_add+0x194>)
 8008aa8:	4824      	ldr	r0, [pc, #144]	; (8008b3c <netif_add+0x17c>)
 8008aaa:	f009 fee7 	bl	801287c <iprintf>
        num_netifs++;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2bff      	cmp	r3, #255	; 0xff
 8008ab8:	dd06      	ble.n	8008ac8 <netif_add+0x108>
 8008aba:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <netif_add+0x174>)
 8008abc:	f240 128d 	movw	r2, #397	; 0x18d
 8008ac0:	4925      	ldr	r1, [pc, #148]	; (8008b58 <netif_add+0x198>)
 8008ac2:	481e      	ldr	r0, [pc, #120]	; (8008b3c <netif_add+0x17c>)
 8008ac4:	f009 feda 	bl	801287c <iprintf>
        if (netif2->num == netif->num) {
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d108      	bne.n	8008aea <netif_add+0x12a>
          netif->num++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ade:	3301      	adds	r3, #1
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008ae8:	e005      	b.n	8008af6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1d0      	bne.n	8008a98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1be      	bne.n	8008a7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b02:	2bfe      	cmp	r3, #254	; 0xfe
 8008b04:	d103      	bne.n	8008b0e <netif_add+0x14e>
    netif_num = 0;
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <netif_add+0x18c>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e006      	b.n	8008b1c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b14:	3301      	adds	r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <netif_add+0x18c>)
 8008b1a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008b1c:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <netif_add+0x190>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008b24:	4a0a      	ldr	r2, [pc, #40]	; (8008b50 <netif_add+0x190>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08013df8 	.word	0x08013df8
 8008b38:	08013e8c 	.word	0x08013e8c
 8008b3c:	08013e48 	.word	0x08013e48
 8008b40:	08013ea8 	.word	0x08013ea8
 8008b44:	0801652c 	.word	0x0801652c
 8008b48:	08008ea3 	.word	0x08008ea3
 8008b4c:	20000890 	.word	0x20000890
 8008b50:	20011634 	.word	0x20011634
 8008b54:	08013ecc 	.word	0x08013ecc
 8008b58:	08013ee0 	.word	0x08013ee0

08008b5c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f002 fe11 	bl	800b790 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f007 fb4b 	bl	801020c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <netif_do_set_ipaddr+0x20>
 8008b92:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <netif_do_set_ipaddr+0x88>)
 8008b94:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008b98:	491c      	ldr	r1, [pc, #112]	; (8008c0c <netif_do_set_ipaddr+0x8c>)
 8008b9a:	481d      	ldr	r0, [pc, #116]	; (8008c10 <netif_do_set_ipaddr+0x90>)
 8008b9c:	f009 fe6e 	bl	801287c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <netif_do_set_ipaddr+0x34>
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <netif_do_set_ipaddr+0x88>)
 8008ba8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008bac:	4917      	ldr	r1, [pc, #92]	; (8008c0c <netif_do_set_ipaddr+0x8c>)
 8008bae:	4818      	ldr	r0, [pc, #96]	; (8008c10 <netif_do_set_ipaddr+0x90>)
 8008bb0:	f009 fe64 	bl	801287c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d01c      	beq.n	8008bfc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008bd2:	f107 0314 	add.w	r3, r7, #20
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ffbf 	bl	8008b5c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <netif_do_set_ipaddr+0x6a>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	e000      	b.n	8008bec <netif_do_set_ipaddr+0x6c>
 8008bea:	2300      	movs	r3, #0
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f8d2 	bl	8008d9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	08013df8 	.word	0x08013df8
 8008c0c:	08013f10 	.word	0x08013f10
 8008c10:	08013e48 	.word	0x08013e48

08008c14 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3308      	adds	r3, #8
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d00a      	beq.n	8008c44 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <netif_do_set_netmask+0x26>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	e000      	b.n	8008c3c <netif_do_set_netmask+0x28>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	330c      	adds	r3, #12
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d00a      	beq.n	8008c82 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <netif_do_set_gw+0x26>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	e000      	b.n	8008c7a <netif_do_set_gw+0x28>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	; (8008d20 <netif_set_addr+0x90>)
 8008cae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <netif_set_addr+0x90>)
 8008cb8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008cc0:	4b17      	ldr	r3, [pc, #92]	; (8008d20 <netif_set_addr+0x90>)
 8008cc2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <netif_set_addr+0x42>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <netif_set_addr+0x46>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <netif_set_addr+0x48>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff49 	bl	8008b80 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff ff8e 	bl	8008c14 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff ffa8 	bl	8008c52 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d106      	bne.n	8008d16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff ff35 	bl	8008b80 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008d16:	bf00      	nop
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	0801652c 	.word	0x0801652c

08008d24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <netif_set_default+0x1c>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20011638 	.word	0x20011638

08008d44 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d107      	bne.n	8008d62 <netif_set_up+0x1e>
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <netif_set_up+0x4c>)
 8008d54:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008d58:	490e      	ldr	r1, [pc, #56]	; (8008d94 <netif_set_up+0x50>)
 8008d5a:	480f      	ldr	r0, [pc, #60]	; (8008d98 <netif_set_up+0x54>)
 8008d5c:	f009 fd8e 	bl	801287c <iprintf>
 8008d60:	e013      	b.n	8008d8a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10c      	bne.n	8008d8a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008d82:	2103      	movs	r1, #3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f809 	bl	8008d9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08013df8 	.word	0x08013df8
 8008d94:	08013f80 	.word	0x08013f80
 8008d98:	08013e48 	.word	0x08013e48

08008d9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <netif_issue_reports+0x20>
 8008dae:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <netif_issue_reports+0x74>)
 8008db0:	f240 326d 	movw	r2, #877	; 0x36d
 8008db4:	4917      	ldr	r1, [pc, #92]	; (8008e14 <netif_issue_reports+0x78>)
 8008db6:	4818      	ldr	r0, [pc, #96]	; (8008e18 <netif_issue_reports+0x7c>)
 8008db8:	f009 fd60 	bl	801287c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01e      	beq.n	8008e08 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008dd0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d017      	beq.n	8008e08 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d013      	beq.n	8008e0a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3304      	adds	r3, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f008 f96d 	bl	80110e0 <etharp_request>
 8008e06:	e000      	b.n	8008e0a <netif_issue_reports+0x6e>
    return;
 8008e08:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	08013df8 	.word	0x08013df8
 8008e14:	08013f9c 	.word	0x08013f9c
 8008e18:	08013e48 	.word	0x08013e48

08008e1c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d107      	bne.n	8008e3a <netif_set_down+0x1e>
 8008e2a:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <netif_set_down+0x58>)
 8008e2c:	f240 329b 	movw	r2, #923	; 0x39b
 8008e30:	4911      	ldr	r1, [pc, #68]	; (8008e78 <netif_set_down+0x5c>)
 8008e32:	4812      	ldr	r0, [pc, #72]	; (8008e7c <netif_set_down+0x60>)
 8008e34:	f009 fd22 	bl	801287c <iprintf>
 8008e38:	e019      	b.n	8008e6e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f007 fcf7 	bl	801085c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	08013df8 	.word	0x08013df8
 8008e78:	08013fc0 	.word	0x08013fc0
 8008e7c:	08013e48 	.word	0x08013e48

08008e80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	61da      	str	r2, [r3, #28]
  }
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008eae:	f06f 030b 	mvn.w	r3, #11
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d013      	beq.n	8008ef8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008ed0:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <netif_get_by_index+0x48>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	e00c      	b.n	8008ef2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	79fa      	ldrb	r2, [r7, #7]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d101      	bne.n	8008eec <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	e006      	b.n	8008efa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1ef      	bne.n	8008ed8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20011634 	.word	0x20011634

08008f0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <pbuf_free_ooseq+0x38>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <pbuf_free_ooseq+0x3c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	e00a      	b.n	8008f36 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 fc6f 	bl	800b80c <tcp_free_ooseq>
      return;
 8008f2e:	e005      	b.n	8008f3c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f1      	bne.n	8008f20 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	2001163c 	.word	0x2001163c
 8008f48:	20011644 	.word	0x20011644

08008f4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008f50:	4b03      	ldr	r3, [pc, #12]	; (8008f60 <pbuf_pool_is_empty+0x14>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008f56:	bf00      	nop
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	2001163c 	.word	0x2001163c

08008f64 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	461a      	mov	r2, r3
 8008f72:	460b      	mov	r3, r1
 8008f74:	80fb      	strh	r3, [r7, #6]
 8008f76:	4613      	mov	r3, r2
 8008f78:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	88fa      	ldrh	r2, [r7, #6]
 8008f8a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88ba      	ldrh	r2, [r7, #4]
 8008f90:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008f92:	8b3b      	ldrh	r3, [r7, #24]
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	7f3a      	ldrb	r2, [r7, #28]
 8008f9e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	73da      	strb	r2, [r3, #15]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08c      	sub	sp, #48	; 0x30
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	80bb      	strh	r3, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008fce:	887b      	ldrh	r3, [r7, #2]
 8008fd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008fd4:	d07f      	beq.n	80090d6 <pbuf_alloc+0x11e>
 8008fd6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008fda:	f300 80c8 	bgt.w	800916e <pbuf_alloc+0x1b6>
 8008fde:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008fe2:	d010      	beq.n	8009006 <pbuf_alloc+0x4e>
 8008fe4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008fe8:	f300 80c1 	bgt.w	800916e <pbuf_alloc+0x1b6>
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d002      	beq.n	8008ff6 <pbuf_alloc+0x3e>
 8008ff0:	2b41      	cmp	r3, #65	; 0x41
 8008ff2:	f040 80bc 	bne.w	800916e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008ff6:	887a      	ldrh	r2, [r7, #2]
 8008ff8:	88bb      	ldrh	r3, [r7, #4]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f000 f8d1 	bl	80091a4 <pbuf_alloc_reference>
 8009002:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009004:	e0bd      	b.n	8009182 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800900e:	88bb      	ldrh	r3, [r7, #4]
 8009010:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009012:	2008      	movs	r0, #8
 8009014:	f7ff fc56 	bl	80088c4 <memp_malloc>
 8009018:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009020:	f7ff ff94 	bl	8008f4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <pbuf_alloc+0x78>
            pbuf_free(p);
 800902a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800902c:	f000 faa8 	bl	8009580 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	e0a7      	b.n	8009184 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009036:	3303      	adds	r3, #3
 8009038:	b29b      	uxth	r3, r3
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	b29b      	uxth	r3, r3
 8009040:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8009044:	b29b      	uxth	r3, r3
 8009046:	8b7a      	ldrh	r2, [r7, #26]
 8009048:	4293      	cmp	r3, r2
 800904a:	bf28      	it	cs
 800904c:	4613      	movcs	r3, r2
 800904e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009052:	3310      	adds	r3, #16
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	3303      	adds	r3, #3
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	4618      	mov	r0, r3
 8009060:	89f9      	ldrh	r1, [r7, #14]
 8009062:	8b7a      	ldrh	r2, [r7, #26]
 8009064:	2300      	movs	r3, #0
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	887b      	ldrh	r3, [r7, #2]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	460b      	mov	r3, r1
 800906e:	4601      	mov	r1, r0
 8009070:	6938      	ldr	r0, [r7, #16]
 8009072:	f7ff ff77 	bl	8008f64 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <pbuf_alloc+0xd8>
 8009082:	4b42      	ldr	r3, [pc, #264]	; (800918c <pbuf_alloc+0x1d4>)
 8009084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009088:	4941      	ldr	r1, [pc, #260]	; (8009190 <pbuf_alloc+0x1d8>)
 800908a:	4842      	ldr	r0, [pc, #264]	; (8009194 <pbuf_alloc+0x1dc>)
 800908c:	f009 fbf6 	bl	801287c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009092:	3303      	adds	r3, #3
 8009094:	f023 0303 	bic.w	r3, r3, #3
 8009098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800909c:	d106      	bne.n	80090ac <pbuf_alloc+0xf4>
 800909e:	4b3b      	ldr	r3, [pc, #236]	; (800918c <pbuf_alloc+0x1d4>)
 80090a0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80090a4:	493c      	ldr	r1, [pc, #240]	; (8009198 <pbuf_alloc+0x1e0>)
 80090a6:	483b      	ldr	r0, [pc, #236]	; (8009194 <pbuf_alloc+0x1dc>)
 80090a8:	f009 fbe8 	bl	801287c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
 80090b6:	e002      	b.n	80090be <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80090c2:	8b7a      	ldrh	r2, [r7, #26]
 80090c4:	89fb      	ldrh	r3, [r7, #14]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80090ce:	8b7b      	ldrh	r3, [r7, #26]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d19e      	bne.n	8009012 <pbuf_alloc+0x5a>
      break;
 80090d4:	e055      	b.n	8009182 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80090d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090d8:	3303      	adds	r3, #3
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	88bb      	ldrh	r3, [r7, #4]
 80090e4:	3303      	adds	r3, #3
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80090f2:	8b3b      	ldrh	r3, [r7, #24]
 80090f4:	3310      	adds	r3, #16
 80090f6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80090f8:	8b3a      	ldrh	r2, [r7, #24]
 80090fa:	88bb      	ldrh	r3, [r7, #4]
 80090fc:	3303      	adds	r3, #3
 80090fe:	f023 0303 	bic.w	r3, r3, #3
 8009102:	429a      	cmp	r2, r3
 8009104:	d306      	bcc.n	8009114 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009106:	8afa      	ldrh	r2, [r7, #22]
 8009108:	88bb      	ldrh	r3, [r7, #4]
 800910a:	3303      	adds	r3, #3
 800910c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009110:	429a      	cmp	r2, r3
 8009112:	d201      	bcs.n	8009118 <pbuf_alloc+0x160>
        return NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	e035      	b.n	8009184 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009118:	8afb      	ldrh	r3, [r7, #22]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fa64 	bl	80085e8 <mem_malloc>
 8009120:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <pbuf_alloc+0x174>
        return NULL;
 8009128:	2300      	movs	r3, #0
 800912a:	e02b      	b.n	8009184 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800912c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800912e:	3310      	adds	r3, #16
 8009130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009132:	4413      	add	r3, r2
 8009134:	3303      	adds	r3, #3
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	4618      	mov	r0, r3
 800913c:	88b9      	ldrh	r1, [r7, #4]
 800913e:	88ba      	ldrh	r2, [r7, #4]
 8009140:	2300      	movs	r3, #0
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	887b      	ldrh	r3, [r7, #2]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	460b      	mov	r3, r1
 800914a:	4601      	mov	r1, r0
 800914c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800914e:	f7ff ff09 	bl	8008f64 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d010      	beq.n	8009180 <pbuf_alloc+0x1c8>
 800915e:	4b0b      	ldr	r3, [pc, #44]	; (800918c <pbuf_alloc+0x1d4>)
 8009160:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009164:	490d      	ldr	r1, [pc, #52]	; (800919c <pbuf_alloc+0x1e4>)
 8009166:	480b      	ldr	r0, [pc, #44]	; (8009194 <pbuf_alloc+0x1dc>)
 8009168:	f009 fb88 	bl	801287c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800916c:	e008      	b.n	8009180 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <pbuf_alloc+0x1d4>)
 8009170:	f240 1227 	movw	r2, #295	; 0x127
 8009174:	490a      	ldr	r1, [pc, #40]	; (80091a0 <pbuf_alloc+0x1e8>)
 8009176:	4807      	ldr	r0, [pc, #28]	; (8009194 <pbuf_alloc+0x1dc>)
 8009178:	f009 fb80 	bl	801287c <iprintf>
      return NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	e001      	b.n	8009184 <pbuf_alloc+0x1cc>
      break;
 8009180:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009184:	4618      	mov	r0, r3
 8009186:	3728      	adds	r7, #40	; 0x28
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	08014028 	.word	0x08014028
 8009190:	08014058 	.word	0x08014058
 8009194:	08014088 	.word	0x08014088
 8009198:	080140b0 	.word	0x080140b0
 800919c:	080140e4 	.word	0x080140e4
 80091a0:	08014110 	.word	0x08014110

080091a4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	807b      	strh	r3, [r7, #2]
 80091b0:	4613      	mov	r3, r2
 80091b2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80091b4:	883b      	ldrh	r3, [r7, #0]
 80091b6:	2b41      	cmp	r3, #65	; 0x41
 80091b8:	d009      	beq.n	80091ce <pbuf_alloc_reference+0x2a>
 80091ba:	883b      	ldrh	r3, [r7, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d006      	beq.n	80091ce <pbuf_alloc_reference+0x2a>
 80091c0:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <pbuf_alloc_reference+0x5c>)
 80091c2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80091c6:	490f      	ldr	r1, [pc, #60]	; (8009204 <pbuf_alloc_reference+0x60>)
 80091c8:	480f      	ldr	r0, [pc, #60]	; (8009208 <pbuf_alloc_reference+0x64>)
 80091ca:	f009 fb57 	bl	801287c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80091ce:	2007      	movs	r0, #7
 80091d0:	f7ff fb78 	bl	80088c4 <memp_malloc>
 80091d4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	e00b      	b.n	80091f8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80091e0:	8879      	ldrh	r1, [r7, #2]
 80091e2:	887a      	ldrh	r2, [r7, #2]
 80091e4:	2300      	movs	r3, #0
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	883b      	ldrh	r3, [r7, #0]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	460b      	mov	r3, r1
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff feb7 	bl	8008f64 <pbuf_init_alloced_pbuf>
  return p;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	08014028 	.word	0x08014028
 8009204:	0801412c 	.word	0x0801412c
 8009208:	08014088 	.word	0x08014088

0800920c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af02      	add	r7, sp, #8
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
 8009218:	460b      	mov	r3, r1
 800921a:	81bb      	strh	r3, [r7, #12]
 800921c:	4613      	mov	r3, r2
 800921e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009224:	8a7b      	ldrh	r3, [r7, #18]
 8009226:	3303      	adds	r3, #3
 8009228:	f023 0203 	bic.w	r2, r3, #3
 800922c:	89bb      	ldrh	r3, [r7, #12]
 800922e:	441a      	add	r2, r3
 8009230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009232:	429a      	cmp	r2, r3
 8009234:	d901      	bls.n	800923a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	e018      	b.n	800926c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009240:	8a7b      	ldrh	r3, [r7, #18]
 8009242:	3303      	adds	r3, #3
 8009244:	f023 0303 	bic.w	r3, r3, #3
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	4413      	add	r3, r2
 800924c:	617b      	str	r3, [r7, #20]
 800924e:	e001      	b.n	8009254 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	89b9      	ldrh	r1, [r7, #12]
 8009258:	89ba      	ldrh	r2, [r7, #12]
 800925a:	2302      	movs	r3, #2
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	897b      	ldrh	r3, [r7, #10]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	460b      	mov	r3, r1
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	f7ff fe7d 	bl	8008f64 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800926a:	687b      	ldr	r3, [r7, #4]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <pbuf_realloc+0x20>
 8009286:	4b3a      	ldr	r3, [pc, #232]	; (8009370 <pbuf_realloc+0xfc>)
 8009288:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800928c:	4939      	ldr	r1, [pc, #228]	; (8009374 <pbuf_realloc+0x100>)
 800928e:	483a      	ldr	r0, [pc, #232]	; (8009378 <pbuf_realloc+0x104>)
 8009290:	f009 faf4 	bl	801287c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	891b      	ldrh	r3, [r3, #8]
 8009298:	887a      	ldrh	r2, [r7, #2]
 800929a:	429a      	cmp	r2, r3
 800929c:	d263      	bcs.n	8009366 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	891a      	ldrh	r2, [r3, #8]
 80092a2:	887b      	ldrh	r3, [r7, #2]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80092a8:	887b      	ldrh	r3, [r7, #2]
 80092aa:	817b      	strh	r3, [r7, #10]
  q = p;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80092b0:	e018      	b.n	80092e4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	895b      	ldrh	r3, [r3, #10]
 80092b6:	897a      	ldrh	r2, [r7, #10]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	891a      	ldrh	r2, [r3, #8]
 80092c0:	893b      	ldrh	r3, [r7, #8]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <pbuf_realloc+0x70>
 80092d6:	4b26      	ldr	r3, [pc, #152]	; (8009370 <pbuf_realloc+0xfc>)
 80092d8:	f240 12af 	movw	r2, #431	; 0x1af
 80092dc:	4927      	ldr	r1, [pc, #156]	; (800937c <pbuf_realloc+0x108>)
 80092de:	4826      	ldr	r0, [pc, #152]	; (8009378 <pbuf_realloc+0x104>)
 80092e0:	f009 facc 	bl	801287c <iprintf>
  while (rem_len > q->len) {
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	895b      	ldrh	r3, [r3, #10]
 80092e8:	897a      	ldrh	r2, [r7, #10]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d8e1      	bhi.n	80092b2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	7b1b      	ldrb	r3, [r3, #12]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d121      	bne.n	800933e <pbuf_realloc+0xca>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	895b      	ldrh	r3, [r3, #10]
 80092fe:	897a      	ldrh	r2, [r7, #10]
 8009300:	429a      	cmp	r2, r3
 8009302:	d01c      	beq.n	800933e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	7b5b      	ldrb	r3, [r3, #13]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d116      	bne.n	800933e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	b29a      	uxth	r2, r3
 800931a:	897b      	ldrh	r3, [r7, #10]
 800931c:	4413      	add	r3, r2
 800931e:	b29b      	uxth	r3, r3
 8009320:	4619      	mov	r1, r3
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7ff f864 	bl	80083f0 <mem_trim>
 8009328:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <pbuf_realloc+0xca>
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <pbuf_realloc+0xfc>)
 8009332:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009336:	4912      	ldr	r1, [pc, #72]	; (8009380 <pbuf_realloc+0x10c>)
 8009338:	480f      	ldr	r0, [pc, #60]	; (8009378 <pbuf_realloc+0x104>)
 800933a:	f009 fa9f 	bl	801287c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	897a      	ldrh	r2, [r7, #10]
 8009342:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	895a      	ldrh	r2, [r3, #10]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f911 	bl	8009580 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e000      	b.n	8009368 <pbuf_realloc+0xf4>
    return;
 8009366:	bf00      	nop

}
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	08014028 	.word	0x08014028
 8009374:	08014140 	.word	0x08014140
 8009378:	08014088 	.word	0x08014088
 800937c:	08014158 	.word	0x08014158
 8009380:	08014170 	.word	0x08014170

08009384 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <pbuf_add_header_impl+0x22>
 8009398:	4b2b      	ldr	r3, [pc, #172]	; (8009448 <pbuf_add_header_impl+0xc4>)
 800939a:	f240 12df 	movw	r2, #479	; 0x1df
 800939e:	492b      	ldr	r1, [pc, #172]	; (800944c <pbuf_add_header_impl+0xc8>)
 80093a0:	482b      	ldr	r0, [pc, #172]	; (8009450 <pbuf_add_header_impl+0xcc>)
 80093a2:	f009 fa6b 	bl	801287c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <pbuf_add_header_impl+0x30>
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b2:	d301      	bcc.n	80093b8 <pbuf_add_header_impl+0x34>
    return 1;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e043      	b.n	8009440 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <pbuf_add_header_impl+0x3e>
    return 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	e03e      	b.n	8009440 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	891a      	ldrh	r2, [r3, #8]
 80093ca:	8a7b      	ldrh	r3, [r7, #18]
 80093cc:	4413      	add	r3, r2
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	8a7a      	ldrh	r2, [r7, #18]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d901      	bls.n	80093da <pbuf_add_header_impl+0x56>
    return 1;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e032      	b.n	8009440 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	7b1b      	ldrb	r3, [r3, #12]
 80093de:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80093e0:	8a3b      	ldrh	r3, [r7, #16]
 80093e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	425b      	negs	r3, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3310      	adds	r3, #16
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d20d      	bcs.n	800941c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009400:	2301      	movs	r3, #1
 8009402:	e01d      	b.n	8009440 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d006      	beq.n	8009418 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	425b      	negs	r3, r3
 8009412:	4413      	add	r3, r2
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e001      	b.n	800941c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009418:	2301      	movs	r3, #1
 800941a:	e011      	b.n	8009440 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	895a      	ldrh	r2, [r3, #10]
 8009426:	8a7b      	ldrh	r3, [r7, #18]
 8009428:	4413      	add	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	891a      	ldrh	r2, [r3, #8]
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	811a      	strh	r2, [r3, #8]


  return 0;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	08014028 	.word	0x08014028
 800944c:	0801418c 	.word	0x0801418c
 8009450:	08014088 	.word	0x08014088

08009454 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800945e:	2200      	movs	r2, #0
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ff8e 	bl	8009384 <pbuf_add_header_impl>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d106      	bne.n	8009492 <pbuf_remove_header+0x1e>
 8009484:	4b20      	ldr	r3, [pc, #128]	; (8009508 <pbuf_remove_header+0x94>)
 8009486:	f240 224b 	movw	r2, #587	; 0x24b
 800948a:	4920      	ldr	r1, [pc, #128]	; (800950c <pbuf_remove_header+0x98>)
 800948c:	4820      	ldr	r0, [pc, #128]	; (8009510 <pbuf_remove_header+0x9c>)
 800948e:	f009 f9f5 	bl	801287c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <pbuf_remove_header+0x2c>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949e:	d301      	bcc.n	80094a4 <pbuf_remove_header+0x30>
    return 1;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e02c      	b.n	80094fe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <pbuf_remove_header+0x3a>
    return 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e027      	b.n	80094fe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	895b      	ldrh	r3, [r3, #10]
 80094b6:	89fa      	ldrh	r2, [r7, #14]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d908      	bls.n	80094ce <pbuf_remove_header+0x5a>
 80094bc:	4b12      	ldr	r3, [pc, #72]	; (8009508 <pbuf_remove_header+0x94>)
 80094be:	f240 2255 	movw	r2, #597	; 0x255
 80094c2:	4914      	ldr	r1, [pc, #80]	; (8009514 <pbuf_remove_header+0xa0>)
 80094c4:	4812      	ldr	r0, [pc, #72]	; (8009510 <pbuf_remove_header+0x9c>)
 80094c6:	f009 f9d9 	bl	801287c <iprintf>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e017      	b.n	80094fe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	441a      	add	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	895a      	ldrh	r2, [r3, #10]
 80094e4:	89fb      	ldrh	r3, [r7, #14]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	891a      	ldrh	r2, [r3, #8]
 80094f2:	89fb      	ldrh	r3, [r7, #14]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	08014028 	.word	0x08014028
 800950c:	0801418c 	.word	0x0801418c
 8009510:	08014088 	.word	0x08014088
 8009514:	08014198 	.word	0x08014198

08009518 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	807b      	strh	r3, [r7, #2]
 8009524:	4613      	mov	r3, r2
 8009526:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	da08      	bge.n	8009542 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009534:	425b      	negs	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff ff9b 	bl	8009474 <pbuf_remove_header>
 800953e:	4603      	mov	r3, r0
 8009540:	e007      	b.n	8009552 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009546:	787a      	ldrb	r2, [r7, #1]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff ff1a 	bl	8009384 <pbuf_add_header_impl>
 8009550:	4603      	mov	r3, r0
  }
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009566:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800956a:	2201      	movs	r2, #1
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff ffd2 	bl	8009518 <pbuf_header_impl>
 8009574:	4603      	mov	r3, r0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <pbuf_free+0x22>
 8009594:	4b38      	ldr	r3, [pc, #224]	; (8009678 <pbuf_free+0xf8>)
 8009596:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800959a:	4938      	ldr	r1, [pc, #224]	; (800967c <pbuf_free+0xfc>)
 800959c:	4838      	ldr	r0, [pc, #224]	; (8009680 <pbuf_free+0x100>)
 800959e:	f009 f96d 	bl	801287c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e063      	b.n	800966e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80095aa:	e05c      	b.n	8009666 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7b9b      	ldrb	r3, [r3, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <pbuf_free+0x42>
 80095b4:	4b30      	ldr	r3, [pc, #192]	; (8009678 <pbuf_free+0xf8>)
 80095b6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80095ba:	4932      	ldr	r1, [pc, #200]	; (8009684 <pbuf_free+0x104>)
 80095bc:	4830      	ldr	r0, [pc, #192]	; (8009680 <pbuf_free+0x100>)
 80095be:	f009 f95d 	bl	801287c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	7b9b      	ldrb	r3, [r3, #14]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	739a      	strb	r2, [r3, #14]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7b9b      	ldrb	r3, [r3, #14]
 80095d2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80095d4:	7dbb      	ldrb	r3, [r7, #22]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d143      	bne.n	8009662 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7b1b      	ldrb	r3, [r3, #12]
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7b5b      	ldrb	r3, [r3, #13]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d011      	beq.n	800961a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <pbuf_free+0x90>
 8009602:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <pbuf_free+0xf8>)
 8009604:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009608:	491f      	ldr	r1, [pc, #124]	; (8009688 <pbuf_free+0x108>)
 800960a:	481d      	ldr	r0, [pc, #116]	; (8009680 <pbuf_free+0x100>)
 800960c:	f009 f936 	bl	801287c <iprintf>
        pc->custom_free_function(p);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
 8009618:	e01d      	b.n	8009656 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d104      	bne.n	800962a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	2008      	movs	r0, #8
 8009624:	f7ff f99a 	bl	800895c <memp_free>
 8009628:	e015      	b.n	8009656 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d104      	bne.n	800963a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	2007      	movs	r0, #7
 8009634:	f7ff f992 	bl	800895c <memp_free>
 8009638:	e00d      	b.n	8009656 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d103      	bne.n	8009648 <pbuf_free+0xc8>
          mem_free(p);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7fe fe6b 	bl	800831c <mem_free>
 8009646:	e006      	b.n	8009656 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <pbuf_free+0xf8>)
 800964a:	f240 320f 	movw	r2, #783	; 0x30f
 800964e:	490f      	ldr	r1, [pc, #60]	; (800968c <pbuf_free+0x10c>)
 8009650:	480b      	ldr	r0, [pc, #44]	; (8009680 <pbuf_free+0x100>)
 8009652:	f009 f913 	bl	801287c <iprintf>
        }
      }
      count++;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	3301      	adds	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	607b      	str	r3, [r7, #4]
 8009660:	e001      	b.n	8009666 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d19f      	bne.n	80095ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	08014028 	.word	0x08014028
 800967c:	0801418c 	.word	0x0801418c
 8009680:	08014088 	.word	0x08014088
 8009684:	080141b8 	.word	0x080141b8
 8009688:	080141d0 	.word	0x080141d0
 800968c:	080141f4 	.word	0x080141f4

08009690 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800969c:	e005      	b.n	80096aa <pbuf_clen+0x1a>
    ++len;
 800969e:	89fb      	ldrh	r3, [r7, #14]
 80096a0:	3301      	adds	r3, #1
 80096a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1f6      	bne.n	800969e <pbuf_clen+0xe>
  }
  return len;
 80096b0:	89fb      	ldrh	r3, [r7, #14]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d010      	beq.n	80096f0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	7b9b      	ldrb	r3, [r3, #14]
 80096d2:	3301      	adds	r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7b9b      	ldrb	r3, [r3, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <pbuf_ref+0x30>
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <pbuf_ref+0x38>)
 80096e4:	f240 3242 	movw	r2, #834	; 0x342
 80096e8:	4904      	ldr	r1, [pc, #16]	; (80096fc <pbuf_ref+0x3c>)
 80096ea:	4805      	ldr	r0, [pc, #20]	; (8009700 <pbuf_ref+0x40>)
 80096ec:	f009 f8c6 	bl	801287c <iprintf>
  }
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	08014028 	.word	0x08014028
 80096fc:	08014208 	.word	0x08014208
 8009700:	08014088 	.word	0x08014088

08009704 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <pbuf_cat+0x16>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <pbuf_cat+0x26>
 800971a:	4b20      	ldr	r3, [pc, #128]	; (800979c <pbuf_cat+0x98>)
 800971c:	f240 3259 	movw	r2, #857	; 0x359
 8009720:	491f      	ldr	r1, [pc, #124]	; (80097a0 <pbuf_cat+0x9c>)
 8009722:	4820      	ldr	r0, [pc, #128]	; (80097a4 <pbuf_cat+0xa0>)
 8009724:	f009 f8aa 	bl	801287c <iprintf>
 8009728:	e034      	b.n	8009794 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	e00a      	b.n	8009746 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	891a      	ldrh	r2, [r3, #8]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	891b      	ldrh	r3, [r3, #8]
 8009738:	4413      	add	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f0      	bne.n	8009730 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	891a      	ldrh	r2, [r3, #8]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	895b      	ldrh	r3, [r3, #10]
 8009756:	429a      	cmp	r2, r3
 8009758:	d006      	beq.n	8009768 <pbuf_cat+0x64>
 800975a:	4b10      	ldr	r3, [pc, #64]	; (800979c <pbuf_cat+0x98>)
 800975c:	f240 3262 	movw	r2, #866	; 0x362
 8009760:	4911      	ldr	r1, [pc, #68]	; (80097a8 <pbuf_cat+0xa4>)
 8009762:	4810      	ldr	r0, [pc, #64]	; (80097a4 <pbuf_cat+0xa0>)
 8009764:	f009 f88a 	bl	801287c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d006      	beq.n	800977e <pbuf_cat+0x7a>
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <pbuf_cat+0x98>)
 8009772:	f240 3263 	movw	r2, #867	; 0x363
 8009776:	490d      	ldr	r1, [pc, #52]	; (80097ac <pbuf_cat+0xa8>)
 8009778:	480a      	ldr	r0, [pc, #40]	; (80097a4 <pbuf_cat+0xa0>)
 800977a:	f009 f87f 	bl	801287c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	891a      	ldrh	r2, [r3, #8]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	891b      	ldrh	r3, [r3, #8]
 8009786:	4413      	add	r3, r2
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	08014028 	.word	0x08014028
 80097a0:	0801421c 	.word	0x0801421c
 80097a4:	08014088 	.word	0x08014088
 80097a8:	08014254 	.word	0x08014254
 80097ac:	08014284 	.word	0x08014284

080097b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d008      	beq.n	80097da <pbuf_copy+0x2a>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <pbuf_copy+0x2a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	891a      	ldrh	r2, [r3, #8]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	891b      	ldrh	r3, [r3, #8]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d209      	bcs.n	80097ee <pbuf_copy+0x3e>
 80097da:	4b57      	ldr	r3, [pc, #348]	; (8009938 <pbuf_copy+0x188>)
 80097dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80097e0:	4956      	ldr	r1, [pc, #344]	; (800993c <pbuf_copy+0x18c>)
 80097e2:	4857      	ldr	r0, [pc, #348]	; (8009940 <pbuf_copy+0x190>)
 80097e4:	f009 f84a 	bl	801287c <iprintf>
 80097e8:	f06f 030f 	mvn.w	r3, #15
 80097ec:	e09f      	b.n	800992e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	895b      	ldrh	r3, [r3, #10]
 80097f2:	461a      	mov	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	1ad2      	subs	r2, r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	895b      	ldrh	r3, [r3, #10]
 80097fc:	4619      	mov	r1, r3
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	1acb      	subs	r3, r1, r3
 8009802:	429a      	cmp	r2, r3
 8009804:	d306      	bcc.n	8009814 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	895b      	ldrh	r3, [r3, #10]
 800980a:	461a      	mov	r2, r3
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	60fb      	str	r3, [r7, #12]
 8009812:	e005      	b.n	8009820 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	895b      	ldrh	r3, [r3, #10]
 8009818:	461a      	mov	r2, r3
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	18d0      	adds	r0, r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4619      	mov	r1, r3
 8009834:	f009 f80c 	bl	8012850 <memcpy>
    offset_to += len;
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	895b      	ldrh	r3, [r3, #10]
 800984c:	461a      	mov	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	4293      	cmp	r3, r2
 8009852:	d906      	bls.n	8009862 <pbuf_copy+0xb2>
 8009854:	4b38      	ldr	r3, [pc, #224]	; (8009938 <pbuf_copy+0x188>)
 8009856:	f240 32d9 	movw	r2, #985	; 0x3d9
 800985a:	493a      	ldr	r1, [pc, #232]	; (8009944 <pbuf_copy+0x194>)
 800985c:	4838      	ldr	r0, [pc, #224]	; (8009940 <pbuf_copy+0x190>)
 800985e:	f009 f80d 	bl	801287c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	895b      	ldrh	r3, [r3, #10]
 8009866:	461a      	mov	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4293      	cmp	r3, r2
 800986c:	d906      	bls.n	800987c <pbuf_copy+0xcc>
 800986e:	4b32      	ldr	r3, [pc, #200]	; (8009938 <pbuf_copy+0x188>)
 8009870:	f240 32da 	movw	r2, #986	; 0x3da
 8009874:	4934      	ldr	r1, [pc, #208]	; (8009948 <pbuf_copy+0x198>)
 8009876:	4832      	ldr	r0, [pc, #200]	; (8009940 <pbuf_copy+0x190>)
 8009878:	f009 f800 	bl	801287c <iprintf>
    if (offset_from >= p_from->len) {
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	895b      	ldrh	r3, [r3, #10]
 8009880:	461a      	mov	r2, r3
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	4293      	cmp	r3, r2
 8009886:	d304      	bcc.n	8009892 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	895b      	ldrh	r3, [r3, #10]
 8009896:	461a      	mov	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	4293      	cmp	r3, r2
 800989c:	d114      	bne.n	80098c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10c      	bne.n	80098c8 <pbuf_copy+0x118>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <pbuf_copy+0x118>
 80098b4:	4b20      	ldr	r3, [pc, #128]	; (8009938 <pbuf_copy+0x188>)
 80098b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80098ba:	4924      	ldr	r1, [pc, #144]	; (800994c <pbuf_copy+0x19c>)
 80098bc:	4820      	ldr	r0, [pc, #128]	; (8009940 <pbuf_copy+0x190>)
 80098be:	f008 ffdd 	bl	801287c <iprintf>
 80098c2:	f06f 030f 	mvn.w	r3, #15
 80098c6:	e032      	b.n	800992e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d013      	beq.n	80098f6 <pbuf_copy+0x146>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	895a      	ldrh	r2, [r3, #10]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	891b      	ldrh	r3, [r3, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d10d      	bne.n	80098f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <pbuf_copy+0x146>
 80098e2:	4b15      	ldr	r3, [pc, #84]	; (8009938 <pbuf_copy+0x188>)
 80098e4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80098e8:	4919      	ldr	r1, [pc, #100]	; (8009950 <pbuf_copy+0x1a0>)
 80098ea:	4815      	ldr	r0, [pc, #84]	; (8009940 <pbuf_copy+0x190>)
 80098ec:	f008 ffc6 	bl	801287c <iprintf>
 80098f0:	f06f 0305 	mvn.w	r3, #5
 80098f4:	e01b      	b.n	800992e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d013      	beq.n	8009924 <pbuf_copy+0x174>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	895a      	ldrh	r2, [r3, #10]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	891b      	ldrh	r3, [r3, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	d10d      	bne.n	8009924 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <pbuf_copy+0x174>
 8009910:	4b09      	ldr	r3, [pc, #36]	; (8009938 <pbuf_copy+0x188>)
 8009912:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009916:	490e      	ldr	r1, [pc, #56]	; (8009950 <pbuf_copy+0x1a0>)
 8009918:	4809      	ldr	r0, [pc, #36]	; (8009940 <pbuf_copy+0x190>)
 800991a:	f008 ffaf 	bl	801287c <iprintf>
 800991e:	f06f 0305 	mvn.w	r3, #5
 8009922:	e004      	b.n	800992e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f47f af61 	bne.w	80097ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	08014028 	.word	0x08014028
 800993c:	080142d0 	.word	0x080142d0
 8009940:	08014088 	.word	0x08014088
 8009944:	08014300 	.word	0x08014300
 8009948:	08014318 	.word	0x08014318
 800994c:	08014334 	.word	0x08014334
 8009950:	08014344 	.word	0x08014344

08009954 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4611      	mov	r1, r2
 8009960:	461a      	mov	r2, r3
 8009962:	460b      	mov	r3, r1
 8009964:	80fb      	strh	r3, [r7, #6]
 8009966:	4613      	mov	r3, r2
 8009968:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d108      	bne.n	800998a <pbuf_copy_partial+0x36>
 8009978:	4b2b      	ldr	r3, [pc, #172]	; (8009a28 <pbuf_copy_partial+0xd4>)
 800997a:	f240 420a 	movw	r2, #1034	; 0x40a
 800997e:	492b      	ldr	r1, [pc, #172]	; (8009a2c <pbuf_copy_partial+0xd8>)
 8009980:	482b      	ldr	r0, [pc, #172]	; (8009a30 <pbuf_copy_partial+0xdc>)
 8009982:	f008 ff7b 	bl	801287c <iprintf>
 8009986:	2300      	movs	r3, #0
 8009988:	e04a      	b.n	8009a20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d108      	bne.n	80099a2 <pbuf_copy_partial+0x4e>
 8009990:	4b25      	ldr	r3, [pc, #148]	; (8009a28 <pbuf_copy_partial+0xd4>)
 8009992:	f240 420b 	movw	r2, #1035	; 0x40b
 8009996:	4927      	ldr	r1, [pc, #156]	; (8009a34 <pbuf_copy_partial+0xe0>)
 8009998:	4825      	ldr	r0, [pc, #148]	; (8009a30 <pbuf_copy_partial+0xdc>)
 800999a:	f008 ff6f 	bl	801287c <iprintf>
 800999e:	2300      	movs	r3, #0
 80099a0:	e03e      	b.n	8009a20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	61fb      	str	r3, [r7, #28]
 80099a6:	e034      	b.n	8009a12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80099a8:	88bb      	ldrh	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <pbuf_copy_partial+0x70>
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	895b      	ldrh	r3, [r3, #10]
 80099b2:	88ba      	ldrh	r2, [r7, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d305      	bcc.n	80099c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	895b      	ldrh	r3, [r3, #10]
 80099bc:	88ba      	ldrh	r2, [r7, #4]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	80bb      	strh	r3, [r7, #4]
 80099c2:	e023      	b.n	8009a0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	895a      	ldrh	r2, [r3, #10]
 80099c8:	88bb      	ldrh	r3, [r7, #4]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80099ce:	8b3a      	ldrh	r2, [r7, #24]
 80099d0:	88fb      	ldrh	r3, [r7, #6]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d901      	bls.n	80099da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80099da:	8b7b      	ldrh	r3, [r7, #26]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	18d0      	adds	r0, r2, r3
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	88bb      	ldrh	r3, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	8b3a      	ldrh	r2, [r7, #24]
 80099ea:	4619      	mov	r1, r3
 80099ec:	f008 ff30 	bl	8012850 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80099f0:	8afa      	ldrh	r2, [r7, #22]
 80099f2:	8b3b      	ldrh	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80099f8:	8b7a      	ldrh	r2, [r7, #26]
 80099fa:	8b3b      	ldrh	r3, [r7, #24]
 80099fc:	4413      	add	r3, r2
 80099fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009a00:	88fa      	ldrh	r2, [r7, #6]
 8009a02:	8b3b      	ldrh	r3, [r7, #24]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	88fb      	ldrh	r3, [r7, #6]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <pbuf_copy_partial+0xca>
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1c4      	bne.n	80099a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009a1e:	8afb      	ldrh	r3, [r7, #22]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3720      	adds	r7, #32
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	08014028 	.word	0x08014028
 8009a2c:	08014370 	.word	0x08014370
 8009a30:	08014088 	.word	0x08014088
 8009a34:	08014390 	.word	0x08014390

08009a38 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <pbuf_take+0x30>
 8009a54:	4b3a      	ldr	r3, [pc, #232]	; (8009b40 <pbuf_take+0x108>)
 8009a56:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8009a5a:	493a      	ldr	r1, [pc, #232]	; (8009b44 <pbuf_take+0x10c>)
 8009a5c:	483a      	ldr	r0, [pc, #232]	; (8009b48 <pbuf_take+0x110>)
 8009a5e:	f008 ff0d 	bl	801287c <iprintf>
 8009a62:	f06f 030f 	mvn.w	r3, #15
 8009a66:	e067      	b.n	8009b38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d109      	bne.n	8009a82 <pbuf_take+0x4a>
 8009a6e:	4b34      	ldr	r3, [pc, #208]	; (8009b40 <pbuf_take+0x108>)
 8009a70:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8009a74:	4935      	ldr	r1, [pc, #212]	; (8009b4c <pbuf_take+0x114>)
 8009a76:	4834      	ldr	r0, [pc, #208]	; (8009b48 <pbuf_take+0x110>)
 8009a78:	f008 ff00 	bl	801287c <iprintf>
 8009a7c:	f06f 030f 	mvn.w	r3, #15
 8009a80:	e05a      	b.n	8009b38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	891b      	ldrh	r3, [r3, #8]
 8009a86:	88fa      	ldrh	r2, [r7, #6]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d909      	bls.n	8009aa0 <pbuf_take+0x68>
 8009a8c:	4b2c      	ldr	r3, [pc, #176]	; (8009b40 <pbuf_take+0x108>)
 8009a8e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8009a92:	492f      	ldr	r1, [pc, #188]	; (8009b50 <pbuf_take+0x118>)
 8009a94:	482c      	ldr	r0, [pc, #176]	; (8009b48 <pbuf_take+0x110>)
 8009a96:	f008 fef1 	bl	801287c <iprintf>
 8009a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9e:	e04b      	b.n	8009b38 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <pbuf_take+0x7e>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <pbuf_take+0x7e>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	891b      	ldrh	r3, [r3, #8]
 8009ab0:	88fa      	ldrh	r2, [r7, #6]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d902      	bls.n	8009abc <pbuf_take+0x84>
    return ERR_ARG;
 8009ab6:	f06f 030f 	mvn.w	r3, #15
 8009aba:	e03d      	b.n	8009b38 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	61fb      	str	r3, [r7, #28]
 8009ac0:	e028      	b.n	8009b14 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <pbuf_take+0x9e>
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	; (8009b40 <pbuf_take+0x108>)
 8009aca:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009ace:	4921      	ldr	r1, [pc, #132]	; (8009b54 <pbuf_take+0x11c>)
 8009ad0:	481d      	ldr	r0, [pc, #116]	; (8009b48 <pbuf_take+0x110>)
 8009ad2:	f008 fed3 	bl	801287c <iprintf>
    buf_copy_len = total_copy_len;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	895b      	ldrh	r3, [r3, #10]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d902      	bls.n	8009aec <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	895b      	ldrh	r3, [r3, #10]
 8009aea:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	6858      	ldr	r0, [r3, #4]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	4413      	add	r3, r2
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	4619      	mov	r1, r3
 8009afa:	f008 fea9 	bl	8012850 <memcpy>
    total_copy_len -= buf_copy_len;
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1d3      	bne.n	8009ac2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <pbuf_take+0xf0>
 8009b20:	88fb      	ldrh	r3, [r7, #6]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d006      	beq.n	8009b36 <pbuf_take+0xfe>
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <pbuf_take+0x108>)
 8009b2a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8009b2e:	490a      	ldr	r1, [pc, #40]	; (8009b58 <pbuf_take+0x120>)
 8009b30:	4805      	ldr	r0, [pc, #20]	; (8009b48 <pbuf_take+0x110>)
 8009b32:	f008 fea3 	bl	801287c <iprintf>
  return ERR_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3720      	adds	r7, #32
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	08014028 	.word	0x08014028
 8009b44:	08014400 	.word	0x08014400
 8009b48:	08014088 	.word	0x08014088
 8009b4c:	08014418 	.word	0x08014418
 8009b50:	08014434 	.word	0x08014434
 8009b54:	08014454 	.word	0x08014454
 8009b58:	0801446c 	.word	0x0801446c

08009b5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	603a      	str	r2, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	8919      	ldrh	r1, [r3, #8]
 8009b70:	88ba      	ldrh	r2, [r7, #4]
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fa1f 	bl	8008fb8 <pbuf_alloc>
 8009b7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <pbuf_clone+0x2a>
    return NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e011      	b.n	8009baa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff fe11 	bl	80097b0 <pbuf_copy>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009b92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d006      	beq.n	8009ba8 <pbuf_clone+0x4c>
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <pbuf_clone+0x58>)
 8009b9c:	f240 5224 	movw	r2, #1316	; 0x524
 8009ba0:	4905      	ldr	r1, [pc, #20]	; (8009bb8 <pbuf_clone+0x5c>)
 8009ba2:	4806      	ldr	r0, [pc, #24]	; (8009bbc <pbuf_clone+0x60>)
 8009ba4:	f008 fe6a 	bl	801287c <iprintf>
  return q;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	08014028 	.word	0x08014028
 8009bb8:	0801449c 	.word	0x0801449c
 8009bbc:	08014088 	.word	0x08014088

08009bc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009bc4:	f008 fee8 	bl	8012998 <rand>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	4b01      	ldr	r3, [pc, #4]	; (8009be0 <tcp_init+0x20>)
 8009bda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009bdc:	bf00      	nop
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	2000001a 	.word	0x2000001a

08009be4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	7d1b      	ldrb	r3, [r3, #20]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d105      	bne.n	8009c00 <tcp_free+0x1c>
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <tcp_free+0x2c>)
 8009bf6:	22d4      	movs	r2, #212	; 0xd4
 8009bf8:	4906      	ldr	r1, [pc, #24]	; (8009c14 <tcp_free+0x30>)
 8009bfa:	4807      	ldr	r0, [pc, #28]	; (8009c18 <tcp_free+0x34>)
 8009bfc:	f008 fe3e 	bl	801287c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	2001      	movs	r0, #1
 8009c04:	f7fe feaa 	bl	800895c <memp_free>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	08014528 	.word	0x08014528
 8009c14:	08014558 	.word	0x08014558
 8009c18:	0801456c 	.word	0x0801456c

08009c1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	7d1b      	ldrb	r3, [r3, #20]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d105      	bne.n	8009c38 <tcp_free_listen+0x1c>
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <tcp_free_listen+0x2c>)
 8009c2e:	22df      	movs	r2, #223	; 0xdf
 8009c30:	4906      	ldr	r1, [pc, #24]	; (8009c4c <tcp_free_listen+0x30>)
 8009c32:	4807      	ldr	r0, [pc, #28]	; (8009c50 <tcp_free_listen+0x34>)
 8009c34:	f008 fe22 	bl	801287c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	f7fe fe8e 	bl	800895c <memp_free>
}
 8009c40:	bf00      	nop
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	08014528 	.word	0x08014528
 8009c4c:	08014594 	.word	0x08014594
 8009c50:	0801456c 	.word	0x0801456c

08009c54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009c58:	f001 f85c 	bl	800ad14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009c5c:	4b07      	ldr	r3, [pc, #28]	; (8009c7c <tcp_tmr+0x28>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	3301      	adds	r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	4b05      	ldr	r3, [pc, #20]	; (8009c7c <tcp_tmr+0x28>)
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <tcp_tmr+0x28>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009c74:	f000 fd0e 	bl	800a694 <tcp_slowtmr>
  }
}
 8009c78:	bf00      	nop
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20000891 	.word	0x20000891

08009c80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d105      	bne.n	8009c9c <tcp_remove_listener+0x1c>
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <tcp_remove_listener+0x48>)
 8009c92:	22ff      	movs	r2, #255	; 0xff
 8009c94:	490d      	ldr	r1, [pc, #52]	; (8009ccc <tcp_remove_listener+0x4c>)
 8009c96:	480e      	ldr	r0, [pc, #56]	; (8009cd0 <tcp_remove_listener+0x50>)
 8009c98:	f008 fdf0 	bl	801287c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e00a      	b.n	8009cb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d102      	bne.n	8009cb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f1      	bne.n	8009ca2 <tcp_remove_listener+0x22>
    }
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	08014528 	.word	0x08014528
 8009ccc:	080145b0 	.word	0x080145b0
 8009cd0:	0801456c 	.word	0x0801456c

08009cd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d106      	bne.n	8009cf0 <tcp_listen_closed+0x1c>
 8009ce2:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <tcp_listen_closed+0x60>)
 8009ce4:	f240 1211 	movw	r2, #273	; 0x111
 8009ce8:	4913      	ldr	r1, [pc, #76]	; (8009d38 <tcp_listen_closed+0x64>)
 8009cea:	4814      	ldr	r0, [pc, #80]	; (8009d3c <tcp_listen_closed+0x68>)
 8009cec:	f008 fdc6 	bl	801287c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7d1b      	ldrb	r3, [r3, #20]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d006      	beq.n	8009d06 <tcp_listen_closed+0x32>
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <tcp_listen_closed+0x60>)
 8009cfa:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009cfe:	4910      	ldr	r1, [pc, #64]	; (8009d40 <tcp_listen_closed+0x6c>)
 8009d00:	480e      	ldr	r0, [pc, #56]	; (8009d3c <tcp_listen_closed+0x68>)
 8009d02:	f008 fdbb 	bl	801287c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d06:	2301      	movs	r3, #1
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e00b      	b.n	8009d24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009d0c:	4a0d      	ldr	r2, [pc, #52]	; (8009d44 <tcp_listen_closed+0x70>)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff ffb1 	bl	8009c80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d9f0      	bls.n	8009d0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	08014528 	.word	0x08014528
 8009d38:	080145d8 	.word	0x080145d8
 8009d3c:	0801456c 	.word	0x0801456c
 8009d40:	080145e4 	.word	0x080145e4
 8009d44:	08016504 	.word	0x08016504

08009d48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009d48:	b5b0      	push	{r4, r5, r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af04      	add	r7, sp, #16
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <tcp_close_shutdown+0x20>
 8009d5a:	4b63      	ldr	r3, [pc, #396]	; (8009ee8 <tcp_close_shutdown+0x1a0>)
 8009d5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009d60:	4962      	ldr	r1, [pc, #392]	; (8009eec <tcp_close_shutdown+0x1a4>)
 8009d62:	4863      	ldr	r0, [pc, #396]	; (8009ef0 <tcp_close_shutdown+0x1a8>)
 8009d64:	f008 fd8a 	bl	801287c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d066      	beq.n	8009e3c <tcp_close_shutdown+0xf4>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7d1b      	ldrb	r3, [r3, #20]
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d003      	beq.n	8009d7e <tcp_close_shutdown+0x36>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7d1b      	ldrb	r3, [r3, #20]
 8009d7a:	2b07      	cmp	r3, #7
 8009d7c:	d15e      	bne.n	8009e3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d104      	bne.n	8009d90 <tcp_close_shutdown+0x48>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d055      	beq.n	8009e3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	8b5b      	ldrh	r3, [r3, #26]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d106      	bne.n	8009daa <tcp_close_shutdown+0x62>
 8009d9c:	4b52      	ldr	r3, [pc, #328]	; (8009ee8 <tcp_close_shutdown+0x1a0>)
 8009d9e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009da2:	4954      	ldr	r1, [pc, #336]	; (8009ef4 <tcp_close_shutdown+0x1ac>)
 8009da4:	4852      	ldr	r0, [pc, #328]	; (8009ef0 <tcp_close_shutdown+0x1a8>)
 8009da6:	f008 fd69 	bl	801287c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009db2:	687d      	ldr	r5, [r7, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3304      	adds	r3, #4
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	8ad2      	ldrh	r2, [r2, #22]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	8b09      	ldrh	r1, [r1, #24]
 8009dc0:	9102      	str	r1, [sp, #8]
 8009dc2:	9201      	str	r2, [sp, #4]
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4601      	mov	r1, r0
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f005 fd89 	bl	800f8e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fb66 	bl	800b4a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009dd8:	4b47      	ldr	r3, [pc, #284]	; (8009ef8 <tcp_close_shutdown+0x1b0>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d105      	bne.n	8009dee <tcp_close_shutdown+0xa6>
 8009de2:	4b45      	ldr	r3, [pc, #276]	; (8009ef8 <tcp_close_shutdown+0x1b0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a43      	ldr	r2, [pc, #268]	; (8009ef8 <tcp_close_shutdown+0x1b0>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	e013      	b.n	8009e16 <tcp_close_shutdown+0xce>
 8009dee:	4b42      	ldr	r3, [pc, #264]	; (8009ef8 <tcp_close_shutdown+0x1b0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e00c      	b.n	8009e10 <tcp_close_shutdown+0xc8>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d104      	bne.n	8009e0a <tcp_close_shutdown+0xc2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e005      	b.n	8009e16 <tcp_close_shutdown+0xce>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ef      	bne.n	8009df6 <tcp_close_shutdown+0xae>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60da      	str	r2, [r3, #12]
 8009e1c:	4b37      	ldr	r3, [pc, #220]	; (8009efc <tcp_close_shutdown+0x1b4>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009e22:	4b37      	ldr	r3, [pc, #220]	; (8009f00 <tcp_close_shutdown+0x1b8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d102      	bne.n	8009e32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009e2c:	f003 fffa 	bl	800de24 <tcp_trigger_input_pcb_close>
 8009e30:	e002      	b.n	8009e38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fed6 	bl	8009be4 <tcp_free>
      }
      return ERR_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e050      	b.n	8009ede <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	7d1b      	ldrb	r3, [r3, #20]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d03b      	beq.n	8009ebc <tcp_close_shutdown+0x174>
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	dc44      	bgt.n	8009ed2 <tcp_close_shutdown+0x18a>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <tcp_close_shutdown+0x10a>
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d02a      	beq.n	8009ea6 <tcp_close_shutdown+0x15e>
 8009e50:	e03f      	b.n	8009ed2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	8adb      	ldrh	r3, [r3, #22]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d021      	beq.n	8009e9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e5a:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <tcp_close_shutdown+0x1bc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d105      	bne.n	8009e70 <tcp_close_shutdown+0x128>
 8009e64:	4b27      	ldr	r3, [pc, #156]	; (8009f04 <tcp_close_shutdown+0x1bc>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	4a26      	ldr	r2, [pc, #152]	; (8009f04 <tcp_close_shutdown+0x1bc>)
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	e013      	b.n	8009e98 <tcp_close_shutdown+0x150>
 8009e70:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <tcp_close_shutdown+0x1bc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	60bb      	str	r3, [r7, #8]
 8009e76:	e00c      	b.n	8009e92 <tcp_close_shutdown+0x14a>
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d104      	bne.n	8009e8c <tcp_close_shutdown+0x144>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	e005      	b.n	8009e98 <tcp_close_shutdown+0x150>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	60bb      	str	r3, [r7, #8]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1ef      	bne.n	8009e78 <tcp_close_shutdown+0x130>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fea0 	bl	8009be4 <tcp_free>
      break;
 8009ea4:	e01a      	b.n	8009edc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ff14 	bl	8009cd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4816      	ldr	r0, [pc, #88]	; (8009f08 <tcp_close_shutdown+0x1c0>)
 8009eb0:	f001 fb48 	bl	800b544 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff feb1 	bl	8009c1c <tcp_free_listen>
      break;
 8009eba:	e00f      	b.n	8009edc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	480e      	ldr	r0, [pc, #56]	; (8009ef8 <tcp_close_shutdown+0x1b0>)
 8009ec0:	f001 fb40 	bl	800b544 <tcp_pcb_remove>
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <tcp_close_shutdown+0x1b4>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff fe8a 	bl	8009be4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009ed0:	e004      	b.n	8009edc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f81a 	bl	8009f0c <tcp_close_shutdown_fin>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	e000      	b.n	8009ede <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	08014528 	.word	0x08014528
 8009eec:	080145fc 	.word	0x080145fc
 8009ef0:	0801456c 	.word	0x0801456c
 8009ef4:	0801461c 	.word	0x0801461c
 8009ef8:	20011644 	.word	0x20011644
 8009efc:	20011640 	.word	0x20011640
 8009f00:	20011658 	.word	0x20011658
 8009f04:	20011650 	.word	0x20011650
 8009f08:	2001164c 	.word	0x2001164c

08009f0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <tcp_close_shutdown_fin+0x1c>
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <tcp_close_shutdown_fin+0xc8>)
 8009f1c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009f20:	492d      	ldr	r1, [pc, #180]	; (8009fd8 <tcp_close_shutdown_fin+0xcc>)
 8009f22:	482e      	ldr	r0, [pc, #184]	; (8009fdc <tcp_close_shutdown_fin+0xd0>)
 8009f24:	f008 fcaa 	bl	801287c <iprintf>

  switch (pcb->state) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7d1b      	ldrb	r3, [r3, #20]
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d020      	beq.n	8009f72 <tcp_close_shutdown_fin+0x66>
 8009f30:	2b07      	cmp	r3, #7
 8009f32:	dc2b      	bgt.n	8009f8c <tcp_close_shutdown_fin+0x80>
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d002      	beq.n	8009f3e <tcp_close_shutdown_fin+0x32>
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d00d      	beq.n	8009f58 <tcp_close_shutdown_fin+0x4c>
 8009f3c:	e026      	b.n	8009f8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f004 fdde 	bl	800eb00 <tcp_send_fin>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11f      	bne.n	8009f90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2205      	movs	r2, #5
 8009f54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f56:	e01b      	b.n	8009f90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f004 fdd1 	bl	800eb00 <tcp_send_fin>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d114      	bne.n	8009f94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f70:	e010      	b.n	8009f94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f004 fdc4 	bl	800eb00 <tcp_send_fin>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d109      	bne.n	8009f98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2209      	movs	r2, #9
 8009f88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f8a:	e005      	b.n	8009f98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e01c      	b.n	8009fca <tcp_close_shutdown_fin+0xbe>
      break;
 8009f90:	bf00      	nop
 8009f92:	e002      	b.n	8009f9a <tcp_close_shutdown_fin+0x8e>
      break;
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <tcp_close_shutdown_fin+0x8e>
      break;
 8009f98:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f004 feea 	bl	800ed7c <tcp_output>
 8009fa8:	e00d      	b.n	8009fc6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb2:	d108      	bne.n	8009fc6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8b5b      	ldrh	r3, [r3, #26]
 8009fb8:	f043 0308 	orr.w	r3, r3, #8
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e001      	b.n	8009fca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	08014528 	.word	0x08014528
 8009fd8:	080145d8 	.word	0x080145d8
 8009fdc:	0801456c 	.word	0x0801456c

08009fe0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <tcp_close+0x22>
 8009fee:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <tcp_close+0x4c>)
 8009ff0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ff4:	490e      	ldr	r1, [pc, #56]	; (800a030 <tcp_close+0x50>)
 8009ff6:	480f      	ldr	r0, [pc, #60]	; (800a034 <tcp_close+0x54>)
 8009ff8:	f008 fc40 	bl	801287c <iprintf>
 8009ffc:	f06f 030f 	mvn.w	r3, #15
 800a000:	e00f      	b.n	800a022 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7d1b      	ldrb	r3, [r3, #20]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d006      	beq.n	800a018 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	8b5b      	ldrh	r3, [r3, #26]
 800a00e:	f043 0310 	orr.w	r3, r3, #16
 800a012:	b29a      	uxth	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a018:	2101      	movs	r1, #1
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff fe94 	bl	8009d48 <tcp_close_shutdown>
 800a020:	4603      	mov	r3, r0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	08014528 	.word	0x08014528
 800a030:	08014638 	.word	0x08014638
 800a034:	0801456c 	.word	0x0801456c

0800a038 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af04      	add	r7, sp, #16
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <tcp_abandon+0x20>
 800a048:	4b52      	ldr	r3, [pc, #328]	; (800a194 <tcp_abandon+0x15c>)
 800a04a:	f240 223d 	movw	r2, #573	; 0x23d
 800a04e:	4952      	ldr	r1, [pc, #328]	; (800a198 <tcp_abandon+0x160>)
 800a050:	4852      	ldr	r0, [pc, #328]	; (800a19c <tcp_abandon+0x164>)
 800a052:	f008 fc13 	bl	801287c <iprintf>
 800a056:	e099      	b.n	800a18c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d106      	bne.n	800a06e <tcp_abandon+0x36>
 800a060:	4b4c      	ldr	r3, [pc, #304]	; (800a194 <tcp_abandon+0x15c>)
 800a062:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a066:	494e      	ldr	r1, [pc, #312]	; (800a1a0 <tcp_abandon+0x168>)
 800a068:	484c      	ldr	r0, [pc, #304]	; (800a19c <tcp_abandon+0x164>)
 800a06a:	f008 fc07 	bl	801287c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7d1b      	ldrb	r3, [r3, #20]
 800a072:	2b0a      	cmp	r3, #10
 800a074:	d107      	bne.n	800a086 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	484a      	ldr	r0, [pc, #296]	; (800a1a4 <tcp_abandon+0x16c>)
 800a07a:	f001 fa63 	bl	800b544 <tcp_pcb_remove>
    tcp_free(pcb);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fdb0 	bl	8009be4 <tcp_free>
 800a084:	e082      	b.n	800a18c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a092:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	7d1b      	ldrb	r3, [r3, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d126      	bne.n	800a0fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8adb      	ldrh	r3, [r3, #22]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d02e      	beq.n	800a116 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a0b8:	4b3b      	ldr	r3, [pc, #236]	; (800a1a8 <tcp_abandon+0x170>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d105      	bne.n	800a0ce <tcp_abandon+0x96>
 800a0c2:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <tcp_abandon+0x170>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	4a37      	ldr	r2, [pc, #220]	; (800a1a8 <tcp_abandon+0x170>)
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	e013      	b.n	800a0f6 <tcp_abandon+0xbe>
 800a0ce:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <tcp_abandon+0x170>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	e00c      	b.n	800a0f0 <tcp_abandon+0xb8>
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d104      	bne.n	800a0ea <tcp_abandon+0xb2>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	60da      	str	r2, [r3, #12]
 800a0e8:	e005      	b.n	800a0f6 <tcp_abandon+0xbe>
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1ef      	bne.n	800a0d6 <tcp_abandon+0x9e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	60da      	str	r2, [r3, #12]
 800a0fc:	e00b      	b.n	800a116 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8adb      	ldrh	r3, [r3, #22]
 800a106:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	4828      	ldr	r0, [pc, #160]	; (800a1ac <tcp_abandon+0x174>)
 800a10c:	f001 fa1a 	bl	800b544 <tcp_pcb_remove>
 800a110:	4b27      	ldr	r3, [pc, #156]	; (800a1b0 <tcp_abandon+0x178>)
 800a112:	2201      	movs	r2, #1
 800a114:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fed6 	bl	800aed4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d004      	beq.n	800a13a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fecd 	bl	800aed4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fec4 	bl	800aed4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00e      	beq.n	800a170 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	8b12      	ldrh	r2, [r2, #24]
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a160:	9201      	str	r2, [sp, #4]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	460b      	mov	r3, r1
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	69b9      	ldr	r1, [r7, #24]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f005 fbba 	bl	800f8e4 <tcp_rst>
    }
    last_state = pcb->state;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7d1b      	ldrb	r3, [r3, #20]
 800a174:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff fd34 	bl	8009be4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <tcp_abandon+0x154>
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f06f 010c 	mvn.w	r1, #12
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	4798      	blx	r3
  }
}
 800a18c:	3728      	adds	r7, #40	; 0x28
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	08014528 	.word	0x08014528
 800a198:	0801466c 	.word	0x0801466c
 800a19c:	0801456c 	.word	0x0801456c
 800a1a0:	08014688 	.word	0x08014688
 800a1a4:	20011654 	.word	0x20011654
 800a1a8:	20011650 	.word	0x20011650
 800a1ac:	20011644 	.word	0x20011644
 800a1b0:	20011640 	.word	0x20011640

0800a1b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a1bc:	2101      	movs	r1, #1
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff ff3a 	bl	800a038 <tcp_abandon>
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a1da:	2304      	movs	r3, #4
 800a1dc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a1e4:	4b3e      	ldr	r3, [pc, #248]	; (800a2e0 <tcp_bind+0x114>)
 800a1e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <tcp_bind+0x36>
 800a1ee:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <tcp_bind+0x118>)
 800a1f0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a1f4:	493c      	ldr	r1, [pc, #240]	; (800a2e8 <tcp_bind+0x11c>)
 800a1f6:	483d      	ldr	r0, [pc, #244]	; (800a2ec <tcp_bind+0x120>)
 800a1f8:	f008 fb40 	bl	801287c <iprintf>
 800a1fc:	f06f 030f 	mvn.w	r3, #15
 800a200:	e06a      	b.n	800a2d8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	7d1b      	ldrb	r3, [r3, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <tcp_bind+0x52>
 800a20a:	4b36      	ldr	r3, [pc, #216]	; (800a2e4 <tcp_bind+0x118>)
 800a20c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a210:	4937      	ldr	r1, [pc, #220]	; (800a2f0 <tcp_bind+0x124>)
 800a212:	4836      	ldr	r0, [pc, #216]	; (800a2ec <tcp_bind+0x120>)
 800a214:	f008 fb32 	bl	801287c <iprintf>
 800a218:	f06f 0305 	mvn.w	r3, #5
 800a21c:	e05c      	b.n	800a2d8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800a21e:	88fb      	ldrh	r3, [r7, #6]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <tcp_bind+0x6c>
    port = tcp_new_port();
 800a224:	f000 f9f0 	bl	800a608 <tcp_new_port>
 800a228:	4603      	mov	r3, r0
 800a22a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d135      	bne.n	800a29e <tcp_bind+0xd2>
      return ERR_BUF;
 800a232:	f06f 0301 	mvn.w	r3, #1
 800a236:	e04f      	b.n	800a2d8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a238:	2300      	movs	r3, #0
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	e02b      	b.n	800a296 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a23e:	4a2d      	ldr	r2, [pc, #180]	; (800a2f4 <tcp_bind+0x128>)
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	e01e      	b.n	800a28a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	8adb      	ldrh	r3, [r3, #22]
 800a250:	88fa      	ldrh	r2, [r7, #6]
 800a252:	429a      	cmp	r2, r3
 800a254:	d116      	bne.n	800a284 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a256:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d010      	beq.n	800a27e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00c      	beq.n	800a27e <tcp_bind+0xb2>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d102      	bne.n	800a284 <tcp_bind+0xb8>
              return ERR_USE;
 800a27e:	f06f 0307 	mvn.w	r3, #7
 800a282:	e029      	b.n	800a2d8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1dd      	bne.n	800a24c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	3301      	adds	r3, #1
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	dbcf      	blt.n	800a23e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00c      	beq.n	800a2be <tcp_bind+0xf2>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <tcp_bind+0xec>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	e000      	b.n	800a2ba <tcp_bind+0xee>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <tcp_bind+0x12c>)
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	60da      	str	r2, [r3, #12]
 800a2cc:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <tcp_bind+0x12c>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	f005 fcc7 	bl	800fc64 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3720      	adds	r7, #32
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0801652c 	.word	0x0801652c
 800a2e4:	08014528 	.word	0x08014528
 800a2e8:	080146bc 	.word	0x080146bc
 800a2ec:	0801456c 	.word	0x0801456c
 800a2f0:	080146d4 	.word	0x080146d4
 800a2f4:	08016504 	.word	0x08016504
 800a2f8:	20011650 	.word	0x20011650

0800a2fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <tcp_accept_null+0x22>
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <tcp_accept_null+0x34>)
 800a312:	f240 320f 	movw	r2, #783	; 0x30f
 800a316:	4907      	ldr	r1, [pc, #28]	; (800a334 <tcp_accept_null+0x38>)
 800a318:	4807      	ldr	r0, [pc, #28]	; (800a338 <tcp_accept_null+0x3c>)
 800a31a:	f008 faaf 	bl	801287c <iprintf>

  tcp_abort(pcb);
 800a31e:	68b8      	ldr	r0, [r7, #8]
 800a320:	f7ff ff48 	bl	800a1b4 <tcp_abort>

  return ERR_ABRT;
 800a324:	f06f 030c 	mvn.w	r3, #12
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	08014528 	.word	0x08014528
 800a334:	080146fc 	.word	0x080146fc
 800a338:	0801456c 	.word	0x0801456c

0800a33c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	2200      	movs	r2, #0
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f806 	bl	800a360 <tcp_listen_with_backlog_and_err>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	460b      	mov	r3, r1
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d109      	bne.n	800a38c <tcp_listen_with_backlog_and_err+0x2c>
 800a378:	4b47      	ldr	r3, [pc, #284]	; (800a498 <tcp_listen_with_backlog_and_err+0x138>)
 800a37a:	f240 3259 	movw	r2, #857	; 0x359
 800a37e:	4947      	ldr	r1, [pc, #284]	; (800a49c <tcp_listen_with_backlog_and_err+0x13c>)
 800a380:	4847      	ldr	r0, [pc, #284]	; (800a4a0 <tcp_listen_with_backlog_and_err+0x140>)
 800a382:	f008 fa7b 	bl	801287c <iprintf>
 800a386:	23f0      	movs	r3, #240	; 0xf0
 800a388:	76fb      	strb	r3, [r7, #27]
 800a38a:	e079      	b.n	800a480 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	7d1b      	ldrb	r3, [r3, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <tcp_listen_with_backlog_and_err+0x48>
 800a394:	4b40      	ldr	r3, [pc, #256]	; (800a498 <tcp_listen_with_backlog_and_err+0x138>)
 800a396:	f240 325a 	movw	r2, #858	; 0x35a
 800a39a:	4942      	ldr	r1, [pc, #264]	; (800a4a4 <tcp_listen_with_backlog_and_err+0x144>)
 800a39c:	4840      	ldr	r0, [pc, #256]	; (800a4a0 <tcp_listen_with_backlog_and_err+0x140>)
 800a39e:	f008 fa6d 	bl	801287c <iprintf>
 800a3a2:	23f1      	movs	r3, #241	; 0xf1
 800a3a4:	76fb      	strb	r3, [r7, #27]
 800a3a6:	e06b      	b.n	800a480 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	7d1b      	ldrb	r3, [r3, #20]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d104      	bne.n	800a3ba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a3b4:	23f7      	movs	r3, #247	; 0xf7
 800a3b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a3b8:	e062      	b.n	800a480 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a3ba:	2002      	movs	r0, #2
 800a3bc:	f7fe fa82 	bl	80088c4 <memp_malloc>
 800a3c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a3c8:	23ff      	movs	r3, #255	; 0xff
 800a3ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a3cc:	e058      	b.n	800a480 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	691a      	ldr	r2, [r3, #16]
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8ada      	ldrh	r2, [r3, #22]
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7d5a      	ldrb	r2, [r3, #21]
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	7a5a      	ldrb	r2, [r3, #9]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	7ada      	ldrb	r2, [r3, #11]
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	7a9a      	ldrb	r2, [r3, #10]
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8adb      	ldrh	r3, [r3, #22]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d021      	beq.n	800a45e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a41a:	4b23      	ldr	r3, [pc, #140]	; (800a4a8 <tcp_listen_with_backlog_and_err+0x148>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d105      	bne.n	800a430 <tcp_listen_with_backlog_and_err+0xd0>
 800a424:	4b20      	ldr	r3, [pc, #128]	; (800a4a8 <tcp_listen_with_backlog_and_err+0x148>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	4a1f      	ldr	r2, [pc, #124]	; (800a4a8 <tcp_listen_with_backlog_and_err+0x148>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e013      	b.n	800a458 <tcp_listen_with_backlog_and_err+0xf8>
 800a430:	4b1d      	ldr	r3, [pc, #116]	; (800a4a8 <tcp_listen_with_backlog_and_err+0x148>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e00c      	b.n	800a452 <tcp_listen_with_backlog_and_err+0xf2>
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d104      	bne.n	800a44c <tcp_listen_with_backlog_and_err+0xec>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e005      	b.n	800a458 <tcp_listen_with_backlog_and_err+0xf8>
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ef      	bne.n	800a438 <tcp_listen_with_backlog_and_err+0xd8>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f7ff fbc0 	bl	8009be4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <tcp_listen_with_backlog_and_err+0x14c>)
 800a468:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a46a:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <tcp_listen_with_backlog_and_err+0x150>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	60da      	str	r2, [r3, #12]
 800a472:	4a0f      	ldr	r2, [pc, #60]	; (800a4b0 <tcp_listen_with_backlog_and_err+0x150>)
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	f005 fbf4 	bl	800fc64 <tcp_timer_needed>
  res = ERR_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7efa      	ldrb	r2, [r7, #27]
 800a48a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a48c:	69fb      	ldr	r3, [r7, #28]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	08014528 	.word	0x08014528
 800a49c:	0801471c 	.word	0x0801471c
 800a4a0:	0801456c 	.word	0x0801456c
 800a4a4:	0801474c 	.word	0x0801474c
 800a4a8:	20011650 	.word	0x20011650
 800a4ac:	0800a2fd 	.word	0x0800a2fd
 800a4b0:	2001164c 	.word	0x2001164c

0800a4b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <tcp_update_rcv_ann_wnd+0x1c>
 800a4c2:	4b25      	ldr	r3, [pc, #148]	; (800a558 <tcp_update_rcv_ann_wnd+0xa4>)
 800a4c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a4c8:	4924      	ldr	r1, [pc, #144]	; (800a55c <tcp_update_rcv_ann_wnd+0xa8>)
 800a4ca:	4825      	ldr	r0, [pc, #148]	; (800a560 <tcp_update_rcv_ann_wnd+0xac>)
 800a4cc:	f008 f9d6 	bl	801287c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a4e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a4e8:	bf28      	it	cs
 800a4ea:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 800a4ee:	b292      	uxth	r2, r2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	db08      	blt.n	800a50c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	e020      	b.n	800a54e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	dd03      	ble.n	800a522 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a520:	e014      	b.n	800a54c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a534:	d306      	bcc.n	800a544 <tcp_update_rcv_ann_wnd+0x90>
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <tcp_update_rcv_ann_wnd+0xa4>)
 800a538:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a53c:	4909      	ldr	r1, [pc, #36]	; (800a564 <tcp_update_rcv_ann_wnd+0xb0>)
 800a53e:	4808      	ldr	r0, [pc, #32]	; (800a560 <tcp_update_rcv_ann_wnd+0xac>)
 800a540:	f008 f99c 	bl	801287c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a54c:	2300      	movs	r3, #0
  }
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	08014528 	.word	0x08014528
 800a55c:	08014784 	.word	0x08014784
 800a560:	0801456c 	.word	0x0801456c
 800a564:	080147a8 	.word	0x080147a8

0800a568 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d107      	bne.n	800a58a <tcp_recved+0x22>
 800a57a:	4b1f      	ldr	r3, [pc, #124]	; (800a5f8 <tcp_recved+0x90>)
 800a57c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a580:	491e      	ldr	r1, [pc, #120]	; (800a5fc <tcp_recved+0x94>)
 800a582:	481f      	ldr	r0, [pc, #124]	; (800a600 <tcp_recved+0x98>)
 800a584:	f008 f97a 	bl	801287c <iprintf>
 800a588:	e032      	b.n	800a5f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	7d1b      	ldrb	r3, [r3, #20]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d106      	bne.n	800a5a0 <tcp_recved+0x38>
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <tcp_recved+0x90>)
 800a594:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a598:	491a      	ldr	r1, [pc, #104]	; (800a604 <tcp_recved+0x9c>)
 800a59a:	4819      	ldr	r0, [pc, #100]	; (800a600 <tcp_recved+0x98>)
 800a59c:	f008 f96e 	bl	801287c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5a4:	887b      	ldrh	r3, [r7, #2]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a5aa:	89fb      	ldrh	r3, [r7, #14]
 800a5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b0:	d804      	bhi.n	800a5bc <tcp_recved+0x54>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b6:	89fa      	ldrh	r2, [r7, #14]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d204      	bcs.n	800a5c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a5c4:	e002      	b.n	800a5cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	89fa      	ldrh	r2, [r7, #14]
 800a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ff71 	bl	800a4b4 <tcp_update_rcv_ann_wnd>
 800a5d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5da:	d309      	bcc.n	800a5f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	8b5b      	ldrh	r3, [r3, #26]
 800a5e0:	f043 0302 	orr.w	r3, r3, #2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f004 fbc6 	bl	800ed7c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	08014528 	.word	0x08014528
 800a5fc:	080147c4 	.word	0x080147c4
 800a600:	0801456c 	.word	0x0801456c
 800a604:	080147dc 	.word	0x080147dc

0800a608 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <tcp_new_port+0x84>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	b29a      	uxth	r2, r3
 800a61a:	4b1c      	ldr	r3, [pc, #112]	; (800a68c <tcp_new_port+0x84>)
 800a61c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a61e:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <tcp_new_port+0x84>)
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a626:	4293      	cmp	r3, r2
 800a628:	d103      	bne.n	800a632 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a62a:	4b18      	ldr	r3, [pc, #96]	; (800a68c <tcp_new_port+0x84>)
 800a62c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a630:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a632:	2300      	movs	r3, #0
 800a634:	71fb      	strb	r3, [r7, #7]
 800a636:	e01e      	b.n	800a676 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	4a15      	ldr	r2, [pc, #84]	; (800a690 <tcp_new_port+0x88>)
 800a63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	e011      	b.n	800a66a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	8ada      	ldrh	r2, [r3, #22]
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <tcp_new_port+0x84>)
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d108      	bne.n	800a664 <tcp_new_port+0x5c>
        n++;
 800a652:	88bb      	ldrh	r3, [r7, #4]
 800a654:	3301      	adds	r3, #1
 800a656:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a658:	88bb      	ldrh	r3, [r7, #4]
 800a65a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a65e:	d3d8      	bcc.n	800a612 <tcp_new_port+0xa>
          return 0;
 800a660:	2300      	movs	r3, #0
 800a662:	e00d      	b.n	800a680 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	603b      	str	r3, [r7, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1ea      	bne.n	800a646 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	3301      	adds	r3, #1
 800a674:	71fb      	strb	r3, [r7, #7]
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d9dd      	bls.n	800a638 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a67c:	4b03      	ldr	r3, [pc, #12]	; (800a68c <tcp_new_port+0x84>)
 800a67e:	881b      	ldrh	r3, [r3, #0]
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	2000001a 	.word	0x2000001a
 800a690:	08016504 	.word	0x08016504

0800a694 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a694:	b5b0      	push	{r4, r5, r7, lr}
 800a696:	b090      	sub	sp, #64	; 0x40
 800a698:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a6a0:	4b94      	ldr	r3, [pc, #592]	; (800a8f4 <tcp_slowtmr+0x260>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	4a93      	ldr	r2, [pc, #588]	; (800a8f4 <tcp_slowtmr+0x260>)
 800a6a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a6aa:	4b93      	ldr	r3, [pc, #588]	; (800a8f8 <tcp_slowtmr+0x264>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	4b91      	ldr	r3, [pc, #580]	; (800a8f8 <tcp_slowtmr+0x264>)
 800a6b4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a6ba:	4b90      	ldr	r3, [pc, #576]	; (800a8fc <tcp_slowtmr+0x268>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a6c0:	e29f      	b.n	800ac02 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	7d1b      	ldrb	r3, [r3, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <tcp_slowtmr+0x44>
 800a6ca:	4b8d      	ldr	r3, [pc, #564]	; (800a900 <tcp_slowtmr+0x26c>)
 800a6cc:	f240 42be 	movw	r2, #1214	; 0x4be
 800a6d0:	498c      	ldr	r1, [pc, #560]	; (800a904 <tcp_slowtmr+0x270>)
 800a6d2:	488d      	ldr	r0, [pc, #564]	; (800a908 <tcp_slowtmr+0x274>)
 800a6d4:	f008 f8d2 	bl	801287c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	7d1b      	ldrb	r3, [r3, #20]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d106      	bne.n	800a6ee <tcp_slowtmr+0x5a>
 800a6e0:	4b87      	ldr	r3, [pc, #540]	; (800a900 <tcp_slowtmr+0x26c>)
 800a6e2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a6e6:	4989      	ldr	r1, [pc, #548]	; (800a90c <tcp_slowtmr+0x278>)
 800a6e8:	4887      	ldr	r0, [pc, #540]	; (800a908 <tcp_slowtmr+0x274>)
 800a6ea:	f008 f8c7 	bl	801287c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	7d1b      	ldrb	r3, [r3, #20]
 800a6f2:	2b0a      	cmp	r3, #10
 800a6f4:	d106      	bne.n	800a704 <tcp_slowtmr+0x70>
 800a6f6:	4b82      	ldr	r3, [pc, #520]	; (800a900 <tcp_slowtmr+0x26c>)
 800a6f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a6fc:	4984      	ldr	r1, [pc, #528]	; (800a910 <tcp_slowtmr+0x27c>)
 800a6fe:	4882      	ldr	r0, [pc, #520]	; (800a908 <tcp_slowtmr+0x274>)
 800a700:	f008 f8bc 	bl	801287c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	7f9a      	ldrb	r2, [r3, #30]
 800a708:	4b7b      	ldr	r3, [pc, #492]	; (800a8f8 <tcp_slowtmr+0x264>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d105      	bne.n	800a71c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a71a:	e272      	b.n	800ac02 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a71c:	4b76      	ldr	r3, [pc, #472]	; (800a8f8 <tcp_slowtmr+0x264>)
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	7d1b      	ldrb	r3, [r3, #20]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d10a      	bne.n	800a74e <tcp_slowtmr+0xba>
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d905      	bls.n	800a74e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a746:	3301      	adds	r3, #1
 800a748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a74c:	e11e      	b.n	800a98c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a754:	2b0b      	cmp	r3, #11
 800a756:	d905      	bls.n	800a764 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a75c:	3301      	adds	r3, #1
 800a75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a762:	e113      	b.n	800a98c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d075      	beq.n	800a85a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a772:	2b00      	cmp	r3, #0
 800a774:	d006      	beq.n	800a784 <tcp_slowtmr+0xf0>
 800a776:	4b62      	ldr	r3, [pc, #392]	; (800a900 <tcp_slowtmr+0x26c>)
 800a778:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a77c:	4965      	ldr	r1, [pc, #404]	; (800a914 <tcp_slowtmr+0x280>)
 800a77e:	4862      	ldr	r0, [pc, #392]	; (800a908 <tcp_slowtmr+0x274>)
 800a780:	f008 f87c 	bl	801287c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <tcp_slowtmr+0x106>
 800a78c:	4b5c      	ldr	r3, [pc, #368]	; (800a900 <tcp_slowtmr+0x26c>)
 800a78e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a792:	4961      	ldr	r1, [pc, #388]	; (800a918 <tcp_slowtmr+0x284>)
 800a794:	485c      	ldr	r0, [pc, #368]	; (800a908 <tcp_slowtmr+0x274>)
 800a796:	f008 f871 	bl	801287c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a7a0:	2b0b      	cmp	r3, #11
 800a7a2:	d905      	bls.n	800a7b0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7ae:	e0ed      	b.n	800a98c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	4a58      	ldr	r2, [pc, #352]	; (800a91c <tcp_slowtmr+0x288>)
 800a7ba:	5cd3      	ldrb	r3, [r2, r3]
 800a7bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a7c4:	7c7a      	ldrb	r2, [r7, #17]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d907      	bls.n	800a7da <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a7e0:	7c7a      	ldrb	r2, [r7, #17]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	f200 80d2 	bhi.w	800a98c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d108      	bne.n	800a808 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7f8:	f005 f966 	bl	800fac8 <tcp_zero_window_probe>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d014      	beq.n	800a82c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a802:	2300      	movs	r3, #0
 800a804:	623b      	str	r3, [r7, #32]
 800a806:	e011      	b.n	800a82c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a80e:	4619      	mov	r1, r3
 800a810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a812:	f004 f82d 	bl	800e870 <tcp_split_unsent_seg>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d107      	bne.n	800a82c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a81c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a81e:	f004 faad 	bl	800ed7c <tcp_output>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 80ac 	beq.w	800a98c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a842:	2b06      	cmp	r3, #6
 800a844:	f200 80a2 	bhi.w	800a98c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a84e:	3301      	adds	r3, #1
 800a850:	b2da      	uxtb	r2, r3
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a858:	e098      	b.n	800a98c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a860:	2b00      	cmp	r3, #0
 800a862:	db0f      	blt.n	800a884 <tcp_slowtmr+0x1f0>
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a86a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a86e:	4293      	cmp	r3, r2
 800a870:	d008      	beq.n	800a884 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a878:	b29b      	uxth	r3, r3
 800a87a:	3301      	adds	r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b21a      	sxth	r2, r3
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a890:	429a      	cmp	r2, r3
 800a892:	db7b      	blt.n	800a98c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a896:	f004 fd63 	bl	800f360 <tcp_rexmit_rto_prepare>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <tcp_slowtmr+0x21c>
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d171      	bne.n	800a98c <tcp_slowtmr+0x2f8>
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d06d      	beq.n	800a98c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d03a      	beq.n	800a92e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8be:	2b0c      	cmp	r3, #12
 800a8c0:	bf28      	it	cs
 800a8c2:	230c      	movcs	r3, #12
 800a8c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a8cc:	10db      	asrs	r3, r3, #3
 800a8ce:	b21b      	sxth	r3, r3
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a8d8:	4413      	add	r3, r2
 800a8da:	7efa      	ldrb	r2, [r7, #27]
 800a8dc:	4910      	ldr	r1, [pc, #64]	; (800a920 <tcp_slowtmr+0x28c>)
 800a8de:	5c8a      	ldrb	r2, [r1, r2]
 800a8e0:	4093      	lsls	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	dc1a      	bgt.n	800a924 <tcp_slowtmr+0x290>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	b21a      	sxth	r2, r3
 800a8f2:	e019      	b.n	800a928 <tcp_slowtmr+0x294>
 800a8f4:	20011648 	.word	0x20011648
 800a8f8:	20000892 	.word	0x20000892
 800a8fc:	20011644 	.word	0x20011644
 800a900:	08014528 	.word	0x08014528
 800a904:	0801486c 	.word	0x0801486c
 800a908:	0801456c 	.word	0x0801456c
 800a90c:	08014898 	.word	0x08014898
 800a910:	080148c4 	.word	0x080148c4
 800a914:	080148f4 	.word	0x080148f4
 800a918:	08014928 	.word	0x08014928
 800a91c:	080164fc 	.word	0x080164fc
 800a920:	080164ec 	.word	0x080164ec
 800a924:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	2200      	movs	r2, #0
 800a932:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a940:	4293      	cmp	r3, r2
 800a942:	bf28      	it	cs
 800a944:	4613      	movcs	r3, r2
 800a946:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a948:	8a7b      	ldrh	r3, [r7, #18]
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	b29b      	uxth	r3, r3
 800a962:	429a      	cmp	r2, r3
 800a964:	d206      	bcs.n	800a974 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2200      	movs	r2, #0
 800a982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a988:	f004 fd5a 	bl	800f440 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	7d1b      	ldrb	r3, [r3, #20]
 800a990:	2b06      	cmp	r3, #6
 800a992:	d111      	bne.n	800a9b8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	8b5b      	ldrh	r3, [r3, #26]
 800a998:	f003 0310 	and.w	r3, r3, #16
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9a0:	4b9d      	ldr	r3, [pc, #628]	; (800ac18 <tcp_slowtmr+0x584>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b28      	cmp	r3, #40	; 0x28
 800a9ac:	d904      	bls.n	800a9b8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	7a5b      	ldrb	r3, [r3, #9]
 800a9bc:	f003 0308 	and.w	r3, r3, #8
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d04c      	beq.n	800aa5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d003      	beq.n	800a9d4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	d144      	bne.n	800aa5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9d4:	4b90      	ldr	r3, [pc, #576]	; (800ac18 <tcp_slowtmr+0x584>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a9e8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a9ec:	498b      	ldr	r1, [pc, #556]	; (800ac1c <tcp_slowtmr+0x588>)
 800a9ee:	fba1 1303 	umull	r1, r3, r1, r3
 800a9f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d90a      	bls.n	800aa0e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800aa02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa06:	3301      	adds	r3, #1
 800aa08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa0c:	e027      	b.n	800aa5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa0e:	4b82      	ldr	r3, [pc, #520]	; (800ac18 <tcp_slowtmr+0x584>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800aa24:	4618      	mov	r0, r3
 800aa26:	4b7e      	ldr	r3, [pc, #504]	; (800ac20 <tcp_slowtmr+0x58c>)
 800aa28:	fb03 f300 	mul.w	r3, r3, r0
 800aa2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800aa2e:	497b      	ldr	r1, [pc, #492]	; (800ac1c <tcp_slowtmr+0x588>)
 800aa30:	fba1 1303 	umull	r1, r3, r1, r3
 800aa34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d911      	bls.n	800aa5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800aa3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa3c:	f005 f804 	bl	800fa48 <tcp_keepalive>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800aa46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d107      	bne.n	800aa5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800aa54:	3301      	adds	r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d011      	beq.n	800aa8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800aa66:	4b6c      	ldr	r3, [pc, #432]	; (800ac18 <tcp_slowtmr+0x584>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aa76:	4619      	mov	r1, r3
 800aa78:	460b      	mov	r3, r1
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	440b      	add	r3, r1
 800aa7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d302      	bcc.n	800aa8a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800aa84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa86:	f000 fec1 	bl	800b80c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	7d1b      	ldrb	r3, [r3, #20]
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d10b      	bne.n	800aaaa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa92:	4b61      	ldr	r3, [pc, #388]	; (800ac18 <tcp_slowtmr+0x584>)
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b28      	cmp	r3, #40	; 0x28
 800aa9e:	d904      	bls.n	800aaaa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800aaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	7d1b      	ldrb	r3, [r3, #20]
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	d10b      	bne.n	800aaca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aab2:	4b59      	ldr	r3, [pc, #356]	; (800ac18 <tcp_slowtmr+0x584>)
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2bf0      	cmp	r3, #240	; 0xf0
 800aabe:	d904      	bls.n	800aaca <tcp_slowtmr+0x436>
        ++pcb_remove;
 800aac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aac4:	3301      	adds	r3, #1
 800aac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aaca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d060      	beq.n	800ab94 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800aada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aadc:	f000 fce2 	bl	800b4a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d010      	beq.n	800ab08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aae6:	4b4f      	ldr	r3, [pc, #316]	; (800ac24 <tcp_slowtmr+0x590>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d106      	bne.n	800aafe <tcp_slowtmr+0x46a>
 800aaf0:	4b4d      	ldr	r3, [pc, #308]	; (800ac28 <tcp_slowtmr+0x594>)
 800aaf2:	f240 526d 	movw	r2, #1389	; 0x56d
 800aaf6:	494d      	ldr	r1, [pc, #308]	; (800ac2c <tcp_slowtmr+0x598>)
 800aaf8:	484d      	ldr	r0, [pc, #308]	; (800ac30 <tcp_slowtmr+0x59c>)
 800aafa:	f007 febf 	bl	801287c <iprintf>
        prev->next = pcb->next;
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	60da      	str	r2, [r3, #12]
 800ab06:	e00f      	b.n	800ab28 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ab08:	4b46      	ldr	r3, [pc, #280]	; (800ac24 <tcp_slowtmr+0x590>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d006      	beq.n	800ab20 <tcp_slowtmr+0x48c>
 800ab12:	4b45      	ldr	r3, [pc, #276]	; (800ac28 <tcp_slowtmr+0x594>)
 800ab14:	f240 5271 	movw	r2, #1393	; 0x571
 800ab18:	4946      	ldr	r1, [pc, #280]	; (800ac34 <tcp_slowtmr+0x5a0>)
 800ab1a:	4845      	ldr	r0, [pc, #276]	; (800ac30 <tcp_slowtmr+0x59c>)
 800ab1c:	f007 feae 	bl	801287c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	4a3f      	ldr	r2, [pc, #252]	; (800ac24 <tcp_slowtmr+0x590>)
 800ab26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ab28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d013      	beq.n	800ab58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ab38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab40:	8ad2      	ldrh	r2, [r2, #22]
 800ab42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab44:	8b09      	ldrh	r1, [r1, #24]
 800ab46:	9102      	str	r1, [sp, #8]
 800ab48:	9201      	str	r2, [sp, #4]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	4622      	mov	r2, r4
 800ab50:	4601      	mov	r1, r0
 800ab52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab54:	f004 fec6 	bl	800f8e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	7d1b      	ldrb	r3, [r3, #20]
 800ab62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ab6e:	6838      	ldr	r0, [r7, #0]
 800ab70:	f7ff f838 	bl	8009be4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ab74:	4b30      	ldr	r3, [pc, #192]	; (800ac38 <tcp_slowtmr+0x5a4>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <tcp_slowtmr+0x4f6>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f06f 010c 	mvn.w	r1, #12
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ab8a:	4b2b      	ldr	r3, [pc, #172]	; (800ac38 <tcp_slowtmr+0x5a4>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d037      	beq.n	800ac02 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ab92:	e590      	b.n	800a6b6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	7f1b      	ldrb	r3, [r3, #28]
 800aba2:	3301      	adds	r3, #1
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	7f1a      	ldrb	r2, [r3, #28]
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	7f5b      	ldrb	r3, [r3, #29]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d325      	bcc.n	800ac02 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	2200      	movs	r2, #0
 800abba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800abbc:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <tcp_slowtmr+0x5a4>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <tcp_slowtmr+0x550>
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd4:	6912      	ldr	r2, [r2, #16]
 800abd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	4603      	mov	r3, r0
 800abde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800abe2:	e002      	b.n	800abea <tcp_slowtmr+0x556>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <tcp_slowtmr+0x5a4>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d000      	beq.n	800abf4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800abf2:	e560      	b.n	800a6b6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800abf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f004 f8bd 	bl	800ed7c <tcp_output>
  while (pcb != NULL) {
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f47f ad5c 	bne.w	800a6c2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ac0e:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <tcp_slowtmr+0x5a8>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ac14:	e067      	b.n	800ace6 <tcp_slowtmr+0x652>
 800ac16:	bf00      	nop
 800ac18:	20011648 	.word	0x20011648
 800ac1c:	10624dd3 	.word	0x10624dd3
 800ac20:	000124f8 	.word	0x000124f8
 800ac24:	20011644 	.word	0x20011644
 800ac28:	08014528 	.word	0x08014528
 800ac2c:	08014960 	.word	0x08014960
 800ac30:	0801456c 	.word	0x0801456c
 800ac34:	0801498c 	.word	0x0801498c
 800ac38:	20011640 	.word	0x20011640
 800ac3c:	20011654 	.word	0x20011654
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	7d1b      	ldrb	r3, [r3, #20]
 800ac44:	2b0a      	cmp	r3, #10
 800ac46:	d006      	beq.n	800ac56 <tcp_slowtmr+0x5c2>
 800ac48:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <tcp_slowtmr+0x664>)
 800ac4a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ac4e:	492b      	ldr	r1, [pc, #172]	; (800acfc <tcp_slowtmr+0x668>)
 800ac50:	482b      	ldr	r0, [pc, #172]	; (800ad00 <tcp_slowtmr+0x66c>)
 800ac52:	f007 fe13 	bl	801287c <iprintf>
    pcb_remove = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac5c:	4b29      	ldr	r3, [pc, #164]	; (800ad04 <tcp_slowtmr+0x670>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2bf0      	cmp	r3, #240	; 0xf0
 800ac68:	d904      	bls.n	800ac74 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ac6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac6e:	3301      	adds	r3, #1
 800ac70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ac74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d02f      	beq.n	800acdc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ac7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac7e:	f000 fc11 	bl	800b4a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d010      	beq.n	800acaa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ac88:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <tcp_slowtmr+0x674>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d106      	bne.n	800aca0 <tcp_slowtmr+0x60c>
 800ac92:	4b19      	ldr	r3, [pc, #100]	; (800acf8 <tcp_slowtmr+0x664>)
 800ac94:	f240 52af 	movw	r2, #1455	; 0x5af
 800ac98:	491c      	ldr	r1, [pc, #112]	; (800ad0c <tcp_slowtmr+0x678>)
 800ac9a:	4819      	ldr	r0, [pc, #100]	; (800ad00 <tcp_slowtmr+0x66c>)
 800ac9c:	f007 fdee 	bl	801287c <iprintf>
        prev->next = pcb->next;
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	60da      	str	r2, [r3, #12]
 800aca8:	e00f      	b.n	800acca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800acaa:	4b17      	ldr	r3, [pc, #92]	; (800ad08 <tcp_slowtmr+0x674>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d006      	beq.n	800acc2 <tcp_slowtmr+0x62e>
 800acb4:	4b10      	ldr	r3, [pc, #64]	; (800acf8 <tcp_slowtmr+0x664>)
 800acb6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800acba:	4915      	ldr	r1, [pc, #84]	; (800ad10 <tcp_slowtmr+0x67c>)
 800acbc:	4810      	ldr	r0, [pc, #64]	; (800ad00 <tcp_slowtmr+0x66c>)
 800acbe:	f007 fddd 	bl	801287c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	4a10      	ldr	r2, [pc, #64]	; (800ad08 <tcp_slowtmr+0x674>)
 800acc8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800acd4:	69f8      	ldr	r0, [r7, #28]
 800acd6:	f7fe ff85 	bl	8009be4 <tcp_free>
 800acda:	e004      	b.n	800ace6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1a9      	bne.n	800ac40 <tcp_slowtmr+0x5ac>
    }
  }
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	3730      	adds	r7, #48	; 0x30
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bdb0      	pop	{r4, r5, r7, pc}
 800acf6:	bf00      	nop
 800acf8:	08014528 	.word	0x08014528
 800acfc:	080149b8 	.word	0x080149b8
 800ad00:	0801456c 	.word	0x0801456c
 800ad04:	20011648 	.word	0x20011648
 800ad08:	20011654 	.word	0x20011654
 800ad0c:	080149e8 	.word	0x080149e8
 800ad10:	08014a10 	.word	0x08014a10

0800ad14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ad1a:	4b2d      	ldr	r3, [pc, #180]	; (800add0 <tcp_fasttmr+0xbc>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	4b2b      	ldr	r3, [pc, #172]	; (800add0 <tcp_fasttmr+0xbc>)
 800ad24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ad26:	4b2b      	ldr	r3, [pc, #172]	; (800add4 <tcp_fasttmr+0xc0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ad2c:	e048      	b.n	800adc0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	7f9a      	ldrb	r2, [r3, #30]
 800ad32:	4b27      	ldr	r3, [pc, #156]	; (800add0 <tcp_fasttmr+0xbc>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d03f      	beq.n	800adba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ad3a:	4b25      	ldr	r3, [pc, #148]	; (800add0 <tcp_fasttmr+0xbc>)
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8b5b      	ldrh	r3, [r3, #26]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d010      	beq.n	800ad70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	8b5b      	ldrh	r3, [r3, #26]
 800ad52:	f043 0302 	orr.w	r3, r3, #2
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f004 f80d 	bl	800ed7c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	8b5b      	ldrh	r3, [r3, #26]
 800ad66:	f023 0303 	bic.w	r3, r3, #3
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	8b5b      	ldrh	r3, [r3, #26]
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d009      	beq.n	800ad90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	8b5b      	ldrh	r3, [r3, #26]
 800ad80:	f023 0308 	bic.w	r3, r3, #8
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff f8be 	bl	8009f0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ad9e:	4b0e      	ldr	r3, [pc, #56]	; (800add8 <tcp_fasttmr+0xc4>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f819 	bl	800addc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800adaa:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <tcp_fasttmr+0xc4>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d000      	beq.n	800adb4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800adb2:	e7b8      	b.n	800ad26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	607b      	str	r3, [r7, #4]
 800adb8:	e002      	b.n	800adc0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1b3      	bne.n	800ad2e <tcp_fasttmr+0x1a>
    }
  }
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20000892 	.word	0x20000892
 800add4:	20011644 	.word	0x20011644
 800add8:	20011640 	.word	0x20011640

0800addc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <tcp_process_refused_data+0x22>
 800adea:	4b37      	ldr	r3, [pc, #220]	; (800aec8 <tcp_process_refused_data+0xec>)
 800adec:	f240 6209 	movw	r2, #1545	; 0x609
 800adf0:	4936      	ldr	r1, [pc, #216]	; (800aecc <tcp_process_refused_data+0xf0>)
 800adf2:	4837      	ldr	r0, [pc, #220]	; (800aed0 <tcp_process_refused_data+0xf4>)
 800adf4:	f007 fd42 	bl	801287c <iprintf>
 800adf8:	f06f 030f 	mvn.w	r3, #15
 800adfc:	e060      	b.n	800aec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae02:	7b5b      	ldrb	r3, [r3, #13]
 800ae04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <tcp_process_refused_data+0x58>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6918      	ldr	r0, [r3, #16]
 800ae26:	2300      	movs	r3, #0
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	47a0      	blx	r4
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73fb      	strb	r3, [r7, #15]
 800ae32:	e007      	b.n	800ae44 <tcp_process_refused_data+0x68>
 800ae34:	2300      	movs	r3, #0
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f000 f8c2 	bl	800afc4 <tcp_recv_null>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d12a      	bne.n	800aea2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	f003 0320 	and.w	r3, r3, #32
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d033      	beq.n	800aebe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5e:	d005      	beq.n	800ae6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae64:	3301      	adds	r3, #1
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00b      	beq.n	800ae8e <tcp_process_refused_data+0xb2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6918      	ldr	r0, [r3, #16]
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	47a0      	blx	r4
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e001      	b.n	800ae92 <tcp_process_refused_data+0xb6>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae96:	f113 0f0d 	cmn.w	r3, #13
 800ae9a:	d110      	bne.n	800aebe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ae9c:	f06f 030c 	mvn.w	r3, #12
 800aea0:	e00e      	b.n	800aec0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800aea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea6:	f113 0f0d 	cmn.w	r3, #13
 800aeaa:	d102      	bne.n	800aeb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aeac:	f06f 030c 	mvn.w	r3, #12
 800aeb0:	e006      	b.n	800aec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800aeb8:	f06f 0304 	mvn.w	r3, #4
 800aebc:	e000      	b.n	800aec0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd90      	pop	{r4, r7, pc}
 800aec8:	08014528 	.word	0x08014528
 800aecc:	08014a38 	.word	0x08014a38
 800aed0:	0801456c 	.word	0x0801456c

0800aed4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800aedc:	e007      	b.n	800aeee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f80a 	bl	800aefe <tcp_seg_free>
    seg = next;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1f4      	bne.n	800aede <tcp_segs_free+0xa>
  }
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00c      	beq.n	800af26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe fb31 	bl	8009580 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	2003      	movs	r0, #3
 800af22:	f7fd fd1b 	bl	800895c <memp_free>
  }
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d107      	bne.n	800af52 <tcp_setprio+0x22>
 800af42:	4b07      	ldr	r3, [pc, #28]	; (800af60 <tcp_setprio+0x30>)
 800af44:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800af48:	4906      	ldr	r1, [pc, #24]	; (800af64 <tcp_setprio+0x34>)
 800af4a:	4807      	ldr	r0, [pc, #28]	; (800af68 <tcp_setprio+0x38>)
 800af4c:	f007 fc96 	bl	801287c <iprintf>
 800af50:	e002      	b.n	800af58 <tcp_setprio+0x28>

  pcb->prio = prio;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	78fa      	ldrb	r2, [r7, #3]
 800af56:	755a      	strb	r2, [r3, #21]
}
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	08014528 	.word	0x08014528
 800af64:	08014a60 	.word	0x08014a60
 800af68:	0801456c 	.word	0x0801456c

0800af6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <tcp_seg_copy+0x1c>
 800af7a:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <tcp_seg_copy+0x4c>)
 800af7c:	f240 6282 	movw	r2, #1666	; 0x682
 800af80:	490e      	ldr	r1, [pc, #56]	; (800afbc <tcp_seg_copy+0x50>)
 800af82:	480f      	ldr	r0, [pc, #60]	; (800afc0 <tcp_seg_copy+0x54>)
 800af84:	f007 fc7a 	bl	801287c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800af88:	2003      	movs	r0, #3
 800af8a:	f7fd fc9b 	bl	80088c4 <memp_malloc>
 800af8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <tcp_seg_copy+0x2e>
    return NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	e00a      	b.n	800afb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800af9a:	2210      	movs	r2, #16
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f007 fc56 	bl	8012850 <memcpy>
  pbuf_ref(cseg->p);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe fb89 	bl	80096c0 <pbuf_ref>
  return cseg;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08014528 	.word	0x08014528
 800afbc:	08014a7c 	.word	0x08014a7c
 800afc0:	0801456c 	.word	0x0801456c

0800afc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d109      	bne.n	800afec <tcp_recv_null+0x28>
 800afd8:	4b12      	ldr	r3, [pc, #72]	; (800b024 <tcp_recv_null+0x60>)
 800afda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800afde:	4912      	ldr	r1, [pc, #72]	; (800b028 <tcp_recv_null+0x64>)
 800afe0:	4812      	ldr	r0, [pc, #72]	; (800b02c <tcp_recv_null+0x68>)
 800afe2:	f007 fc4b 	bl	801287c <iprintf>
 800afe6:	f06f 030f 	mvn.w	r3, #15
 800afea:	e016      	b.n	800b01a <tcp_recv_null+0x56>

  if (p != NULL) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d009      	beq.n	800b006 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	891b      	ldrh	r3, [r3, #8]
 800aff6:	4619      	mov	r1, r3
 800aff8:	68b8      	ldr	r0, [r7, #8]
 800affa:	f7ff fab5 	bl	800a568 <tcp_recved>
    pbuf_free(p);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7fe fabe 	bl	8009580 <pbuf_free>
 800b004:	e008      	b.n	800b018 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d104      	bne.n	800b018 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b00e:	68b8      	ldr	r0, [r7, #8]
 800b010:	f7fe ffe6 	bl	8009fe0 <tcp_close>
 800b014:	4603      	mov	r3, r0
 800b016:	e000      	b.n	800b01a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	08014528 	.word	0x08014528
 800b028:	08014a98 	.word	0x08014a98
 800b02c:	0801456c 	.word	0x0801456c

0800b030 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	db01      	blt.n	800b046 <tcp_kill_prio+0x16>
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	e000      	b.n	800b048 <tcp_kill_prio+0x18>
 800b046:	237f      	movs	r3, #127	; 0x7f
 800b048:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d034      	beq.n	800b0ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3b01      	subs	r3, #1
 800b054:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b05e:	4b19      	ldr	r3, [pc, #100]	; (800b0c4 <tcp_kill_prio+0x94>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	e01f      	b.n	800b0a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	7d5b      	ldrb	r3, [r3, #21]
 800b06a:	7afa      	ldrb	r2, [r7, #11]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d80c      	bhi.n	800b08a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b074:	7afa      	ldrb	r2, [r7, #11]
 800b076:	429a      	cmp	r2, r3
 800b078:	d112      	bne.n	800b0a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <tcp_kill_prio+0x98>)
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	429a      	cmp	r2, r3
 800b088:	d80a      	bhi.n	800b0a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b08a:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <tcp_kill_prio+0x98>)
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	7d5b      	ldrb	r3, [r3, #21]
 800b09e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1dc      	bne.n	800b066 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b0b2:	6938      	ldr	r0, [r7, #16]
 800b0b4:	f7ff f87e 	bl	800a1b4 <tcp_abort>
 800b0b8:	e000      	b.n	800b0bc <tcp_kill_prio+0x8c>
    return;
 800b0ba:	bf00      	nop
  }
}
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20011644 	.word	0x20011644
 800b0c8:	20011648 	.word	0x20011648

0800b0cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d009      	beq.n	800b0f0 <tcp_kill_state+0x24>
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	2b09      	cmp	r3, #9
 800b0e0:	d006      	beq.n	800b0f0 <tcp_kill_state+0x24>
 800b0e2:	4b1a      	ldr	r3, [pc, #104]	; (800b14c <tcp_kill_state+0x80>)
 800b0e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b0e8:	4919      	ldr	r1, [pc, #100]	; (800b150 <tcp_kill_state+0x84>)
 800b0ea:	481a      	ldr	r0, [pc, #104]	; (800b154 <tcp_kill_state+0x88>)
 800b0ec:	f007 fbc6 	bl	801287c <iprintf>

  inactivity = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0f8:	4b17      	ldr	r3, [pc, #92]	; (800b158 <tcp_kill_state+0x8c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e017      	b.n	800b130 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	79fa      	ldrb	r2, [r7, #7]
 800b106:	429a      	cmp	r2, r3
 800b108:	d10f      	bne.n	800b12a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b10a:	4b14      	ldr	r3, [pc, #80]	; (800b15c <tcp_kill_state+0x90>)
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	429a      	cmp	r2, r3
 800b118:	d807      	bhi.n	800b12a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b11a:	4b10      	ldr	r3, [pc, #64]	; (800b15c <tcp_kill_state+0x90>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e4      	bne.n	800b100 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b13c:	2100      	movs	r1, #0
 800b13e:	6938      	ldr	r0, [r7, #16]
 800b140:	f7fe ff7a 	bl	800a038 <tcp_abandon>
  }
}
 800b144:	bf00      	nop
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	08014528 	.word	0x08014528
 800b150:	08014ab4 	.word	0x08014ab4
 800b154:	0801456c 	.word	0x0801456c
 800b158:	20011644 	.word	0x20011644
 800b15c:	20011648 	.word	0x20011648

0800b160 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b16e:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <tcp_kill_timewait+0x58>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	e012      	b.n	800b19c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <tcp_kill_timewait+0x5c>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	429a      	cmp	r2, r3
 800b184:	d807      	bhi.n	800b196 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b186:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <tcp_kill_timewait+0x5c>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e9      	bne.n	800b176 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b1a8:	68b8      	ldr	r0, [r7, #8]
 800b1aa:	f7ff f803 	bl	800a1b4 <tcp_abort>
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20011654 	.word	0x20011654
 800b1bc:	20011648 	.word	0x20011648

0800b1c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b1c6:	4b10      	ldr	r3, [pc, #64]	; (800b208 <tcp_handle_closepend+0x48>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b1cc:	e014      	b.n	800b1f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	8b5b      	ldrh	r3, [r3, #26]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d009      	beq.n	800b1f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	8b5b      	ldrh	r3, [r3, #26]
 800b1e4:	f023 0308 	bic.w	r3, r3, #8
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7fe fe8c 	bl	8009f0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1e7      	bne.n	800b1ce <tcp_handle_closepend+0xe>
  }
}
 800b1fe:	bf00      	nop
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20011644 	.word	0x20011644

0800b20c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b216:	2001      	movs	r0, #1
 800b218:	f7fd fb54 	bl	80088c4 <memp_malloc>
 800b21c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d126      	bne.n	800b272 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b224:	f7ff ffcc 	bl	800b1c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b228:	f7ff ff9a 	bl	800b160 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b22c:	2001      	movs	r0, #1
 800b22e:	f7fd fb49 	bl	80088c4 <memp_malloc>
 800b232:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d11b      	bne.n	800b272 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b23a:	2009      	movs	r0, #9
 800b23c:	f7ff ff46 	bl	800b0cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b240:	2001      	movs	r0, #1
 800b242:	f7fd fb3f 	bl	80088c4 <memp_malloc>
 800b246:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d111      	bne.n	800b272 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b24e:	2008      	movs	r0, #8
 800b250:	f7ff ff3c 	bl	800b0cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b254:	2001      	movs	r0, #1
 800b256:	f7fd fb35 	bl	80088c4 <memp_malloc>
 800b25a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d107      	bne.n	800b272 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fee3 	bl	800b030 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b26a:	2001      	movs	r0, #1
 800b26c:	f7fd fb2a 	bl	80088c4 <memp_malloc>
 800b270:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d03f      	beq.n	800b2f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b278:	229c      	movs	r2, #156	; 0x9c
 800b27a:	2100      	movs	r1, #0
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f007 faf5 	bl	801286c <memset>
    pcb->prio = prio;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	79fa      	ldrb	r2, [r7, #7]
 800b286:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b28e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	22ff      	movs	r2, #255	; 0xff
 800b2a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b2ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2206      	movs	r2, #6
 800b2b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2206      	movs	r2, #6
 800b2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	; (800b304 <tcp_alloc+0xf8>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <tcp_alloc+0xfc>)
 800b2d8:	781a      	ldrb	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4a08      	ldr	r2, [pc, #32]	; (800b30c <tcp_alloc+0x100>)
 800b2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <tcp_alloc+0x104>)
 800b2f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20011648 	.word	0x20011648
 800b308:	20000892 	.word	0x20000892
 800b30c:	0800afc5 	.word	0x0800afc5
 800b310:	006ddd00 	.word	0x006ddd00

0800b314 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b318:	2040      	movs	r0, #64	; 0x40
 800b31a:	f7ff ff77 	bl	800b20c <tcp_alloc>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	bd80      	pop	{r7, pc}

0800b324 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	611a      	str	r2, [r3, #16]
  }
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
	...

0800b348 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00e      	beq.n	800b376 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d106      	bne.n	800b36e <tcp_recv+0x26>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <tcp_recv+0x38>)
 800b362:	f240 72df 	movw	r2, #2015	; 0x7df
 800b366:	4907      	ldr	r1, [pc, #28]	; (800b384 <tcp_recv+0x3c>)
 800b368:	4807      	ldr	r0, [pc, #28]	; (800b388 <tcp_recv+0x40>)
 800b36a:	f007 fa87 	bl	801287c <iprintf>
    pcb->recv = recv;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b376:	bf00      	nop
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	08014528 	.word	0x08014528
 800b384:	08014ac4 	.word	0x08014ac4
 800b388:	0801456c 	.word	0x0801456c

0800b38c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00e      	beq.n	800b3ba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7d1b      	ldrb	r3, [r3, #20]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d106      	bne.n	800b3b2 <tcp_sent+0x26>
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <tcp_sent+0x38>)
 800b3a6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b3aa:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <tcp_sent+0x3c>)
 800b3ac:	4807      	ldr	r0, [pc, #28]	; (800b3cc <tcp_sent+0x40>)
 800b3ae:	f007 fa65 	bl	801287c <iprintf>
    pcb->sent = sent;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	08014528 	.word	0x08014528
 800b3c8:	08014aec 	.word	0x08014aec
 800b3cc:	0801456c 	.word	0x0801456c

0800b3d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00e      	beq.n	800b3fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7d1b      	ldrb	r3, [r3, #20]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d106      	bne.n	800b3f6 <tcp_err+0x26>
 800b3e8:	4b07      	ldr	r3, [pc, #28]	; (800b408 <tcp_err+0x38>)
 800b3ea:	f640 020d 	movw	r2, #2061	; 0x80d
 800b3ee:	4907      	ldr	r1, [pc, #28]	; (800b40c <tcp_err+0x3c>)
 800b3f0:	4807      	ldr	r0, [pc, #28]	; (800b410 <tcp_err+0x40>)
 800b3f2:	f007 fa43 	bl	801287c <iprintf>
    pcb->errf = err;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	08014528 	.word	0x08014528
 800b40c:	08014b14 	.word	0x08014b14
 800b410:	0801456c 	.word	0x0801456c

0800b414 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d008      	beq.n	800b436 <tcp_accept+0x22>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7d1b      	ldrb	r3, [r3, #20]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d104      	bne.n	800b436 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	619a      	str	r2, [r3, #24]
  }
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <tcp_poll+0x24>
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <tcp_poll+0x50>)
 800b45a:	f640 023d 	movw	r2, #2109	; 0x83d
 800b45e:	490e      	ldr	r1, [pc, #56]	; (800b498 <tcp_poll+0x54>)
 800b460:	480e      	ldr	r0, [pc, #56]	; (800b49c <tcp_poll+0x58>)
 800b462:	f007 fa0b 	bl	801287c <iprintf>
 800b466:	e011      	b.n	800b48c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	7d1b      	ldrb	r3, [r3, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d106      	bne.n	800b47e <tcp_poll+0x3a>
 800b470:	4b08      	ldr	r3, [pc, #32]	; (800b494 <tcp_poll+0x50>)
 800b472:	f640 023e 	movw	r2, #2110	; 0x83e
 800b476:	490a      	ldr	r1, [pc, #40]	; (800b4a0 <tcp_poll+0x5c>)
 800b478:	4808      	ldr	r0, [pc, #32]	; (800b49c <tcp_poll+0x58>)
 800b47a:	f007 f9ff 	bl	801287c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	79fa      	ldrb	r2, [r7, #7]
 800b48a:	775a      	strb	r2, [r3, #29]
}
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	08014528 	.word	0x08014528
 800b498:	08014b3c 	.word	0x08014b3c
 800b49c:	0801456c 	.word	0x0801456c
 800b4a0:	08014b54 	.word	0x08014b54

0800b4a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d107      	bne.n	800b4c2 <tcp_pcb_purge+0x1e>
 800b4b2:	4b21      	ldr	r3, [pc, #132]	; (800b538 <tcp_pcb_purge+0x94>)
 800b4b4:	f640 0251 	movw	r2, #2129	; 0x851
 800b4b8:	4920      	ldr	r1, [pc, #128]	; (800b53c <tcp_pcb_purge+0x98>)
 800b4ba:	4821      	ldr	r0, [pc, #132]	; (800b540 <tcp_pcb_purge+0x9c>)
 800b4bc:	f007 f9de 	bl	801287c <iprintf>
 800b4c0:	e037      	b.n	800b532 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7d1b      	ldrb	r3, [r3, #20]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d033      	beq.n	800b532 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b4ce:	2b0a      	cmp	r3, #10
 800b4d0:	d02f      	beq.n	800b532 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d02b      	beq.n	800b532 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fe f84a 	bl	8009580 <pbuf_free>
      pcb->refused_data = NULL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f986 	bl	800b80c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b506:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff fce1 	bl	800aed4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff fcdc 	bl	800aed4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	66da      	str	r2, [r3, #108]	; 0x6c
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	08014528 	.word	0x08014528
 800b53c:	08014b74 	.word	0x08014b74
 800b540:	0801456c 	.word	0x0801456c

0800b544 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <tcp_pcb_remove+0x1e>
 800b554:	4b3e      	ldr	r3, [pc, #248]	; (800b650 <tcp_pcb_remove+0x10c>)
 800b556:	f640 0283 	movw	r2, #2179	; 0x883
 800b55a:	493e      	ldr	r1, [pc, #248]	; (800b654 <tcp_pcb_remove+0x110>)
 800b55c:	483e      	ldr	r0, [pc, #248]	; (800b658 <tcp_pcb_remove+0x114>)
 800b55e:	f007 f98d 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d106      	bne.n	800b576 <tcp_pcb_remove+0x32>
 800b568:	4b39      	ldr	r3, [pc, #228]	; (800b650 <tcp_pcb_remove+0x10c>)
 800b56a:	f640 0284 	movw	r2, #2180	; 0x884
 800b56e:	493b      	ldr	r1, [pc, #236]	; (800b65c <tcp_pcb_remove+0x118>)
 800b570:	4839      	ldr	r0, [pc, #228]	; (800b658 <tcp_pcb_remove+0x114>)
 800b572:	f007 f983 	bl	801287c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d105      	bne.n	800b58c <tcp_pcb_remove+0x48>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	e013      	b.n	800b5b4 <tcp_pcb_remove+0x70>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e00c      	b.n	800b5ae <tcp_pcb_remove+0x6a>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d104      	bne.n	800b5a8 <tcp_pcb_remove+0x64>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68da      	ldr	r2, [r3, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	60da      	str	r2, [r3, #12]
 800b5a6:	e005      	b.n	800b5b4 <tcp_pcb_remove+0x70>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1ef      	bne.n	800b594 <tcp_pcb_remove+0x50>
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b5ba:	6838      	ldr	r0, [r7, #0]
 800b5bc:	f7ff ff72 	bl	800b4a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	7d1b      	ldrb	r3, [r3, #20]
 800b5c4:	2b0a      	cmp	r3, #10
 800b5c6:	d013      	beq.n	800b5f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d00f      	beq.n	800b5f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	8b5b      	ldrh	r3, [r3, #26]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d009      	beq.n	800b5f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	8b5b      	ldrh	r3, [r3, #26]
 800b5e0:	f043 0302 	orr.w	r3, r3, #2
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b5ea:	6838      	ldr	r0, [r7, #0]
 800b5ec:	f003 fbc6 	bl	800ed7c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	7d1b      	ldrb	r3, [r3, #20]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d020      	beq.n	800b63a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <tcp_pcb_remove+0xca>
 800b600:	4b13      	ldr	r3, [pc, #76]	; (800b650 <tcp_pcb_remove+0x10c>)
 800b602:	f640 0293 	movw	r2, #2195	; 0x893
 800b606:	4916      	ldr	r1, [pc, #88]	; (800b660 <tcp_pcb_remove+0x11c>)
 800b608:	4813      	ldr	r0, [pc, #76]	; (800b658 <tcp_pcb_remove+0x114>)
 800b60a:	f007 f937 	bl	801287c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b612:	2b00      	cmp	r3, #0
 800b614:	d006      	beq.n	800b624 <tcp_pcb_remove+0xe0>
 800b616:	4b0e      	ldr	r3, [pc, #56]	; (800b650 <tcp_pcb_remove+0x10c>)
 800b618:	f640 0294 	movw	r2, #2196	; 0x894
 800b61c:	4911      	ldr	r1, [pc, #68]	; (800b664 <tcp_pcb_remove+0x120>)
 800b61e:	480e      	ldr	r0, [pc, #56]	; (800b658 <tcp_pcb_remove+0x114>)
 800b620:	f007 f92c 	bl	801287c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <tcp_pcb_remove+0xf6>
 800b62c:	4b08      	ldr	r3, [pc, #32]	; (800b650 <tcp_pcb_remove+0x10c>)
 800b62e:	f640 0296 	movw	r2, #2198	; 0x896
 800b632:	490d      	ldr	r1, [pc, #52]	; (800b668 <tcp_pcb_remove+0x124>)
 800b634:	4808      	ldr	r0, [pc, #32]	; (800b658 <tcp_pcb_remove+0x114>)
 800b636:	f007 f921 	bl	801287c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2200      	movs	r2, #0
 800b63e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08014528 	.word	0x08014528
 800b654:	08014b90 	.word	0x08014b90
 800b658:	0801456c 	.word	0x0801456c
 800b65c:	08014bac 	.word	0x08014bac
 800b660:	08014bcc 	.word	0x08014bcc
 800b664:	08014be4 	.word	0x08014be4
 800b668:	08014c00 	.word	0x08014c00

0800b66c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <tcp_next_iss+0x1c>
 800b67a:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <tcp_next_iss+0x38>)
 800b67c:	f640 02af 	movw	r2, #2223	; 0x8af
 800b680:	4909      	ldr	r1, [pc, #36]	; (800b6a8 <tcp_next_iss+0x3c>)
 800b682:	480a      	ldr	r0, [pc, #40]	; (800b6ac <tcp_next_iss+0x40>)
 800b684:	f007 f8fa 	bl	801287c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b688:	4b09      	ldr	r3, [pc, #36]	; (800b6b0 <tcp_next_iss+0x44>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	4b09      	ldr	r3, [pc, #36]	; (800b6b4 <tcp_next_iss+0x48>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4413      	add	r3, r2
 800b692:	4a07      	ldr	r2, [pc, #28]	; (800b6b0 <tcp_next_iss+0x44>)
 800b694:	6013      	str	r3, [r2, #0]
  return iss;
 800b696:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <tcp_next_iss+0x44>)
 800b698:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	08014528 	.word	0x08014528
 800b6a8:	08014c18 	.word	0x08014c18
 800b6ac:	0801456c 	.word	0x0801456c
 800b6b0:	2000001c 	.word	0x2000001c
 800b6b4:	20011648 	.word	0x20011648

0800b6b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d106      	bne.n	800b6da <tcp_eff_send_mss_netif+0x22>
 800b6cc:	4b14      	ldr	r3, [pc, #80]	; (800b720 <tcp_eff_send_mss_netif+0x68>)
 800b6ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b6d2:	4914      	ldr	r1, [pc, #80]	; (800b724 <tcp_eff_send_mss_netif+0x6c>)
 800b6d4:	4814      	ldr	r0, [pc, #80]	; (800b728 <tcp_eff_send_mss_netif+0x70>)
 800b6d6:	f007 f8d1 	bl	801287c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b6e0:	89fb      	ldrh	r3, [r7, #14]
 800b6e2:	e019      	b.n	800b718 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b6ea:	8afb      	ldrh	r3, [r7, #22]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d012      	beq.n	800b716 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b6f0:	2328      	movs	r3, #40	; 0x28
 800b6f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b6f4:	8afa      	ldrh	r2, [r7, #22]
 800b6f6:	8abb      	ldrh	r3, [r7, #20]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d904      	bls.n	800b706 <tcp_eff_send_mss_netif+0x4e>
 800b6fc:	8afa      	ldrh	r2, [r7, #22]
 800b6fe:	8abb      	ldrh	r3, [r7, #20]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	b29b      	uxth	r3, r3
 800b704:	e000      	b.n	800b708 <tcp_eff_send_mss_netif+0x50>
 800b706:	2300      	movs	r3, #0
 800b708:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b70a:	8a7a      	ldrh	r2, [r7, #18]
 800b70c:	89fb      	ldrh	r3, [r7, #14]
 800b70e:	4293      	cmp	r3, r2
 800b710:	bf28      	it	cs
 800b712:	4613      	movcs	r3, r2
 800b714:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b716:	89fb      	ldrh	r3, [r7, #14]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08014528 	.word	0x08014528
 800b724:	08014c34 	.word	0x08014c34
 800b728:	0801456c 	.word	0x0801456c

0800b72c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d119      	bne.n	800b774 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b740:	4b10      	ldr	r3, [pc, #64]	; (800b784 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b742:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b746:	4910      	ldr	r1, [pc, #64]	; (800b788 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b748:	4810      	ldr	r0, [pc, #64]	; (800b78c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b74a:	f007 f897 	bl	801287c <iprintf>

  while (pcb != NULL) {
 800b74e:	e011      	b.n	800b774 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d108      	bne.n	800b76e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7fe fd26 	bl	800a1b4 <tcp_abort>
      pcb = next;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e002      	b.n	800b774 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1ea      	bne.n	800b750 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	08014528 	.word	0x08014528
 800b788:	08014c5c 	.word	0x08014c5c
 800b78c:	0801456c 	.word	0x0801456c

0800b790 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d02a      	beq.n	800b7f6 <tcp_netif_ip_addr_changed+0x66>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d026      	beq.n	800b7f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <tcp_netif_ip_addr_changed+0x70>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ffbc 	bl	800b72c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b7b4:	4b13      	ldr	r3, [pc, #76]	; (800b804 <tcp_netif_ip_addr_changed+0x74>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff ffb6 	bl	800b72c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d017      	beq.n	800b7f6 <tcp_netif_ip_addr_changed+0x66>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d013      	beq.n	800b7f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <tcp_netif_ip_addr_changed+0x78>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e00c      	b.n	800b7f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d103      	bne.n	800b7ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1ef      	bne.n	800b7d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	20011644 	.word	0x20011644
 800b804:	20011650 	.word	0x20011650
 800b808:	2001164c 	.word	0x2001164c

0800b80c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d007      	beq.n	800b82c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff fb57 	bl	800aed4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b834:	b590      	push	{r4, r7, lr}
 800b836:	b08d      	sub	sp, #52	; 0x34
 800b838:	af04      	add	r7, sp, #16
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <tcp_input+0x1c>
 800b844:	4b9b      	ldr	r3, [pc, #620]	; (800bab4 <tcp_input+0x280>)
 800b846:	2283      	movs	r2, #131	; 0x83
 800b848:	499b      	ldr	r1, [pc, #620]	; (800bab8 <tcp_input+0x284>)
 800b84a:	489c      	ldr	r0, [pc, #624]	; (800babc <tcp_input+0x288>)
 800b84c:	f007 f816 	bl	801287c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4a9a      	ldr	r2, [pc, #616]	; (800bac0 <tcp_input+0x28c>)
 800b856:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	895b      	ldrh	r3, [r3, #10]
 800b85c:	2b13      	cmp	r3, #19
 800b85e:	f240 83c4 	bls.w	800bfea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b862:	4b98      	ldr	r3, [pc, #608]	; (800bac4 <tcp_input+0x290>)
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	4a97      	ldr	r2, [pc, #604]	; (800bac4 <tcp_input+0x290>)
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f006 f86d 	bl	801194c <ip4_addr_isbroadcast_u32>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	f040 83ba 	bne.w	800bfee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b87a:	4b92      	ldr	r3, [pc, #584]	; (800bac4 <tcp_input+0x290>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b882:	2be0      	cmp	r3, #224	; 0xe0
 800b884:	f000 83b3 	beq.w	800bfee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b888:	4b8d      	ldr	r3, [pc, #564]	; (800bac0 <tcp_input+0x28c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	899b      	ldrh	r3, [r3, #12]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4618      	mov	r0, r3
 800b892:	f7fc fbc1 	bl	8008018 <lwip_htons>
 800b896:	4603      	mov	r3, r0
 800b898:	0b1b      	lsrs	r3, r3, #12
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b8a2:	7cbb      	ldrb	r3, [r7, #18]
 800b8a4:	2b13      	cmp	r3, #19
 800b8a6:	f240 83a4 	bls.w	800bff2 <tcp_input+0x7be>
 800b8aa:	7cbb      	ldrb	r3, [r7, #18]
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	891b      	ldrh	r3, [r3, #8]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	f200 839d 	bhi.w	800bff2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b8b8:	7cbb      	ldrb	r3, [r7, #18]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	3b14      	subs	r3, #20
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	4b81      	ldr	r3, [pc, #516]	; (800bac8 <tcp_input+0x294>)
 800b8c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b8c4:	4b81      	ldr	r3, [pc, #516]	; (800bacc <tcp_input+0x298>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	895a      	ldrh	r2, [r3, #10]
 800b8ce:	7cbb      	ldrb	r3, [r7, #18]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d309      	bcc.n	800b8ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b8d6:	4b7c      	ldr	r3, [pc, #496]	; (800bac8 <tcp_input+0x294>)
 800b8d8:	881a      	ldrh	r2, [r3, #0]
 800b8da:	4b7d      	ldr	r3, [pc, #500]	; (800bad0 <tcp_input+0x29c>)
 800b8dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b8de:	7cbb      	ldrb	r3, [r7, #18]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7fd fdc6 	bl	8009474 <pbuf_remove_header>
 800b8e8:	e04e      	b.n	800b988 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <tcp_input+0xca>
 800b8f2:	4b70      	ldr	r3, [pc, #448]	; (800bab4 <tcp_input+0x280>)
 800b8f4:	22c2      	movs	r2, #194	; 0xc2
 800b8f6:	4977      	ldr	r1, [pc, #476]	; (800bad4 <tcp_input+0x2a0>)
 800b8f8:	4870      	ldr	r0, [pc, #448]	; (800babc <tcp_input+0x288>)
 800b8fa:	f006 ffbf 	bl	801287c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b8fe:	2114      	movs	r1, #20
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7fd fdb7 	bl	8009474 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	895a      	ldrh	r2, [r3, #10]
 800b90a:	4b71      	ldr	r3, [pc, #452]	; (800bad0 <tcp_input+0x29c>)
 800b90c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b90e:	4b6e      	ldr	r3, [pc, #440]	; (800bac8 <tcp_input+0x294>)
 800b910:	881a      	ldrh	r2, [r3, #0]
 800b912:	4b6f      	ldr	r3, [pc, #444]	; (800bad0 <tcp_input+0x29c>)
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b91a:	4b6d      	ldr	r3, [pc, #436]	; (800bad0 <tcp_input+0x29c>)
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7fd fda7 	bl	8009474 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	895b      	ldrh	r3, [r3, #10]
 800b92c:	8a3a      	ldrh	r2, [r7, #16]
 800b92e:	429a      	cmp	r2, r3
 800b930:	f200 8361 	bhi.w	800bff6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	4a64      	ldr	r2, [pc, #400]	; (800bacc <tcp_input+0x298>)
 800b93c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	8a3a      	ldrh	r2, [r7, #16]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7fd fd94 	bl	8009474 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	891a      	ldrh	r2, [r3, #8]
 800b950:	8a3b      	ldrh	r3, [r7, #16]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	b29a      	uxth	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	895b      	ldrh	r3, [r3, #10]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d005      	beq.n	800b96e <tcp_input+0x13a>
 800b962:	4b54      	ldr	r3, [pc, #336]	; (800bab4 <tcp_input+0x280>)
 800b964:	22df      	movs	r2, #223	; 0xdf
 800b966:	495c      	ldr	r1, [pc, #368]	; (800bad8 <tcp_input+0x2a4>)
 800b968:	4854      	ldr	r0, [pc, #336]	; (800babc <tcp_input+0x288>)
 800b96a:	f006 ff87 	bl	801287c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	891a      	ldrh	r2, [r3, #8]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	891b      	ldrh	r3, [r3, #8]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d005      	beq.n	800b988 <tcp_input+0x154>
 800b97c:	4b4d      	ldr	r3, [pc, #308]	; (800bab4 <tcp_input+0x280>)
 800b97e:	22e0      	movs	r2, #224	; 0xe0
 800b980:	4956      	ldr	r1, [pc, #344]	; (800badc <tcp_input+0x2a8>)
 800b982:	484e      	ldr	r0, [pc, #312]	; (800babc <tcp_input+0x288>)
 800b984:	f006 ff7a 	bl	801287c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b988:	4b4d      	ldr	r3, [pc, #308]	; (800bac0 <tcp_input+0x28c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	4a4b      	ldr	r2, [pc, #300]	; (800bac0 <tcp_input+0x28c>)
 800b992:	6814      	ldr	r4, [r2, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f7fc fb3f 	bl	8008018 <lwip_htons>
 800b99a:	4603      	mov	r3, r0
 800b99c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b99e:	4b48      	ldr	r3, [pc, #288]	; (800bac0 <tcp_input+0x28c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	885b      	ldrh	r3, [r3, #2]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	4a46      	ldr	r2, [pc, #280]	; (800bac0 <tcp_input+0x28c>)
 800b9a8:	6814      	ldr	r4, [r2, #0]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fc fb34 	bl	8008018 <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b9b4:	4b42      	ldr	r3, [pc, #264]	; (800bac0 <tcp_input+0x28c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4a41      	ldr	r2, [pc, #260]	; (800bac0 <tcp_input+0x28c>)
 800b9bc:	6814      	ldr	r4, [r2, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fc fb3f 	bl	8008042 <lwip_htonl>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	6863      	ldr	r3, [r4, #4]
 800b9ca:	4a45      	ldr	r2, [pc, #276]	; (800bae0 <tcp_input+0x2ac>)
 800b9cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b9ce:	4b3c      	ldr	r3, [pc, #240]	; (800bac0 <tcp_input+0x28c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	4a3a      	ldr	r2, [pc, #232]	; (800bac0 <tcp_input+0x28c>)
 800b9d6:	6814      	ldr	r4, [r2, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fc fb32 	bl	8008042 <lwip_htonl>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	4a3f      	ldr	r2, [pc, #252]	; (800bae4 <tcp_input+0x2b0>)
 800b9e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b9e8:	4b35      	ldr	r3, [pc, #212]	; (800bac0 <tcp_input+0x28c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	89db      	ldrh	r3, [r3, #14]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	4a33      	ldr	r2, [pc, #204]	; (800bac0 <tcp_input+0x28c>)
 800b9f2:	6814      	ldr	r4, [r2, #0]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fc fb0f 	bl	8008018 <lwip_htons>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b9fe:	4b30      	ldr	r3, [pc, #192]	; (800bac0 <tcp_input+0x28c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	899b      	ldrh	r3, [r3, #12]
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fc fb06 	bl	8008018 <lwip_htons>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	4b34      	ldr	r3, [pc, #208]	; (800bae8 <tcp_input+0x2b4>)
 800ba18:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	891a      	ldrh	r2, [r3, #8]
 800ba1e:	4b33      	ldr	r3, [pc, #204]	; (800baec <tcp_input+0x2b8>)
 800ba20:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ba22:	4b31      	ldr	r3, [pc, #196]	; (800bae8 <tcp_input+0x2b4>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00c      	beq.n	800ba48 <tcp_input+0x214>
    tcplen++;
 800ba2e:	4b2f      	ldr	r3, [pc, #188]	; (800baec <tcp_input+0x2b8>)
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	4b2d      	ldr	r3, [pc, #180]	; (800baec <tcp_input+0x2b8>)
 800ba38:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	891a      	ldrh	r2, [r3, #8]
 800ba3e:	4b2b      	ldr	r3, [pc, #172]	; (800baec <tcp_input+0x2b8>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	f200 82d9 	bhi.w	800bffa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba4c:	4b28      	ldr	r3, [pc, #160]	; (800baf0 <tcp_input+0x2bc>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	61fb      	str	r3, [r7, #28]
 800ba52:	e09d      	b.n	800bb90 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d105      	bne.n	800ba68 <tcp_input+0x234>
 800ba5c:	4b15      	ldr	r3, [pc, #84]	; (800bab4 <tcp_input+0x280>)
 800ba5e:	22fb      	movs	r2, #251	; 0xfb
 800ba60:	4924      	ldr	r1, [pc, #144]	; (800baf4 <tcp_input+0x2c0>)
 800ba62:	4816      	ldr	r0, [pc, #88]	; (800babc <tcp_input+0x288>)
 800ba64:	f006 ff0a 	bl	801287c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	7d1b      	ldrb	r3, [r3, #20]
 800ba6c:	2b0a      	cmp	r3, #10
 800ba6e:	d105      	bne.n	800ba7c <tcp_input+0x248>
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <tcp_input+0x280>)
 800ba72:	22fc      	movs	r2, #252	; 0xfc
 800ba74:	4920      	ldr	r1, [pc, #128]	; (800baf8 <tcp_input+0x2c4>)
 800ba76:	4811      	ldr	r0, [pc, #68]	; (800babc <tcp_input+0x288>)
 800ba78:	f006 ff00 	bl	801287c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	7d1b      	ldrb	r3, [r3, #20]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d105      	bne.n	800ba90 <tcp_input+0x25c>
 800ba84:	4b0b      	ldr	r3, [pc, #44]	; (800bab4 <tcp_input+0x280>)
 800ba86:	22fd      	movs	r2, #253	; 0xfd
 800ba88:	491c      	ldr	r1, [pc, #112]	; (800bafc <tcp_input+0x2c8>)
 800ba8a:	480c      	ldr	r0, [pc, #48]	; (800babc <tcp_input+0x288>)
 800ba8c:	f006 fef6 	bl	801287c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	7a1b      	ldrb	r3, [r3, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d033      	beq.n	800bb00 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	7a1a      	ldrb	r2, [r3, #8]
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <tcp_input+0x290>)
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baa4:	3301      	adds	r3, #1
 800baa6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d029      	beq.n	800bb00 <tcp_input+0x2cc>
      prev = pcb;
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	61bb      	str	r3, [r7, #24]
      continue;
 800bab0:	e06b      	b.n	800bb8a <tcp_input+0x356>
 800bab2:	bf00      	nop
 800bab4:	08014c90 	.word	0x08014c90
 800bab8:	08014cc4 	.word	0x08014cc4
 800babc:	08014cdc 	.word	0x08014cdc
 800bac0:	200008a4 	.word	0x200008a4
 800bac4:	20003ca0 	.word	0x20003ca0
 800bac8:	200008a8 	.word	0x200008a8
 800bacc:	200008ac 	.word	0x200008ac
 800bad0:	200008aa 	.word	0x200008aa
 800bad4:	08014d04 	.word	0x08014d04
 800bad8:	08014d14 	.word	0x08014d14
 800badc:	08014d20 	.word	0x08014d20
 800bae0:	200008b4 	.word	0x200008b4
 800bae4:	200008b8 	.word	0x200008b8
 800bae8:	200008c0 	.word	0x200008c0
 800baec:	200008be 	.word	0x200008be
 800baf0:	20011644 	.word	0x20011644
 800baf4:	08014d40 	.word	0x08014d40
 800baf8:	08014d68 	.word	0x08014d68
 800bafc:	08014d94 	.word	0x08014d94
    }

    if (pcb->remote_port == tcphdr->src &&
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	8b1a      	ldrh	r2, [r3, #24]
 800bb04:	4b94      	ldr	r3, [pc, #592]	; (800bd58 <tcp_input+0x524>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d13a      	bne.n	800bb86 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	8ada      	ldrh	r2, [r3, #22]
 800bb14:	4b90      	ldr	r3, [pc, #576]	; (800bd58 <tcp_input+0x524>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d132      	bne.n	800bb86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	4b8d      	ldr	r3, [pc, #564]	; (800bd5c <tcp_input+0x528>)
 800bb26:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d12c      	bne.n	800bb86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b8a      	ldr	r3, [pc, #552]	; (800bd5c <tcp_input+0x528>)
 800bb32:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d126      	bne.n	800bb86 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	69fa      	ldr	r2, [r7, #28]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d106      	bne.n	800bb50 <tcp_input+0x31c>
 800bb42:	4b87      	ldr	r3, [pc, #540]	; (800bd60 <tcp_input+0x52c>)
 800bb44:	f240 120d 	movw	r2, #269	; 0x10d
 800bb48:	4986      	ldr	r1, [pc, #536]	; (800bd64 <tcp_input+0x530>)
 800bb4a:	4887      	ldr	r0, [pc, #540]	; (800bd68 <tcp_input+0x534>)
 800bb4c:	f006 fe96 	bl	801287c <iprintf>
      if (prev != NULL) {
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00a      	beq.n	800bb6c <tcp_input+0x338>
        prev->next = pcb->next;
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bb5e:	4b83      	ldr	r3, [pc, #524]	; (800bd6c <tcp_input+0x538>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bb66:	4a81      	ldr	r2, [pc, #516]	; (800bd6c <tcp_input+0x538>)
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d111      	bne.n	800bb9a <tcp_input+0x366>
 800bb76:	4b7a      	ldr	r3, [pc, #488]	; (800bd60 <tcp_input+0x52c>)
 800bb78:	f240 1215 	movw	r2, #277	; 0x115
 800bb7c:	497c      	ldr	r1, [pc, #496]	; (800bd70 <tcp_input+0x53c>)
 800bb7e:	487a      	ldr	r0, [pc, #488]	; (800bd68 <tcp_input+0x534>)
 800bb80:	f006 fe7c 	bl	801287c <iprintf>
      break;
 800bb84:	e009      	b.n	800bb9a <tcp_input+0x366>
    }
    prev = pcb;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f47f af5e 	bne.w	800ba54 <tcp_input+0x220>
 800bb98:	e000      	b.n	800bb9c <tcp_input+0x368>
      break;
 800bb9a:	bf00      	nop
  }

  if (pcb == NULL) {
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f040 8095 	bne.w	800bcce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bba4:	4b73      	ldr	r3, [pc, #460]	; (800bd74 <tcp_input+0x540>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	e03f      	b.n	800bc2c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	7d1b      	ldrb	r3, [r3, #20]
 800bbb0:	2b0a      	cmp	r3, #10
 800bbb2:	d006      	beq.n	800bbc2 <tcp_input+0x38e>
 800bbb4:	4b6a      	ldr	r3, [pc, #424]	; (800bd60 <tcp_input+0x52c>)
 800bbb6:	f240 121f 	movw	r2, #287	; 0x11f
 800bbba:	496f      	ldr	r1, [pc, #444]	; (800bd78 <tcp_input+0x544>)
 800bbbc:	486a      	ldr	r0, [pc, #424]	; (800bd68 <tcp_input+0x534>)
 800bbbe:	f006 fe5d 	bl	801287c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	7a1b      	ldrb	r3, [r3, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d009      	beq.n	800bbde <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	7a1a      	ldrb	r2, [r3, #8]
 800bbce:	4b63      	ldr	r3, [pc, #396]	; (800bd5c <tcp_input+0x528>)
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d122      	bne.n	800bc24 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	8b1a      	ldrh	r2, [r3, #24]
 800bbe2:	4b5d      	ldr	r3, [pc, #372]	; (800bd58 <tcp_input+0x524>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d11b      	bne.n	800bc26 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	8ada      	ldrh	r2, [r3, #22]
 800bbf2:	4b59      	ldr	r3, [pc, #356]	; (800bd58 <tcp_input+0x524>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	885b      	ldrh	r3, [r3, #2]
 800bbf8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d113      	bne.n	800bc26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	4b56      	ldr	r3, [pc, #344]	; (800bd5c <tcp_input+0x528>)
 800bc04:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d10d      	bne.n	800bc26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b53      	ldr	r3, [pc, #332]	; (800bd5c <tcp_input+0x528>)
 800bc10:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d107      	bne.n	800bc26 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bc16:	69f8      	ldr	r0, [r7, #28]
 800bc18:	f000 fb54 	bl	800c2c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7fd fcaf 	bl	8009580 <pbuf_free>
        return;
 800bc22:	e1f0      	b.n	800c006 <tcp_input+0x7d2>
        continue;
 800bc24:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1bc      	bne.n	800bbac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc36:	4b51      	ldr	r3, [pc, #324]	; (800bd7c <tcp_input+0x548>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e02a      	b.n	800bc94 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	7a1b      	ldrb	r3, [r3, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00c      	beq.n	800bc60 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	7a1a      	ldrb	r2, [r3, #8]
 800bc4a:	4b44      	ldr	r3, [pc, #272]	; (800bd5c <tcp_input+0x528>)
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d002      	beq.n	800bc60 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	61bb      	str	r3, [r7, #24]
        continue;
 800bc5e:	e016      	b.n	800bc8e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	8ada      	ldrh	r2, [r3, #22]
 800bc64:	4b3c      	ldr	r3, [pc, #240]	; (800bd58 <tcp_input+0x524>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	885b      	ldrh	r3, [r3, #2]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d10c      	bne.n	800bc8a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	4b39      	ldr	r3, [pc, #228]	; (800bd5c <tcp_input+0x528>)
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d00f      	beq.n	800bc9c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00d      	beq.n	800bc9e <tcp_input+0x46a>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	617b      	str	r3, [r7, #20]
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1d1      	bne.n	800bc3e <tcp_input+0x40a>
 800bc9a:	e000      	b.n	800bc9e <tcp_input+0x46a>
            break;
 800bc9c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d014      	beq.n	800bcce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bcb2:	4b32      	ldr	r3, [pc, #200]	; (800bd7c <tcp_input+0x548>)
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bcba:	4a30      	ldr	r2, [pc, #192]	; (800bd7c <tcp_input+0x548>)
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bcc0:	6978      	ldr	r0, [r7, #20]
 800bcc2:	f000 fa01 	bl	800c0c8 <tcp_listen_input>
      }
      pbuf_free(p);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7fd fc5a 	bl	8009580 <pbuf_free>
      return;
 800bccc:	e19b      	b.n	800c006 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 8160 	beq.w	800bf96 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bcd6:	4b2a      	ldr	r3, [pc, #168]	; (800bd80 <tcp_input+0x54c>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	891a      	ldrh	r2, [r3, #8]
 800bce0:	4b27      	ldr	r3, [pc, #156]	; (800bd80 <tcp_input+0x54c>)
 800bce2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bce4:	4a26      	ldr	r2, [pc, #152]	; (800bd80 <tcp_input+0x54c>)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bcea:	4b1b      	ldr	r3, [pc, #108]	; (800bd58 <tcp_input+0x524>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a24      	ldr	r2, [pc, #144]	; (800bd80 <tcp_input+0x54c>)
 800bcf0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bcf2:	4b24      	ldr	r3, [pc, #144]	; (800bd84 <tcp_input+0x550>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bcf8:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <tcp_input+0x554>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bcfe:	4b23      	ldr	r3, [pc, #140]	; (800bd8c <tcp_input+0x558>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bd04:	4b22      	ldr	r3, [pc, #136]	; (800bd90 <tcp_input+0x55c>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	f003 0308 	and.w	r3, r3, #8
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d006      	beq.n	800bd1e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7b5b      	ldrb	r3, [r3, #13]
 800bd14:	f043 0301 	orr.w	r3, r3, #1
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d038      	beq.n	800bd98 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd26:	69f8      	ldr	r0, [r7, #28]
 800bd28:	f7ff f858 	bl	800addc <tcp_process_refused_data>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f113 0f0d 	cmn.w	r3, #13
 800bd32:	d007      	beq.n	800bd44 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d02d      	beq.n	800bd98 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd3c:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <tcp_input+0x560>)
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d029      	beq.n	800bd98 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f040 8104 	bne.w	800bf56 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bd4e:	69f8      	ldr	r0, [r7, #28]
 800bd50:	f003 fe18 	bl	800f984 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bd54:	e0ff      	b.n	800bf56 <tcp_input+0x722>
 800bd56:	bf00      	nop
 800bd58:	200008a4 	.word	0x200008a4
 800bd5c:	20003ca0 	.word	0x20003ca0
 800bd60:	08014c90 	.word	0x08014c90
 800bd64:	08014dbc 	.word	0x08014dbc
 800bd68:	08014cdc 	.word	0x08014cdc
 800bd6c:	20011644 	.word	0x20011644
 800bd70:	08014de8 	.word	0x08014de8
 800bd74:	20011654 	.word	0x20011654
 800bd78:	08014e14 	.word	0x08014e14
 800bd7c:	2001164c 	.word	0x2001164c
 800bd80:	20000894 	.word	0x20000894
 800bd84:	200008c4 	.word	0x200008c4
 800bd88:	200008c1 	.word	0x200008c1
 800bd8c:	200008bc 	.word	0x200008bc
 800bd90:	200008c0 	.word	0x200008c0
 800bd94:	200008be 	.word	0x200008be
      }
    }
    tcp_input_pcb = pcb;
 800bd98:	4a9c      	ldr	r2, [pc, #624]	; (800c00c <tcp_input+0x7d8>)
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bd9e:	69f8      	ldr	r0, [r7, #28]
 800bda0:	f000 fb0a 	bl	800c3b8 <tcp_process>
 800bda4:	4603      	mov	r3, r0
 800bda6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bda8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdac:	f113 0f0d 	cmn.w	r3, #13
 800bdb0:	f000 80d3 	beq.w	800bf5a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800bdb4:	4b96      	ldr	r3, [pc, #600]	; (800c010 <tcp_input+0x7dc>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 0308 	and.w	r3, r3, #8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d015      	beq.n	800bdec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d008      	beq.n	800bddc <tcp_input+0x5a8>
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd0:	69fa      	ldr	r2, [r7, #28]
 800bdd2:	6912      	ldr	r2, [r2, #16]
 800bdd4:	f06f 010d 	mvn.w	r1, #13
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bddc:	69f9      	ldr	r1, [r7, #28]
 800bdde:	488d      	ldr	r0, [pc, #564]	; (800c014 <tcp_input+0x7e0>)
 800bde0:	f7ff fbb0 	bl	800b544 <tcp_pcb_remove>
        tcp_free(pcb);
 800bde4:	69f8      	ldr	r0, [r7, #28]
 800bde6:	f7fd fefd 	bl	8009be4 <tcp_free>
 800bdea:	e0c1      	b.n	800bf70 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bdf0:	4b89      	ldr	r3, [pc, #548]	; (800c018 <tcp_input+0x7e4>)
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d01d      	beq.n	800be34 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bdf8:	4b87      	ldr	r3, [pc, #540]	; (800c018 <tcp_input+0x7e4>)
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <tcp_input+0x5ea>
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	6910      	ldr	r0, [r2, #16]
 800be12:	89fa      	ldrh	r2, [r7, #14]
 800be14:	69f9      	ldr	r1, [r7, #28]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	74fb      	strb	r3, [r7, #19]
 800be1c:	e001      	b.n	800be22 <tcp_input+0x5ee>
 800be1e:	2300      	movs	r3, #0
 800be20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800be22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be26:	f113 0f0d 	cmn.w	r3, #13
 800be2a:	f000 8098 	beq.w	800bf5e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800be2e:	4b7a      	ldr	r3, [pc, #488]	; (800c018 <tcp_input+0x7e4>)
 800be30:	2200      	movs	r2, #0
 800be32:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800be34:	69f8      	ldr	r0, [r7, #28]
 800be36:	f000 f907 	bl	800c048 <tcp_input_delayed_close>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f040 8090 	bne.w	800bf62 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800be42:	4b76      	ldr	r3, [pc, #472]	; (800c01c <tcp_input+0x7e8>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d041      	beq.n	800bece <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d006      	beq.n	800be60 <tcp_input+0x62c>
 800be52:	4b73      	ldr	r3, [pc, #460]	; (800c020 <tcp_input+0x7ec>)
 800be54:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800be58:	4972      	ldr	r1, [pc, #456]	; (800c024 <tcp_input+0x7f0>)
 800be5a:	4873      	ldr	r0, [pc, #460]	; (800c028 <tcp_input+0x7f4>)
 800be5c:	f006 fd0e 	bl	801287c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	8b5b      	ldrh	r3, [r3, #26]
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800be6c:	4b6b      	ldr	r3, [pc, #428]	; (800c01c <tcp_input+0x7e8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f7fd fb85 	bl	8009580 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800be76:	69f8      	ldr	r0, [r7, #28]
 800be78:	f7fe f99c 	bl	800a1b4 <tcp_abort>
            goto aborted;
 800be7c:	e078      	b.n	800bf70 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00c      	beq.n	800bea2 <tcp_input+0x66e>
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	6918      	ldr	r0, [r3, #16]
 800be92:	4b62      	ldr	r3, [pc, #392]	; (800c01c <tcp_input+0x7e8>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	2300      	movs	r3, #0
 800be98:	69f9      	ldr	r1, [r7, #28]
 800be9a:	47a0      	blx	r4
 800be9c:	4603      	mov	r3, r0
 800be9e:	74fb      	strb	r3, [r7, #19]
 800bea0:	e008      	b.n	800beb4 <tcp_input+0x680>
 800bea2:	4b5e      	ldr	r3, [pc, #376]	; (800c01c <tcp_input+0x7e8>)
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	2300      	movs	r3, #0
 800bea8:	69f9      	ldr	r1, [r7, #28]
 800beaa:	2000      	movs	r0, #0
 800beac:	f7ff f88a 	bl	800afc4 <tcp_recv_null>
 800beb0:	4603      	mov	r3, r0
 800beb2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800beb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beb8:	f113 0f0d 	cmn.w	r3, #13
 800bebc:	d053      	beq.n	800bf66 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bec6:	4b55      	ldr	r3, [pc, #340]	; (800c01c <tcp_input+0x7e8>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bece:	4b50      	ldr	r3, [pc, #320]	; (800c010 <tcp_input+0x7dc>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0320 	and.w	r3, r3, #32
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d030      	beq.n	800bf3c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d009      	beq.n	800bef6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee6:	7b5a      	ldrb	r2, [r3, #13]
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beec:	f042 0220 	orr.w	r2, r2, #32
 800bef0:	b2d2      	uxtb	r2, r2
 800bef2:	735a      	strb	r2, [r3, #13]
 800bef4:	e022      	b.n	800bf3c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800befa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befe:	d005      	beq.n	800bf0c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf04:	3301      	adds	r3, #1
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <tcp_input+0x6fa>
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	6918      	ldr	r0, [r3, #16]
 800bf20:	2300      	movs	r3, #0
 800bf22:	2200      	movs	r2, #0
 800bf24:	69f9      	ldr	r1, [r7, #28]
 800bf26:	47a0      	blx	r4
 800bf28:	4603      	mov	r3, r0
 800bf2a:	74fb      	strb	r3, [r7, #19]
 800bf2c:	e001      	b.n	800bf32 <tcp_input+0x6fe>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bf32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf36:	f113 0f0d 	cmn.w	r3, #13
 800bf3a:	d016      	beq.n	800bf6a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bf3c:	4b33      	ldr	r3, [pc, #204]	; (800c00c <tcp_input+0x7d8>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bf42:	69f8      	ldr	r0, [r7, #28]
 800bf44:	f000 f880 	bl	800c048 <tcp_input_delayed_close>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10f      	bne.n	800bf6e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bf4e:	69f8      	ldr	r0, [r7, #28]
 800bf50:	f002 ff14 	bl	800ed7c <tcp_output>
 800bf54:	e00c      	b.n	800bf70 <tcp_input+0x73c>
        goto aborted;
 800bf56:	bf00      	nop
 800bf58:	e00a      	b.n	800bf70 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bf5a:	bf00      	nop
 800bf5c:	e008      	b.n	800bf70 <tcp_input+0x73c>
              goto aborted;
 800bf5e:	bf00      	nop
 800bf60:	e006      	b.n	800bf70 <tcp_input+0x73c>
          goto aborted;
 800bf62:	bf00      	nop
 800bf64:	e004      	b.n	800bf70 <tcp_input+0x73c>
            goto aborted;
 800bf66:	bf00      	nop
 800bf68:	e002      	b.n	800bf70 <tcp_input+0x73c>
              goto aborted;
 800bf6a:	bf00      	nop
 800bf6c:	e000      	b.n	800bf70 <tcp_input+0x73c>
          goto aborted;
 800bf6e:	bf00      	nop
    tcp_input_pcb = NULL;
 800bf70:	4b26      	ldr	r3, [pc, #152]	; (800c00c <tcp_input+0x7d8>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bf76:	4b29      	ldr	r3, [pc, #164]	; (800c01c <tcp_input+0x7e8>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bf7c:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <tcp_input+0x7f8>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d03f      	beq.n	800c004 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800bf84:	4b29      	ldr	r3, [pc, #164]	; (800c02c <tcp_input+0x7f8>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fd faf9 	bl	8009580 <pbuf_free>
      inseg.p = NULL;
 800bf8e:	4b27      	ldr	r3, [pc, #156]	; (800c02c <tcp_input+0x7f8>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bf94:	e036      	b.n	800c004 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf96:	4b26      	ldr	r3, [pc, #152]	; (800c030 <tcp_input+0x7fc>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	899b      	ldrh	r3, [r3, #12]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fc f83a 	bl	8008018 <lwip_htons>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d118      	bne.n	800bfe2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfb0:	4b20      	ldr	r3, [pc, #128]	; (800c034 <tcp_input+0x800>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	4b20      	ldr	r3, [pc, #128]	; (800c038 <tcp_input+0x804>)
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4b20      	ldr	r3, [pc, #128]	; (800c03c <tcp_input+0x808>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfc0:	4b1b      	ldr	r3, [pc, #108]	; (800c030 <tcp_input+0x7fc>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfc8:	4a19      	ldr	r2, [pc, #100]	; (800c030 <tcp_input+0x7fc>)
 800bfca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfcc:	8812      	ldrh	r2, [r2, #0]
 800bfce:	b292      	uxth	r2, r2
 800bfd0:	9202      	str	r2, [sp, #8]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <tcp_input+0x80c>)
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	4b1a      	ldr	r3, [pc, #104]	; (800c044 <tcp_input+0x810>)
 800bfda:	4602      	mov	r2, r0
 800bfdc:	2000      	movs	r0, #0
 800bfde:	f003 fc81 	bl	800f8e4 <tcp_rst>
    pbuf_free(p);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7fd facc 	bl	8009580 <pbuf_free>
  return;
 800bfe8:	e00c      	b.n	800c004 <tcp_input+0x7d0>
    goto dropped;
 800bfea:	bf00      	nop
 800bfec:	e006      	b.n	800bffc <tcp_input+0x7c8>
    goto dropped;
 800bfee:	bf00      	nop
 800bff0:	e004      	b.n	800bffc <tcp_input+0x7c8>
    goto dropped;
 800bff2:	bf00      	nop
 800bff4:	e002      	b.n	800bffc <tcp_input+0x7c8>
      goto dropped;
 800bff6:	bf00      	nop
 800bff8:	e000      	b.n	800bffc <tcp_input+0x7c8>
      goto dropped;
 800bffa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7fd fabf 	bl	8009580 <pbuf_free>
 800c002:	e000      	b.n	800c006 <tcp_input+0x7d2>
  return;
 800c004:	bf00      	nop
}
 800c006:	3724      	adds	r7, #36	; 0x24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd90      	pop	{r4, r7, pc}
 800c00c:	20011658 	.word	0x20011658
 800c010:	200008c1 	.word	0x200008c1
 800c014:	20011644 	.word	0x20011644
 800c018:	200008bc 	.word	0x200008bc
 800c01c:	200008c4 	.word	0x200008c4
 800c020:	08014c90 	.word	0x08014c90
 800c024:	08014e44 	.word	0x08014e44
 800c028:	08014cdc 	.word	0x08014cdc
 800c02c:	20000894 	.word	0x20000894
 800c030:	200008a4 	.word	0x200008a4
 800c034:	200008b8 	.word	0x200008b8
 800c038:	200008be 	.word	0x200008be
 800c03c:	200008b4 	.word	0x200008b4
 800c040:	20003cb0 	.word	0x20003cb0
 800c044:	20003cb4 	.word	0x20003cb4

0800c048 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <tcp_input_delayed_close+0x1c>
 800c056:	4b17      	ldr	r3, [pc, #92]	; (800c0b4 <tcp_input_delayed_close+0x6c>)
 800c058:	f240 225a 	movw	r2, #602	; 0x25a
 800c05c:	4916      	ldr	r1, [pc, #88]	; (800c0b8 <tcp_input_delayed_close+0x70>)
 800c05e:	4817      	ldr	r0, [pc, #92]	; (800c0bc <tcp_input_delayed_close+0x74>)
 800c060:	f006 fc0c 	bl	801287c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c064:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <tcp_input_delayed_close+0x78>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01c      	beq.n	800c0aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	8b5b      	ldrh	r3, [r3, #26]
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10d      	bne.n	800c098 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c082:	2b00      	cmp	r3, #0
 800c084:	d008      	beq.n	800c098 <tcp_input_delayed_close+0x50>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	6912      	ldr	r2, [r2, #16]
 800c090:	f06f 010e 	mvn.w	r1, #14
 800c094:	4610      	mov	r0, r2
 800c096:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	480a      	ldr	r0, [pc, #40]	; (800c0c4 <tcp_input_delayed_close+0x7c>)
 800c09c:	f7ff fa52 	bl	800b544 <tcp_pcb_remove>
    tcp_free(pcb);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7fd fd9f 	bl	8009be4 <tcp_free>
    return 1;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	08014c90 	.word	0x08014c90
 800c0b8:	08014e60 	.word	0x08014e60
 800c0bc:	08014cdc 	.word	0x08014cdc
 800c0c0:	200008c1 	.word	0x200008c1
 800c0c4:	20011644 	.word	0x20011644

0800c0c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c0c8:	b590      	push	{r4, r7, lr}
 800c0ca:	b08b      	sub	sp, #44	; 0x2c
 800c0cc:	af04      	add	r7, sp, #16
 800c0ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c0d0:	4b6f      	ldr	r3, [pc, #444]	; (800c290 <tcp_listen_input+0x1c8>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f040 80d2 	bne.w	800c282 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d106      	bne.n	800c0f2 <tcp_listen_input+0x2a>
 800c0e4:	4b6b      	ldr	r3, [pc, #428]	; (800c294 <tcp_listen_input+0x1cc>)
 800c0e6:	f240 2281 	movw	r2, #641	; 0x281
 800c0ea:	496b      	ldr	r1, [pc, #428]	; (800c298 <tcp_listen_input+0x1d0>)
 800c0ec:	486b      	ldr	r0, [pc, #428]	; (800c29c <tcp_listen_input+0x1d4>)
 800c0ee:	f006 fbc5 	bl	801287c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c0f2:	4b67      	ldr	r3, [pc, #412]	; (800c290 <tcp_listen_input+0x1c8>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	f003 0310 	and.w	r3, r3, #16
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d019      	beq.n	800c132 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0fe:	4b68      	ldr	r3, [pc, #416]	; (800c2a0 <tcp_listen_input+0x1d8>)
 800c100:	6819      	ldr	r1, [r3, #0]
 800c102:	4b68      	ldr	r3, [pc, #416]	; (800c2a4 <tcp_listen_input+0x1dc>)
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	4b67      	ldr	r3, [pc, #412]	; (800c2a8 <tcp_listen_input+0x1e0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c10e:	4b67      	ldr	r3, [pc, #412]	; (800c2ac <tcp_listen_input+0x1e4>)
 800c110:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c112:	885b      	ldrh	r3, [r3, #2]
 800c114:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c116:	4a65      	ldr	r2, [pc, #404]	; (800c2ac <tcp_listen_input+0x1e4>)
 800c118:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c11a:	8812      	ldrh	r2, [r2, #0]
 800c11c:	b292      	uxth	r2, r2
 800c11e:	9202      	str	r2, [sp, #8]
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	4b63      	ldr	r3, [pc, #396]	; (800c2b0 <tcp_listen_input+0x1e8>)
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4b63      	ldr	r3, [pc, #396]	; (800c2b4 <tcp_listen_input+0x1ec>)
 800c128:	4602      	mov	r2, r0
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f003 fbda 	bl	800f8e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c130:	e0a9      	b.n	800c286 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c132:	4b57      	ldr	r3, [pc, #348]	; (800c290 <tcp_listen_input+0x1c8>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 80a3 	beq.w	800c286 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7d5b      	ldrb	r3, [r3, #21]
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff f861 	bl	800b20c <tcp_alloc>
 800c14a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d111      	bne.n	800c176 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00a      	beq.n	800c170 <tcp_listen_input+0xa8>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	6910      	ldr	r0, [r2, #16]
 800c162:	f04f 32ff 	mov.w	r2, #4294967295
 800c166:	2100      	movs	r1, #0
 800c168:	4798      	blx	r3
 800c16a:	4603      	mov	r3, r0
 800c16c:	73bb      	strb	r3, [r7, #14]
      return;
 800c16e:	e08b      	b.n	800c288 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c170:	23f0      	movs	r3, #240	; 0xf0
 800c172:	73bb      	strb	r3, [r7, #14]
      return;
 800c174:	e088      	b.n	800c288 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c176:	4b50      	ldr	r3, [pc, #320]	; (800c2b8 <tcp_listen_input+0x1f0>)
 800c178:	695a      	ldr	r2, [r3, #20]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c17e:	4b4e      	ldr	r3, [pc, #312]	; (800c2b8 <tcp_listen_input+0x1f0>)
 800c180:	691a      	ldr	r2, [r3, #16]
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	8ada      	ldrh	r2, [r3, #22]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c18e:	4b47      	ldr	r3, [pc, #284]	; (800c2ac <tcp_listen_input+0x1e4>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	b29a      	uxth	r2, r3
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2203      	movs	r2, #3
 800c19e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c1a0:	4b41      	ldr	r3, [pc, #260]	; (800c2a8 <tcp_listen_input+0x1e0>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c1b2:	6978      	ldr	r0, [r7, #20]
 800c1b4:	f7ff fa5a 	bl	800b66c <tcp_next_iss>
 800c1b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c1d2:	4b35      	ldr	r3, [pc, #212]	; (800c2a8 <tcp_listen_input+0x1e0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	1e5a      	subs	r2, r3, #1
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	691a      	ldr	r2, [r3, #16]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7a5b      	ldrb	r3, [r3, #9]
 800c1ee:	f003 030c 	and.w	r3, r3, #12
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7a1a      	ldrb	r2, [r3, #8]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c200:	4b2e      	ldr	r3, [pc, #184]	; (800c2bc <tcp_listen_input+0x1f4>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	60da      	str	r2, [r3, #12]
 800c208:	4a2c      	ldr	r2, [pc, #176]	; (800c2bc <tcp_listen_input+0x1f4>)
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	f003 fd29 	bl	800fc64 <tcp_timer_needed>
 800c212:	4b2b      	ldr	r3, [pc, #172]	; (800c2c0 <tcp_listen_input+0x1f8>)
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f001 fd8d 	bl	800dd38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c21e:	4b23      	ldr	r3, [pc, #140]	; (800c2ac <tcp_listen_input+0x1e4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	89db      	ldrh	r3, [r3, #14]
 800c224:	b29a      	uxth	r2, r3
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3304      	adds	r3, #4
 800c240:	4618      	mov	r0, r3
 800c242:	f005 f8ed 	bl	8011420 <ip4_route>
 800c246:	4601      	mov	r1, r0
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	3304      	adds	r3, #4
 800c24c:	461a      	mov	r2, r3
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff fa32 	bl	800b6b8 <tcp_eff_send_mss_netif>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c25c:	2112      	movs	r1, #18
 800c25e:	6978      	ldr	r0, [r7, #20]
 800c260:	f002 fc9e 	bl	800eba0 <tcp_enqueue_flags>
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d004      	beq.n	800c27a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c270:	2100      	movs	r1, #0
 800c272:	6978      	ldr	r0, [r7, #20]
 800c274:	f7fd fee0 	bl	800a038 <tcp_abandon>
      return;
 800c278:	e006      	b.n	800c288 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c27a:	6978      	ldr	r0, [r7, #20]
 800c27c:	f002 fd7e 	bl	800ed7c <tcp_output>
  return;
 800c280:	e001      	b.n	800c286 <tcp_listen_input+0x1be>
    return;
 800c282:	bf00      	nop
 800c284:	e000      	b.n	800c288 <tcp_listen_input+0x1c0>
  return;
 800c286:	bf00      	nop
}
 800c288:	371c      	adds	r7, #28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd90      	pop	{r4, r7, pc}
 800c28e:	bf00      	nop
 800c290:	200008c0 	.word	0x200008c0
 800c294:	08014c90 	.word	0x08014c90
 800c298:	08014e88 	.word	0x08014e88
 800c29c:	08014cdc 	.word	0x08014cdc
 800c2a0:	200008b8 	.word	0x200008b8
 800c2a4:	200008be 	.word	0x200008be
 800c2a8:	200008b4 	.word	0x200008b4
 800c2ac:	200008a4 	.word	0x200008a4
 800c2b0:	20003cb0 	.word	0x20003cb0
 800c2b4:	20003cb4 	.word	0x20003cb4
 800c2b8:	20003ca0 	.word	0x20003ca0
 800c2bc:	20011644 	.word	0x20011644
 800c2c0:	20011640 	.word	0x20011640

0800c2c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af04      	add	r7, sp, #16
 800c2ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c2cc:	4b2f      	ldr	r3, [pc, #188]	; (800c38c <tcp_timewait_input+0xc8>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d153      	bne.n	800c380 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <tcp_timewait_input+0x28>
 800c2de:	4b2c      	ldr	r3, [pc, #176]	; (800c390 <tcp_timewait_input+0xcc>)
 800c2e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c2e4:	492b      	ldr	r1, [pc, #172]	; (800c394 <tcp_timewait_input+0xd0>)
 800c2e6:	482c      	ldr	r0, [pc, #176]	; (800c398 <tcp_timewait_input+0xd4>)
 800c2e8:	f006 fac8 	bl	801287c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c2ec:	4b27      	ldr	r3, [pc, #156]	; (800c38c <tcp_timewait_input+0xc8>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	f003 0302 	and.w	r3, r3, #2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d02a      	beq.n	800c34e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c2f8:	4b28      	ldr	r3, [pc, #160]	; (800c39c <tcp_timewait_input+0xd8>)
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	db2d      	blt.n	800c362 <tcp_timewait_input+0x9e>
 800c306:	4b25      	ldr	r3, [pc, #148]	; (800c39c <tcp_timewait_input+0xd8>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c312:	440b      	add	r3, r1
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	dc23      	bgt.n	800c362 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c31a:	4b21      	ldr	r3, [pc, #132]	; (800c3a0 <tcp_timewait_input+0xdc>)
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	4b21      	ldr	r3, [pc, #132]	; (800c3a4 <tcp_timewait_input+0xe0>)
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <tcp_timewait_input+0xd8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c32a:	4b1f      	ldr	r3, [pc, #124]	; (800c3a8 <tcp_timewait_input+0xe4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c32e:	885b      	ldrh	r3, [r3, #2]
 800c330:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c332:	4a1d      	ldr	r2, [pc, #116]	; (800c3a8 <tcp_timewait_input+0xe4>)
 800c334:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c336:	8812      	ldrh	r2, [r2, #0]
 800c338:	b292      	uxth	r2, r2
 800c33a:	9202      	str	r2, [sp, #8]
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	4b1b      	ldr	r3, [pc, #108]	; (800c3ac <tcp_timewait_input+0xe8>)
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <tcp_timewait_input+0xec>)
 800c344:	4602      	mov	r2, r0
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f003 facc 	bl	800f8e4 <tcp_rst>
      return;
 800c34c:	e01b      	b.n	800c386 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <tcp_timewait_input+0xc8>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c35a:	4b16      	ldr	r3, [pc, #88]	; (800c3b4 <tcp_timewait_input+0xf0>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c362:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <tcp_timewait_input+0xe0>)
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00c      	beq.n	800c384 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	8b5b      	ldrh	r3, [r3, #26]
 800c36e:	f043 0302 	orr.w	r3, r3, #2
 800c372:	b29a      	uxth	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f002 fcff 	bl	800ed7c <tcp_output>
  }
  return;
 800c37e:	e001      	b.n	800c384 <tcp_timewait_input+0xc0>
    return;
 800c380:	bf00      	nop
 800c382:	e000      	b.n	800c386 <tcp_timewait_input+0xc2>
  return;
 800c384:	bf00      	nop
}
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	200008c0 	.word	0x200008c0
 800c390:	08014c90 	.word	0x08014c90
 800c394:	08014ea8 	.word	0x08014ea8
 800c398:	08014cdc 	.word	0x08014cdc
 800c39c:	200008b4 	.word	0x200008b4
 800c3a0:	200008b8 	.word	0x200008b8
 800c3a4:	200008be 	.word	0x200008be
 800c3a8:	200008a4 	.word	0x200008a4
 800c3ac:	20003cb0 	.word	0x20003cb0
 800c3b0:	20003cb4 	.word	0x20003cb4
 800c3b4:	20011648 	.word	0x20011648

0800c3b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b08d      	sub	sp, #52	; 0x34
 800c3bc:	af04      	add	r7, sp, #16
 800c3be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <tcp_process+0x24>
 800c3ce:	4ba5      	ldr	r3, [pc, #660]	; (800c664 <tcp_process+0x2ac>)
 800c3d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c3d4:	49a4      	ldr	r1, [pc, #656]	; (800c668 <tcp_process+0x2b0>)
 800c3d6:	48a5      	ldr	r0, [pc, #660]	; (800c66c <tcp_process+0x2b4>)
 800c3d8:	f006 fa50 	bl	801287c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c3dc:	4ba4      	ldr	r3, [pc, #656]	; (800c670 <tcp_process+0x2b8>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d04e      	beq.n	800c486 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7d1b      	ldrb	r3, [r3, #20]
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d108      	bne.n	800c402 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3f4:	4b9f      	ldr	r3, [pc, #636]	; (800c674 <tcp_process+0x2bc>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d123      	bne.n	800c444 <tcp_process+0x8c>
        acceptable = 1;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	76fb      	strb	r3, [r7, #27]
 800c400:	e020      	b.n	800c444 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c406:	4b9c      	ldr	r3, [pc, #624]	; (800c678 <tcp_process+0x2c0>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d102      	bne.n	800c414 <tcp_process+0x5c>
        acceptable = 1;
 800c40e:	2301      	movs	r3, #1
 800c410:	76fb      	strb	r3, [r7, #27]
 800c412:	e017      	b.n	800c444 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c414:	4b98      	ldr	r3, [pc, #608]	; (800c678 <tcp_process+0x2c0>)
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	db10      	blt.n	800c444 <tcp_process+0x8c>
 800c422:	4b95      	ldr	r3, [pc, #596]	; (800c678 <tcp_process+0x2c0>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c42e:	440b      	add	r3, r1
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	dc06      	bgt.n	800c444 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8b5b      	ldrh	r3, [r3, #26]
 800c43a:	f043 0302 	orr.w	r3, r3, #2
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c444:	7efb      	ldrb	r3, [r7, #27]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d01b      	beq.n	800c482 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7d1b      	ldrb	r3, [r3, #20]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <tcp_process+0xa8>
 800c452:	4b84      	ldr	r3, [pc, #528]	; (800c664 <tcp_process+0x2ac>)
 800c454:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c458:	4988      	ldr	r1, [pc, #544]	; (800c67c <tcp_process+0x2c4>)
 800c45a:	4884      	ldr	r0, [pc, #528]	; (800c66c <tcp_process+0x2b4>)
 800c45c:	f006 fa0e 	bl	801287c <iprintf>
      recv_flags |= TF_RESET;
 800c460:	4b87      	ldr	r3, [pc, #540]	; (800c680 <tcp_process+0x2c8>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	f043 0308 	orr.w	r3, r3, #8
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	4b85      	ldr	r3, [pc, #532]	; (800c680 <tcp_process+0x2c8>)
 800c46c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8b5b      	ldrh	r3, [r3, #26]
 800c472:	f023 0301 	bic.w	r3, r3, #1
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c47c:	f06f 030d 	mvn.w	r3, #13
 800c480:	e37a      	b.n	800cb78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	e378      	b.n	800cb78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c486:	4b7a      	ldr	r3, [pc, #488]	; (800c670 <tcp_process+0x2b8>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f003 0302 	and.w	r3, r3, #2
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d010      	beq.n	800c4b4 <tcp_process+0xfc>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7d1b      	ldrb	r3, [r3, #20]
 800c496:	2b02      	cmp	r3, #2
 800c498:	d00c      	beq.n	800c4b4 <tcp_process+0xfc>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7d1b      	ldrb	r3, [r3, #20]
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d008      	beq.n	800c4b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	8b5b      	ldrh	r3, [r3, #26]
 800c4a6:	f043 0302 	orr.w	r3, r3, #2
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e361      	b.n	800cb78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8b5b      	ldrh	r3, [r3, #26]
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d103      	bne.n	800c4c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c4c0:	4b70      	ldr	r3, [pc, #448]	; (800c684 <tcp_process+0x2cc>)
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 fc2d 	bl	800dd38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	7d1b      	ldrb	r3, [r3, #20]
 800c4e2:	3b02      	subs	r3, #2
 800c4e4:	2b07      	cmp	r3, #7
 800c4e6:	f200 8337 	bhi.w	800cb58 <tcp_process+0x7a0>
 800c4ea:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <tcp_process+0x138>)
 800c4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f0:	0800c511 	.word	0x0800c511
 800c4f4:	0800c741 	.word	0x0800c741
 800c4f8:	0800c8b9 	.word	0x0800c8b9
 800c4fc:	0800c8e3 	.word	0x0800c8e3
 800c500:	0800ca07 	.word	0x0800ca07
 800c504:	0800c8b9 	.word	0x0800c8b9
 800c508:	0800ca93 	.word	0x0800ca93
 800c50c:	0800cb23 	.word	0x0800cb23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c510:	4b57      	ldr	r3, [pc, #348]	; (800c670 <tcp_process+0x2b8>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 0310 	and.w	r3, r3, #16
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 80e4 	beq.w	800c6e6 <tcp_process+0x32e>
 800c51e:	4b54      	ldr	r3, [pc, #336]	; (800c670 <tcp_process+0x2b8>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 80dd 	beq.w	800c6e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	4b50      	ldr	r3, [pc, #320]	; (800c674 <tcp_process+0x2bc>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	f040 80d5 	bne.w	800c6e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c53c:	4b4e      	ldr	r3, [pc, #312]	; (800c678 <tcp_process+0x2c0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c54e:	4b49      	ldr	r3, [pc, #292]	; (800c674 <tcp_process+0x2bc>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c556:	4b4c      	ldr	r3, [pc, #304]	; (800c688 <tcp_process+0x2d0>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	89db      	ldrh	r3, [r3, #14]
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c570:	4b41      	ldr	r3, [pc, #260]	; (800c678 <tcp_process+0x2c0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	1e5a      	subs	r2, r3, #1
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2204      	movs	r2, #4
 800c57e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	3304      	adds	r3, #4
 800c588:	4618      	mov	r0, r3
 800c58a:	f004 ff49 	bl	8011420 <ip4_route>
 800c58e:	4601      	mov	r1, r0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3304      	adds	r3, #4
 800c594:	461a      	mov	r2, r3
 800c596:	4620      	mov	r0, r4
 800c598:	f7ff f88e 	bl	800b6b8 <tcp_eff_send_mss_netif>
 800c59c:	4603      	mov	r3, r0
 800c59e:	461a      	mov	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5a8:	009a      	lsls	r2, r3, #2
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800c5b4:	428b      	cmp	r3, r1
 800c5b6:	bf38      	it	cc
 800c5b8:	460b      	movcc	r3, r1
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d204      	bcs.n	800c5c8 <tcp_process+0x210>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	e00d      	b.n	800c5e4 <tcp_process+0x22c>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d904      	bls.n	800c5e0 <tcp_process+0x228>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	e001      	b.n	800c5e4 <tcp_process+0x22c>
 800c5e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d106      	bne.n	800c602 <tcp_process+0x24a>
 800c5f4:	4b1b      	ldr	r3, [pc, #108]	; (800c664 <tcp_process+0x2ac>)
 800c5f6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c5fa:	4924      	ldr	r1, [pc, #144]	; (800c68c <tcp_process+0x2d4>)
 800c5fc:	481b      	ldr	r0, [pc, #108]	; (800c66c <tcp_process+0x2b4>)
 800c5fe:	f006 f93d 	bl	801287c <iprintf>
        --pcb->snd_queuelen;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c608:	3b01      	subs	r3, #1
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c616:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d111      	bne.n	800c642 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c622:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <tcp_process+0x280>
 800c62a:	4b0e      	ldr	r3, [pc, #56]	; (800c664 <tcp_process+0x2ac>)
 800c62c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c630:	4917      	ldr	r1, [pc, #92]	; (800c690 <tcp_process+0x2d8>)
 800c632:	480e      	ldr	r0, [pc, #56]	; (800c66c <tcp_process+0x2b4>)
 800c634:	f006 f922 	bl	801287c <iprintf>
          pcb->unsent = rseg->next;
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	66da      	str	r2, [r3, #108]	; 0x6c
 800c640:	e003      	b.n	800c64a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c64a:	69f8      	ldr	r0, [r7, #28]
 800c64c:	f7fe fc57 	bl	800aefe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11d      	bne.n	800c694 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c65e:	861a      	strh	r2, [r3, #48]	; 0x30
 800c660:	e01f      	b.n	800c6a2 <tcp_process+0x2ea>
 800c662:	bf00      	nop
 800c664:	08014c90 	.word	0x08014c90
 800c668:	08014ec8 	.word	0x08014ec8
 800c66c:	08014cdc 	.word	0x08014cdc
 800c670:	200008c0 	.word	0x200008c0
 800c674:	200008b8 	.word	0x200008b8
 800c678:	200008b4 	.word	0x200008b4
 800c67c:	08014ee4 	.word	0x08014ee4
 800c680:	200008c1 	.word	0x200008c1
 800c684:	20011648 	.word	0x20011648
 800c688:	200008a4 	.word	0x200008a4
 800c68c:	08014f04 	.word	0x08014f04
 800c690:	08014f1c 	.word	0x08014f1c
        } else {
          pcb->rtime = 0;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00a      	beq.n	800c6c2 <tcp_process+0x30a>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6910      	ldr	r0, [r2, #16]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	4798      	blx	r3
 800c6bc:	4603      	mov	r3, r0
 800c6be:	76bb      	strb	r3, [r7, #26]
 800c6c0:	e001      	b.n	800c6c6 <tcp_process+0x30e>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c6c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6ca:	f113 0f0d 	cmn.w	r3, #13
 800c6ce:	d102      	bne.n	800c6d6 <tcp_process+0x31e>
          return ERR_ABRT;
 800c6d0:	f06f 030c 	mvn.w	r3, #12
 800c6d4:	e250      	b.n	800cb78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8b5b      	ldrh	r3, [r3, #26]
 800c6da:	f043 0302 	orr.w	r3, r3, #2
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c6e4:	e23a      	b.n	800cb5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c6e6:	4b9d      	ldr	r3, [pc, #628]	; (800c95c <tcp_process+0x5a4>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	f003 0310 	and.w	r3, r3, #16
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 8234 	beq.w	800cb5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6f4:	4b9a      	ldr	r3, [pc, #616]	; (800c960 <tcp_process+0x5a8>)
 800c6f6:	6819      	ldr	r1, [r3, #0]
 800c6f8:	4b9a      	ldr	r3, [pc, #616]	; (800c964 <tcp_process+0x5ac>)
 800c6fa:	881b      	ldrh	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	4b9a      	ldr	r3, [pc, #616]	; (800c968 <tcp_process+0x5b0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c704:	4b99      	ldr	r3, [pc, #612]	; (800c96c <tcp_process+0x5b4>)
 800c706:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c70c:	4a97      	ldr	r2, [pc, #604]	; (800c96c <tcp_process+0x5b4>)
 800c70e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c710:	8812      	ldrh	r2, [r2, #0]
 800c712:	b292      	uxth	r2, r2
 800c714:	9202      	str	r2, [sp, #8]
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	4b95      	ldr	r3, [pc, #596]	; (800c970 <tcp_process+0x5b8>)
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4b95      	ldr	r3, [pc, #596]	; (800c974 <tcp_process+0x5bc>)
 800c71e:	4602      	mov	r2, r0
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f003 f8df 	bl	800f8e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c72c:	2b05      	cmp	r3, #5
 800c72e:	f200 8215 	bhi.w	800cb5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f002 fea9 	bl	800f490 <tcp_rexmit_rto>
      break;
 800c73e:	e20d      	b.n	800cb5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c740:	4b86      	ldr	r3, [pc, #536]	; (800c95c <tcp_process+0x5a4>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	f003 0310 	and.w	r3, r3, #16
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 80a1 	beq.w	800c890 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c74e:	4b84      	ldr	r3, [pc, #528]	; (800c960 <tcp_process+0x5a8>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	3b01      	subs	r3, #1
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	db7e      	blt.n	800c85c <tcp_process+0x4a4>
 800c75e:	4b80      	ldr	r3, [pc, #512]	; (800c960 <tcp_process+0x5a8>)
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	dc77      	bgt.n	800c85c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2204      	movs	r2, #4
 800c770:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d102      	bne.n	800c780 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c77a:	23fa      	movs	r3, #250	; 0xfa
 800c77c:	76bb      	strb	r3, [r7, #26]
 800c77e:	e01d      	b.n	800c7bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d106      	bne.n	800c798 <tcp_process+0x3e0>
 800c78a:	4b7b      	ldr	r3, [pc, #492]	; (800c978 <tcp_process+0x5c0>)
 800c78c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c790:	497a      	ldr	r1, [pc, #488]	; (800c97c <tcp_process+0x5c4>)
 800c792:	487b      	ldr	r0, [pc, #492]	; (800c980 <tcp_process+0x5c8>)
 800c794:	f006 f872 	bl	801287c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00a      	beq.n	800c7b8 <tcp_process+0x400>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	6910      	ldr	r0, [r2, #16]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	6879      	ldr	r1, [r7, #4]
 800c7b0:	4798      	blx	r3
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	76bb      	strb	r3, [r7, #26]
 800c7b6:	e001      	b.n	800c7bc <tcp_process+0x404>
 800c7b8:	23f0      	movs	r3, #240	; 0xf0
 800c7ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c7bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00a      	beq.n	800c7da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c7c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7c8:	f113 0f0d 	cmn.w	r3, #13
 800c7cc:	d002      	beq.n	800c7d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7fd fcf0 	bl	800a1b4 <tcp_abort>
            }
            return ERR_ABRT;
 800c7d4:	f06f 030c 	mvn.w	r3, #12
 800c7d8:	e1ce      	b.n	800cb78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fae0 	bl	800cda0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c7e0:	4b68      	ldr	r3, [pc, #416]	; (800c984 <tcp_process+0x5cc>)
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d005      	beq.n	800c7f4 <tcp_process+0x43c>
            recv_acked--;
 800c7e8:	4b66      	ldr	r3, [pc, #408]	; (800c984 <tcp_process+0x5cc>)
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	4b64      	ldr	r3, [pc, #400]	; (800c984 <tcp_process+0x5cc>)
 800c7f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f8:	009a      	lsls	r2, r3, #2
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	f241 111c 	movw	r1, #4380	; 0x111c
 800c804:	428b      	cmp	r3, r1
 800c806:	bf38      	it	cc
 800c808:	460b      	movcc	r3, r1
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d204      	bcs.n	800c818 <tcp_process+0x460>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	b29b      	uxth	r3, r3
 800c816:	e00d      	b.n	800c834 <tcp_process+0x47c>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c822:	4293      	cmp	r3, r2
 800c824:	d904      	bls.n	800c830 <tcp_process+0x478>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c82a:	005b      	lsls	r3, r3, #1
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	e001      	b.n	800c834 <tcp_process+0x47c>
 800c830:	f241 131c 	movw	r3, #4380	; 0x111c
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c83a:	4b53      	ldr	r3, [pc, #332]	; (800c988 <tcp_process+0x5d0>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b00      	cmp	r3, #0
 800c844:	d037      	beq.n	800c8b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	8b5b      	ldrh	r3, [r3, #26]
 800c84a:	f043 0302 	orr.w	r3, r3, #2
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2207      	movs	r2, #7
 800c858:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c85a:	e02c      	b.n	800c8b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c85c:	4b40      	ldr	r3, [pc, #256]	; (800c960 <tcp_process+0x5a8>)
 800c85e:	6819      	ldr	r1, [r3, #0]
 800c860:	4b40      	ldr	r3, [pc, #256]	; (800c964 <tcp_process+0x5ac>)
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	461a      	mov	r2, r3
 800c866:	4b40      	ldr	r3, [pc, #256]	; (800c968 <tcp_process+0x5b0>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c86c:	4b3f      	ldr	r3, [pc, #252]	; (800c96c <tcp_process+0x5b4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c870:	885b      	ldrh	r3, [r3, #2]
 800c872:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c874:	4a3d      	ldr	r2, [pc, #244]	; (800c96c <tcp_process+0x5b4>)
 800c876:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c878:	8812      	ldrh	r2, [r2, #0]
 800c87a:	b292      	uxth	r2, r2
 800c87c:	9202      	str	r2, [sp, #8]
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	4b3b      	ldr	r3, [pc, #236]	; (800c970 <tcp_process+0x5b8>)
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4b3b      	ldr	r3, [pc, #236]	; (800c974 <tcp_process+0x5bc>)
 800c886:	4602      	mov	r2, r0
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f003 f82b 	bl	800f8e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c88e:	e167      	b.n	800cb60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c890:	4b32      	ldr	r3, [pc, #200]	; (800c95c <tcp_process+0x5a4>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0302 	and.w	r3, r3, #2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 8161 	beq.w	800cb60 <tcp_process+0x7a8>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	4b30      	ldr	r3, [pc, #192]	; (800c968 <tcp_process+0x5b0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	f040 8159 	bne.w	800cb60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f002 fe10 	bl	800f4d4 <tcp_rexmit>
      break;
 800c8b4:	e154      	b.n	800cb60 <tcp_process+0x7a8>
 800c8b6:	e153      	b.n	800cb60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fa71 	bl	800cda0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c8be:	4b32      	ldr	r3, [pc, #200]	; (800c988 <tcp_process+0x5d0>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	f003 0320 	and.w	r3, r3, #32
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 814c 	beq.w	800cb64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8b5b      	ldrh	r3, [r3, #26]
 800c8d0:	f043 0302 	orr.w	r3, r3, #2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2207      	movs	r2, #7
 800c8de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c8e0:	e140      	b.n	800cb64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa5c 	bl	800cda0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c8e8:	4b27      	ldr	r3, [pc, #156]	; (800c988 <tcp_process+0x5d0>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d071      	beq.n	800c9d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8f4:	4b19      	ldr	r3, [pc, #100]	; (800c95c <tcp_process+0x5a4>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	f003 0310 	and.w	r3, r3, #16
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d060      	beq.n	800c9c2 <tcp_process+0x60a>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c904:	4b16      	ldr	r3, [pc, #88]	; (800c960 <tcp_process+0x5a8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d15a      	bne.n	800c9c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c910:	2b00      	cmp	r3, #0
 800c912:	d156      	bne.n	800c9c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	8b5b      	ldrh	r3, [r3, #26]
 800c918:	f043 0302 	orr.w	r3, r3, #2
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7fe fdbe 	bl	800b4a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c928:	4b18      	ldr	r3, [pc, #96]	; (800c98c <tcp_process+0x5d4>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d105      	bne.n	800c93e <tcp_process+0x586>
 800c932:	4b16      	ldr	r3, [pc, #88]	; (800c98c <tcp_process+0x5d4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	4a14      	ldr	r2, [pc, #80]	; (800c98c <tcp_process+0x5d4>)
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	e02e      	b.n	800c99c <tcp_process+0x5e4>
 800c93e:	4b13      	ldr	r3, [pc, #76]	; (800c98c <tcp_process+0x5d4>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e027      	b.n	800c996 <tcp_process+0x5de>
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d11f      	bne.n	800c990 <tcp_process+0x5d8>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	60da      	str	r2, [r3, #12]
 800c958:	e020      	b.n	800c99c <tcp_process+0x5e4>
 800c95a:	bf00      	nop
 800c95c:	200008c0 	.word	0x200008c0
 800c960:	200008b8 	.word	0x200008b8
 800c964:	200008be 	.word	0x200008be
 800c968:	200008b4 	.word	0x200008b4
 800c96c:	200008a4 	.word	0x200008a4
 800c970:	20003cb0 	.word	0x20003cb0
 800c974:	20003cb4 	.word	0x20003cb4
 800c978:	08014c90 	.word	0x08014c90
 800c97c:	08014f30 	.word	0x08014f30
 800c980:	08014cdc 	.word	0x08014cdc
 800c984:	200008bc 	.word	0x200008bc
 800c988:	200008c1 	.word	0x200008c1
 800c98c:	20011644 	.word	0x20011644
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1d4      	bne.n	800c946 <tcp_process+0x58e>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	60da      	str	r2, [r3, #12]
 800c9a2:	4b77      	ldr	r3, [pc, #476]	; (800cb80 <tcp_process+0x7c8>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	220a      	movs	r2, #10
 800c9ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c9ae:	4b75      	ldr	r3, [pc, #468]	; (800cb84 <tcp_process+0x7cc>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60da      	str	r2, [r3, #12]
 800c9b6:	4a73      	ldr	r2, [pc, #460]	; (800cb84 <tcp_process+0x7cc>)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	f003 f952 	bl	800fc64 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c9c0:	e0d2      	b.n	800cb68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8b5b      	ldrh	r3, [r3, #26]
 800c9c6:	f043 0302 	orr.w	r3, r3, #2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2208      	movs	r2, #8
 800c9d4:	751a      	strb	r2, [r3, #20]
      break;
 800c9d6:	e0c7      	b.n	800cb68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9d8:	4b6b      	ldr	r3, [pc, #428]	; (800cb88 <tcp_process+0x7d0>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	f003 0310 	and.w	r3, r3, #16
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80c1 	beq.w	800cb68 <tcp_process+0x7b0>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9ea:	4b68      	ldr	r3, [pc, #416]	; (800cb8c <tcp_process+0x7d4>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	f040 80ba 	bne.w	800cb68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f040 80b5 	bne.w	800cb68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2206      	movs	r2, #6
 800ca02:	751a      	strb	r2, [r3, #20]
      break;
 800ca04:	e0b0      	b.n	800cb68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f9ca 	bl	800cda0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ca0c:	4b60      	ldr	r3, [pc, #384]	; (800cb90 <tcp_process+0x7d8>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 80a9 	beq.w	800cb6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	8b5b      	ldrh	r3, [r3, #26]
 800ca1e:	f043 0302 	orr.w	r3, r3, #2
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7fe fd3b 	bl	800b4a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca2e:	4b59      	ldr	r3, [pc, #356]	; (800cb94 <tcp_process+0x7dc>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d105      	bne.n	800ca44 <tcp_process+0x68c>
 800ca38:	4b56      	ldr	r3, [pc, #344]	; (800cb94 <tcp_process+0x7dc>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	4a55      	ldr	r2, [pc, #340]	; (800cb94 <tcp_process+0x7dc>)
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	e013      	b.n	800ca6c <tcp_process+0x6b4>
 800ca44:	4b53      	ldr	r3, [pc, #332]	; (800cb94 <tcp_process+0x7dc>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	e00c      	b.n	800ca66 <tcp_process+0x6ae>
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d104      	bne.n	800ca60 <tcp_process+0x6a8>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68da      	ldr	r2, [r3, #12]
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	60da      	str	r2, [r3, #12]
 800ca5e:	e005      	b.n	800ca6c <tcp_process+0x6b4>
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1ef      	bne.n	800ca4c <tcp_process+0x694>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	60da      	str	r2, [r3, #12]
 800ca72:	4b43      	ldr	r3, [pc, #268]	; (800cb80 <tcp_process+0x7c8>)
 800ca74:	2201      	movs	r2, #1
 800ca76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	220a      	movs	r2, #10
 800ca7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca7e:	4b41      	ldr	r3, [pc, #260]	; (800cb84 <tcp_process+0x7cc>)
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	60da      	str	r2, [r3, #12]
 800ca86:	4a3f      	ldr	r2, [pc, #252]	; (800cb84 <tcp_process+0x7cc>)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	f003 f8ea 	bl	800fc64 <tcp_timer_needed>
      }
      break;
 800ca90:	e06c      	b.n	800cb6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f984 	bl	800cda0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca98:	4b3b      	ldr	r3, [pc, #236]	; (800cb88 <tcp_process+0x7d0>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d065      	beq.n	800cb70 <tcp_process+0x7b8>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800caa8:	4b38      	ldr	r3, [pc, #224]	; (800cb8c <tcp_process+0x7d4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d15f      	bne.n	800cb70 <tcp_process+0x7b8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d15b      	bne.n	800cb70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7fe fcf3 	bl	800b4a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cabe:	4b35      	ldr	r3, [pc, #212]	; (800cb94 <tcp_process+0x7dc>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d105      	bne.n	800cad4 <tcp_process+0x71c>
 800cac8:	4b32      	ldr	r3, [pc, #200]	; (800cb94 <tcp_process+0x7dc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	4a31      	ldr	r2, [pc, #196]	; (800cb94 <tcp_process+0x7dc>)
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	e013      	b.n	800cafc <tcp_process+0x744>
 800cad4:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <tcp_process+0x7dc>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e00c      	b.n	800caf6 <tcp_process+0x73e>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d104      	bne.n	800caf0 <tcp_process+0x738>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	60da      	str	r2, [r3, #12]
 800caee:	e005      	b.n	800cafc <tcp_process+0x744>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1ef      	bne.n	800cadc <tcp_process+0x724>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	4b1f      	ldr	r3, [pc, #124]	; (800cb80 <tcp_process+0x7c8>)
 800cb04:	2201      	movs	r2, #1
 800cb06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	220a      	movs	r2, #10
 800cb0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <tcp_process+0x7cc>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60da      	str	r2, [r3, #12]
 800cb16:	4a1b      	ldr	r2, [pc, #108]	; (800cb84 <tcp_process+0x7cc>)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	f003 f8a2 	bl	800fc64 <tcp_timer_needed>
      }
      break;
 800cb20:	e026      	b.n	800cb70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f93c 	bl	800cda0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cb28:	4b17      	ldr	r3, [pc, #92]	; (800cb88 <tcp_process+0x7d0>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	f003 0310 	and.w	r3, r3, #16
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01f      	beq.n	800cb74 <tcp_process+0x7bc>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb38:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <tcp_process+0x7d4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d119      	bne.n	800cb74 <tcp_process+0x7bc>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d115      	bne.n	800cb74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cb48:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <tcp_process+0x7d8>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	f043 0310 	orr.w	r3, r3, #16
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	4b0f      	ldr	r3, [pc, #60]	; (800cb90 <tcp_process+0x7d8>)
 800cb54:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cb56:	e00d      	b.n	800cb74 <tcp_process+0x7bc>
    default:
      break;
 800cb58:	bf00      	nop
 800cb5a:	e00c      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb5c:	bf00      	nop
 800cb5e:	e00a      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb60:	bf00      	nop
 800cb62:	e008      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb64:	bf00      	nop
 800cb66:	e006      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb68:	bf00      	nop
 800cb6a:	e004      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb6c:	bf00      	nop
 800cb6e:	e002      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb70:	bf00      	nop
 800cb72:	e000      	b.n	800cb76 <tcp_process+0x7be>
      break;
 800cb74:	bf00      	nop
  }
  return ERR_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3724      	adds	r7, #36	; 0x24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd90      	pop	{r4, r7, pc}
 800cb80:	20011640 	.word	0x20011640
 800cb84:	20011654 	.word	0x20011654
 800cb88:	200008c0 	.word	0x200008c0
 800cb8c:	200008b8 	.word	0x200008b8
 800cb90:	200008c1 	.word	0x200008c1
 800cb94:	20011644 	.word	0x20011644

0800cb98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cb98:	b590      	push	{r4, r7, lr}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <tcp_oos_insert_segment+0x1e>
 800cba8:	4b3b      	ldr	r3, [pc, #236]	; (800cc98 <tcp_oos_insert_segment+0x100>)
 800cbaa:	f240 421f 	movw	r2, #1055	; 0x41f
 800cbae:	493b      	ldr	r1, [pc, #236]	; (800cc9c <tcp_oos_insert_segment+0x104>)
 800cbb0:	483b      	ldr	r0, [pc, #236]	; (800cca0 <tcp_oos_insert_segment+0x108>)
 800cbb2:	f005 fe63 	bl	801287c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	899b      	ldrh	r3, [r3, #12]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fb fa2a 	bl	8008018 <lwip_htons>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	f003 0301 	and.w	r3, r3, #1
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d028      	beq.n	800cc22 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cbd0:	6838      	ldr	r0, [r7, #0]
 800cbd2:	f7fe f97f 	bl	800aed4 <tcp_segs_free>
    next = NULL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	603b      	str	r3, [r7, #0]
 800cbda:	e056      	b.n	800cc8a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	899b      	ldrh	r3, [r3, #12]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fb fa17 	bl	8008018 <lwip_htons>
 800cbea:	4603      	mov	r3, r0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00d      	beq.n	800cc12 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	899b      	ldrh	r3, [r3, #12]
 800cbfc:	b29c      	uxth	r4, r3
 800cbfe:	2001      	movs	r0, #1
 800cc00:	f7fb fa0a 	bl	8008018 <lwip_htons>
 800cc04:	4603      	mov	r3, r0
 800cc06:	461a      	mov	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	4322      	orrs	r2, r4
 800cc0e:	b292      	uxth	r2, r2
 800cc10:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f7fe f96e 	bl	800aefe <tcp_seg_free>
    while (next &&
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00e      	beq.n	800cc46 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	891b      	ldrh	r3, [r3, #8]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	4b1d      	ldr	r3, [pc, #116]	; (800cca4 <tcp_oos_insert_segment+0x10c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	441a      	add	r2, r3
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	8909      	ldrh	r1, [r1, #8]
 800cc3e:	440b      	add	r3, r1
 800cc40:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	daca      	bge.n	800cbdc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01e      	beq.n	800cc8a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	891b      	ldrh	r3, [r3, #8]
 800cc50:	461a      	mov	r2, r3
 800cc52:	4b14      	ldr	r3, [pc, #80]	; (800cca4 <tcp_oos_insert_segment+0x10c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	441a      	add	r2, r3
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dd12      	ble.n	800cc8a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <tcp_oos_insert_segment+0x10c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	891b      	ldrh	r3, [r3, #8]
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7fc faf5 	bl	8009274 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	601a      	str	r2, [r3, #0]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd90      	pop	{r4, r7, pc}
 800cc98:	08014c90 	.word	0x08014c90
 800cc9c:	08014f50 	.word	0x08014f50
 800cca0:	08014cdc 	.word	0x08014cdc
 800cca4:	200008b4 	.word	0x200008b4

0800cca8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cca8:	b5b0      	push	{r4, r5, r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ccb6:	e03e      	b.n	800cd36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fc fce2 	bl	8009690 <pbuf_clen>
 800cccc:	4603      	mov	r3, r0
 800ccce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccd6:	8a7a      	ldrh	r2, [r7, #18]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d906      	bls.n	800ccea <tcp_free_acked_segments+0x42>
 800ccdc:	4b2a      	ldr	r3, [pc, #168]	; (800cd88 <tcp_free_acked_segments+0xe0>)
 800ccde:	f240 4257 	movw	r2, #1111	; 0x457
 800cce2:	492a      	ldr	r1, [pc, #168]	; (800cd8c <tcp_free_acked_segments+0xe4>)
 800cce4:	482a      	ldr	r0, [pc, #168]	; (800cd90 <tcp_free_acked_segments+0xe8>)
 800cce6:	f005 fdc9 	bl	801287c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ccf0:	8a7b      	ldrh	r3, [r7, #18]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	891a      	ldrh	r2, [r3, #8]
 800cd00:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <tcp_free_acked_segments+0xec>)
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	4413      	add	r3, r2
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4b22      	ldr	r3, [pc, #136]	; (800cd94 <tcp_free_acked_segments+0xec>)
 800cd0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cd0c:	6978      	ldr	r0, [r7, #20]
 800cd0e:	f7fe f8f6 	bl	800aefe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <tcp_free_acked_segments+0x8e>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d106      	bne.n	800cd36 <tcp_free_acked_segments+0x8e>
 800cd28:	4b17      	ldr	r3, [pc, #92]	; (800cd88 <tcp_free_acked_segments+0xe0>)
 800cd2a:	f240 4261 	movw	r2, #1121	; 0x461
 800cd2e:	491a      	ldr	r1, [pc, #104]	; (800cd98 <tcp_free_acked_segments+0xf0>)
 800cd30:	4817      	ldr	r0, [pc, #92]	; (800cd90 <tcp_free_acked_segments+0xe8>)
 800cd32:	f005 fda3 	bl	801287c <iprintf>
  while (seg_list != NULL &&
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d020      	beq.n	800cd7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fb f97d 	bl	8008042 <lwip_htonl>
 800cd48:	4604      	mov	r4, r0
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	891b      	ldrh	r3, [r3, #8]
 800cd4e:	461d      	mov	r5, r3
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fb f95d 	bl	8008018 <lwip_htons>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	f003 0303 	and.w	r3, r3, #3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d001      	beq.n	800cd6e <tcp_free_acked_segments+0xc6>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e000      	b.n	800cd70 <tcp_free_acked_segments+0xc8>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	442b      	add	r3, r5
 800cd72:	18e2      	adds	r2, r4, r3
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <tcp_free_acked_segments+0xf4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd9c      	ble.n	800ccb8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bdb0      	pop	{r4, r5, r7, pc}
 800cd88:	08014c90 	.word	0x08014c90
 800cd8c:	08014f78 	.word	0x08014f78
 800cd90:	08014cdc 	.word	0x08014cdc
 800cd94:	200008bc 	.word	0x200008bc
 800cd98:	08014fa0 	.word	0x08014fa0
 800cd9c:	200008b8 	.word	0x200008b8

0800cda0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cda0:	b5b0      	push	{r4, r5, r7, lr}
 800cda2:	b094      	sub	sp, #80	; 0x50
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <tcp_receive+0x20>
 800cdb2:	4ba6      	ldr	r3, [pc, #664]	; (800d04c <tcp_receive+0x2ac>)
 800cdb4:	f240 427b 	movw	r2, #1147	; 0x47b
 800cdb8:	49a5      	ldr	r1, [pc, #660]	; (800d050 <tcp_receive+0x2b0>)
 800cdba:	48a6      	ldr	r0, [pc, #664]	; (800d054 <tcp_receive+0x2b4>)
 800cdbc:	f005 fd5e 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7d1b      	ldrb	r3, [r3, #20]
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d806      	bhi.n	800cdd6 <tcp_receive+0x36>
 800cdc8:	4ba0      	ldr	r3, [pc, #640]	; (800d04c <tcp_receive+0x2ac>)
 800cdca:	f240 427c 	movw	r2, #1148	; 0x47c
 800cdce:	49a2      	ldr	r1, [pc, #648]	; (800d058 <tcp_receive+0x2b8>)
 800cdd0:	48a0      	ldr	r0, [pc, #640]	; (800d054 <tcp_receive+0x2b4>)
 800cdd2:	f005 fd53 	bl	801287c <iprintf>

  if (flags & TCP_ACK) {
 800cdd6:	4ba1      	ldr	r3, [pc, #644]	; (800d05c <tcp_receive+0x2bc>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	f003 0310 	and.w	r3, r3, #16
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 8263 	beq.w	800d2aa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdea:	461a      	mov	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf0:	4413      	add	r3, r2
 800cdf2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdf8:	4b99      	ldr	r3, [pc, #612]	; (800d060 <tcp_receive+0x2c0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	db1b      	blt.n	800ce3a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce06:	4b96      	ldr	r3, [pc, #600]	; (800d060 <tcp_receive+0x2c0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d106      	bne.n	800ce1c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce12:	4b94      	ldr	r3, [pc, #592]	; (800d064 <tcp_receive+0x2c4>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	db0e      	blt.n	800ce3a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce20:	4b90      	ldr	r3, [pc, #576]	; (800d064 <tcp_receive+0x2c4>)
 800ce22:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d125      	bne.n	800ce74 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ce28:	4b8f      	ldr	r3, [pc, #572]	; (800d068 <tcp_receive+0x2c8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	89db      	ldrh	r3, [r3, #14]
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d91c      	bls.n	800ce74 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ce3a:	4b8b      	ldr	r3, [pc, #556]	; (800d068 <tcp_receive+0x2c8>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	89db      	ldrh	r3, [r3, #14]
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d205      	bcs.n	800ce64 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ce64:	4b7e      	ldr	r3, [pc, #504]	; (800d060 <tcp_receive+0x2c0>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ce6c:	4b7d      	ldr	r3, [pc, #500]	; (800d064 <tcp_receive+0x2c4>)
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ce74:	4b7b      	ldr	r3, [pc, #492]	; (800d064 <tcp_receive+0x2c4>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dc58      	bgt.n	800cf34 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ce82:	4b7a      	ldr	r3, [pc, #488]	; (800d06c <tcp_receive+0x2cc>)
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d14b      	bne.n	800cf22 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ce94:	4413      	add	r3, r2
 800ce96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d142      	bne.n	800cf22 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	db3d      	blt.n	800cf22 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceaa:	4b6e      	ldr	r3, [pc, #440]	; (800d064 <tcp_receive+0x2c4>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d137      	bne.n	800cf22 <tcp_receive+0x182>
              found_dupack = 1;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cebc:	2bff      	cmp	r3, #255	; 0xff
 800cebe:	d007      	beq.n	800ced0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cec6:	3301      	adds	r3, #1
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d91b      	bls.n	800cf12 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cee4:	4413      	add	r3, r2
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d30a      	bcc.n	800cf08 <tcp_receive+0x168>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cefc:	4413      	add	r3, r2
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cf06:	e004      	b.n	800cf12 <tcp_receive+0x172>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d902      	bls.n	800cf22 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f002 fb45 	bl	800f5ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cf22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f040 8160 	bne.w	800d1ea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf32:	e15a      	b.n	800d1ea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf34:	4b4b      	ldr	r3, [pc, #300]	; (800d064 <tcp_receive+0x2c4>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f2c0 814d 	blt.w	800d1e0 <tcp_receive+0x440>
 800cf46:	4b47      	ldr	r3, [pc, #284]	; (800d064 <tcp_receive+0x2c4>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f300 8145 	bgt.w	800d1e0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8b5b      	ldrh	r3, [r3, #26]
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d010      	beq.n	800cf84 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	8b5b      	ldrh	r3, [r3, #26]
 800cf66:	f023 0304 	bic.w	r3, r3, #4
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf92:	10db      	asrs	r3, r3, #3
 800cf94:	b21b      	sxth	r3, r3
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	b21a      	sxth	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cfac:	4b2d      	ldr	r3, [pc, #180]	; (800d064 <tcp_receive+0x2c4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cfc4:	4b27      	ldr	r3, [pc, #156]	; (800d064 <tcp_receive+0x2c4>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7d1b      	ldrb	r3, [r3, #20]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	f240 8096 	bls.w	800d102 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d244      	bcs.n	800d070 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	8b5b      	ldrh	r3, [r3, #26]
 800cfea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <tcp_receive+0x256>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <tcp_receive+0x258>
 800cff6:	2302      	movs	r3, #2
 800cff8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cffc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d000:	b29a      	uxth	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d006:	fb12 f303 	smulbb	r3, r2, r3
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d00e:	4293      	cmp	r3, r2
 800d010:	bf28      	it	cs
 800d012:	4613      	movcs	r3, r2
 800d014:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d01c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d01e:	4413      	add	r3, r2
 800d020:	b29a      	uxth	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d028:	429a      	cmp	r2, r3
 800d02a:	d309      	bcc.n	800d040 <tcp_receive+0x2a0>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d032:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d034:	4413      	add	r3, r2
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d03e:	e060      	b.n	800d102 <tcp_receive+0x362>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d04a:	e05a      	b.n	800d102 <tcp_receive+0x362>
 800d04c:	08014c90 	.word	0x08014c90
 800d050:	08014fc0 	.word	0x08014fc0
 800d054:	08014cdc 	.word	0x08014cdc
 800d058:	08014fdc 	.word	0x08014fdc
 800d05c:	200008c0 	.word	0x200008c0
 800d060:	200008b4 	.word	0x200008b4
 800d064:	200008b8 	.word	0x200008b8
 800d068:	200008a4 	.word	0x200008a4
 800d06c:	200008be 	.word	0x200008be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d078:	4413      	add	r3, r2
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d082:	429a      	cmp	r2, r3
 800d084:	d309      	bcc.n	800d09a <tcp_receive+0x2fa>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d08c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d08e:	4413      	add	r3, r2
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d098:	e004      	b.n	800d0a4 <tcp_receive+0x304>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d326      	bcc.n	800d102 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0d4:	4413      	add	r3, r2
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d30a      	bcc.n	800d0f8 <tcp_receive+0x358>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0ec:	4413      	add	r3, r2
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0f6:	e004      	b.n	800d102 <tcp_receive+0x362>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d10a:	4a98      	ldr	r2, [pc, #608]	; (800d36c <tcp_receive+0x5cc>)
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff fdcb 	bl	800cca8 <tcp_free_acked_segments>
 800d112:	4602      	mov	r2, r0
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d120:	4a93      	ldr	r2, [pc, #588]	; (800d370 <tcp_receive+0x5d0>)
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fdc0 	bl	800cca8 <tcp_free_acked_segments>
 800d128:	4602      	mov	r2, r0
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d13c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d13e:	e002      	b.n	800d146 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d162:	4b84      	ldr	r3, [pc, #528]	; (800d374 <tcp_receive+0x5d4>)
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	4413      	add	r3, r2
 800d168:	b29a      	uxth	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8b5b      	ldrh	r3, [r3, #26]
 800d174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d035      	beq.n	800d1e8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d180:	2b00      	cmp	r3, #0
 800d182:	d118      	bne.n	800d1b6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00c      	beq.n	800d1a6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fa ff52 	bl	8008042 <lwip_htonl>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dc20      	bgt.n	800d1e8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8b5b      	ldrh	r3, [r3, #26]
 800d1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1b4:	e018      	b.n	800d1e8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fa ff3d 	bl	8008042 <lwip_htonl>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	1ae3      	subs	r3, r4, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dc0b      	bgt.n	800d1e8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	8b5b      	ldrh	r3, [r3, #26]
 800d1d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1de:	e003      	b.n	800d1e8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f002 fbcf 	bl	800f984 <tcp_send_empty_ack>
 800d1e6:	e000      	b.n	800d1ea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1e8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d05b      	beq.n	800d2aa <tcp_receive+0x50a>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1f6:	4b60      	ldr	r3, [pc, #384]	; (800d378 <tcp_receive+0x5d8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	da54      	bge.n	800d2aa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d200:	4b5e      	ldr	r3, [pc, #376]	; (800d37c <tcp_receive+0x5dc>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	b29a      	uxth	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	b29b      	uxth	r3, r3
 800d210:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d214:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d21e:	10db      	asrs	r3, r3, #3
 800d220:	b21b      	sxth	r3, r3
 800d222:	b29b      	uxth	r3, r3
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	b29b      	uxth	r3, r3
 800d228:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d232:	b29a      	uxth	r2, r3
 800d234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d238:	4413      	add	r3, r2
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	b21a      	sxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d242:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d246:	2b00      	cmp	r3, #0
 800d248:	da05      	bge.n	800d256 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d24a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d24e:	425b      	negs	r3, r3
 800d250:	b29b      	uxth	r3, r3
 800d252:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d256:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d260:	109b      	asrs	r3, r3, #2
 800d262:	b21b      	sxth	r3, r3
 800d264:	b29b      	uxth	r3, r3
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d274:	b29a      	uxth	r2, r3
 800d276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d27a:	4413      	add	r3, r2
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	b21a      	sxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d28a:	10db      	asrs	r3, r3, #3
 800d28c:	b21b      	sxth	r3, r3
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d296:	b29b      	uxth	r3, r3
 800d298:	4413      	add	r3, r2
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	b21a      	sxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d2aa:	4b35      	ldr	r3, [pc, #212]	; (800d380 <tcp_receive+0x5e0>)
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 84e1 	beq.w	800dc76 <tcp_receive+0xed6>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7d1b      	ldrb	r3, [r3, #20]
 800d2b8:	2b06      	cmp	r3, #6
 800d2ba:	f200 84dc 	bhi.w	800dc76 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2c2:	4b30      	ldr	r3, [pc, #192]	; (800d384 <tcp_receive+0x5e4>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f2c0 808e 	blt.w	800d3ec <tcp_receive+0x64c>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2d4:	4b2a      	ldr	r3, [pc, #168]	; (800d380 <tcp_receive+0x5e0>)
 800d2d6:	881b      	ldrh	r3, [r3, #0]
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4b2a      	ldr	r3, [pc, #168]	; (800d384 <tcp_receive+0x5e4>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	440b      	add	r3, r1
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f300 8081 	bgt.w	800d3ec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d2ea:	4b27      	ldr	r3, [pc, #156]	; (800d388 <tcp_receive+0x5e8>)
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2f4:	4b23      	ldr	r3, [pc, #140]	; (800d384 <tcp_receive+0x5e4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d2fc:	4b22      	ldr	r3, [pc, #136]	; (800d388 <tcp_receive+0x5e8>)
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <tcp_receive+0x572>
 800d304:	4b21      	ldr	r3, [pc, #132]	; (800d38c <tcp_receive+0x5ec>)
 800d306:	f240 5294 	movw	r2, #1428	; 0x594
 800d30a:	4921      	ldr	r1, [pc, #132]	; (800d390 <tcp_receive+0x5f0>)
 800d30c:	4821      	ldr	r0, [pc, #132]	; (800d394 <tcp_receive+0x5f4>)
 800d30e:	f005 fab5 	bl	801287c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d318:	4293      	cmp	r3, r2
 800d31a:	d906      	bls.n	800d32a <tcp_receive+0x58a>
 800d31c:	4b1b      	ldr	r3, [pc, #108]	; (800d38c <tcp_receive+0x5ec>)
 800d31e:	f240 5295 	movw	r2, #1429	; 0x595
 800d322:	491d      	ldr	r1, [pc, #116]	; (800d398 <tcp_receive+0x5f8>)
 800d324:	481b      	ldr	r0, [pc, #108]	; (800d394 <tcp_receive+0x5f4>)
 800d326:	f005 faa9 	bl	801287c <iprintf>
      off = (u16_t)off32;
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d330:	4b15      	ldr	r3, [pc, #84]	; (800d388 <tcp_receive+0x5e8>)
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	891b      	ldrh	r3, [r3, #8]
 800d336:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d906      	bls.n	800d34c <tcp_receive+0x5ac>
 800d33e:	4b13      	ldr	r3, [pc, #76]	; (800d38c <tcp_receive+0x5ec>)
 800d340:	f240 5297 	movw	r2, #1431	; 0x597
 800d344:	4915      	ldr	r1, [pc, #84]	; (800d39c <tcp_receive+0x5fc>)
 800d346:	4813      	ldr	r0, [pc, #76]	; (800d394 <tcp_receive+0x5f4>)
 800d348:	f005 fa98 	bl	801287c <iprintf>
      inseg.len -= off;
 800d34c:	4b0e      	ldr	r3, [pc, #56]	; (800d388 <tcp_receive+0x5e8>)
 800d34e:	891a      	ldrh	r2, [r3, #8]
 800d350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	b29a      	uxth	r2, r3
 800d358:	4b0b      	ldr	r3, [pc, #44]	; (800d388 <tcp_receive+0x5e8>)
 800d35a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d35c:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <tcp_receive+0x5e8>)
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	891a      	ldrh	r2, [r3, #8]
 800d362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d36a:	e029      	b.n	800d3c0 <tcp_receive+0x620>
 800d36c:	08014ff8 	.word	0x08014ff8
 800d370:	08015000 	.word	0x08015000
 800d374:	200008bc 	.word	0x200008bc
 800d378:	200008b8 	.word	0x200008b8
 800d37c:	20011648 	.word	0x20011648
 800d380:	200008be 	.word	0x200008be
 800d384:	200008b4 	.word	0x200008b4
 800d388:	20000894 	.word	0x20000894
 800d38c:	08014c90 	.word	0x08014c90
 800d390:	08015008 	.word	0x08015008
 800d394:	08014cdc 	.word	0x08014cdc
 800d398:	08015018 	.word	0x08015018
 800d39c:	08015028 	.word	0x08015028
        off -= p->len;
 800d3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a2:	895b      	ldrh	r3, [r3, #10]
 800d3a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c2:	895b      	ldrh	r3, [r3, #10]
 800d3c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d8e9      	bhi.n	800d3a0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d3cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d3d4:	f7fc f84e 	bl	8009474 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	4a91      	ldr	r2, [pc, #580]	; (800d624 <tcp_receive+0x884>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	4b91      	ldr	r3, [pc, #580]	; (800d628 <tcp_receive+0x888>)
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	4a8f      	ldr	r2, [pc, #572]	; (800d624 <tcp_receive+0x884>)
 800d3e6:	6812      	ldr	r2, [r2, #0]
 800d3e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3ea:	e00d      	b.n	800d408 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d3ec:	4b8d      	ldr	r3, [pc, #564]	; (800d624 <tcp_receive+0x884>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	da06      	bge.n	800d408 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8b5b      	ldrh	r3, [r3, #26]
 800d3fe:	f043 0302 	orr.w	r3, r3, #2
 800d402:	b29a      	uxth	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d408:	4b86      	ldr	r3, [pc, #536]	; (800d624 <tcp_receive+0x884>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	f2c0 842a 	blt.w	800dc6c <tcp_receive+0xecc>
 800d418:	4b82      	ldr	r3, [pc, #520]	; (800d624 <tcp_receive+0x884>)
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d424:	440b      	add	r3, r1
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	3301      	adds	r3, #1
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f300 841e 	bgt.w	800dc6c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d434:	4b7b      	ldr	r3, [pc, #492]	; (800d624 <tcp_receive+0x884>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	429a      	cmp	r2, r3
 800d43a:	f040 829a 	bne.w	800d972 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d43e:	4b7a      	ldr	r3, [pc, #488]	; (800d628 <tcp_receive+0x888>)
 800d440:	891c      	ldrh	r4, [r3, #8]
 800d442:	4b79      	ldr	r3, [pc, #484]	; (800d628 <tcp_receive+0x888>)
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	899b      	ldrh	r3, [r3, #12]
 800d448:	b29b      	uxth	r3, r3
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fa fde4 	bl	8008018 <lwip_htons>
 800d450:	4603      	mov	r3, r0
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0303 	and.w	r3, r3, #3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <tcp_receive+0x6c0>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <tcp_receive+0x6c2>
 800d460:	2300      	movs	r3, #0
 800d462:	4423      	add	r3, r4
 800d464:	b29a      	uxth	r2, r3
 800d466:	4b71      	ldr	r3, [pc, #452]	; (800d62c <tcp_receive+0x88c>)
 800d468:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d46e:	4b6f      	ldr	r3, [pc, #444]	; (800d62c <tcp_receive+0x88c>)
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d275      	bcs.n	800d562 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d476:	4b6c      	ldr	r3, [pc, #432]	; (800d628 <tcp_receive+0x888>)
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	899b      	ldrh	r3, [r3, #12]
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fa fdca 	bl	8008018 <lwip_htons>
 800d484:	4603      	mov	r3, r0
 800d486:	b2db      	uxtb	r3, r3
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01f      	beq.n	800d4d0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d490:	4b65      	ldr	r3, [pc, #404]	; (800d628 <tcp_receive+0x888>)
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	b29b      	uxth	r3, r3
 800d498:	b21b      	sxth	r3, r3
 800d49a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d49e:	b21c      	sxth	r4, r3
 800d4a0:	4b61      	ldr	r3, [pc, #388]	; (800d628 <tcp_receive+0x888>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	899b      	ldrh	r3, [r3, #12]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fa fdb5 	bl	8008018 <lwip_htons>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fa fdac 	bl	8008018 <lwip_htons>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	4323      	orrs	r3, r4
 800d4c6:	b21a      	sxth	r2, r3
 800d4c8:	4b57      	ldr	r3, [pc, #348]	; (800d628 <tcp_receive+0x888>)
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	b292      	uxth	r2, r2
 800d4ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4d4:	4b54      	ldr	r3, [pc, #336]	; (800d628 <tcp_receive+0x888>)
 800d4d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d4d8:	4b53      	ldr	r3, [pc, #332]	; (800d628 <tcp_receive+0x888>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	899b      	ldrh	r3, [r3, #12]
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fa fd99 	bl	8008018 <lwip_htons>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 0302 	and.w	r3, r3, #2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <tcp_receive+0x75e>
            inseg.len -= 1;
 800d4f2:	4b4d      	ldr	r3, [pc, #308]	; (800d628 <tcp_receive+0x888>)
 800d4f4:	891b      	ldrh	r3, [r3, #8]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	4b4b      	ldr	r3, [pc, #300]	; (800d628 <tcp_receive+0x888>)
 800d4fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d4fe:	4b4a      	ldr	r3, [pc, #296]	; (800d628 <tcp_receive+0x888>)
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	4a49      	ldr	r2, [pc, #292]	; (800d628 <tcp_receive+0x888>)
 800d504:	8912      	ldrh	r2, [r2, #8]
 800d506:	4611      	mov	r1, r2
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fb feb3 	bl	8009274 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d50e:	4b46      	ldr	r3, [pc, #280]	; (800d628 <tcp_receive+0x888>)
 800d510:	891c      	ldrh	r4, [r3, #8]
 800d512:	4b45      	ldr	r3, [pc, #276]	; (800d628 <tcp_receive+0x888>)
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	899b      	ldrh	r3, [r3, #12]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fa fd7c 	bl	8008018 <lwip_htons>
 800d520:	4603      	mov	r3, r0
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0303 	and.w	r3, r3, #3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <tcp_receive+0x790>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <tcp_receive+0x792>
 800d530:	2300      	movs	r3, #0
 800d532:	4423      	add	r3, r4
 800d534:	b29a      	uxth	r2, r3
 800d536:	4b3d      	ldr	r3, [pc, #244]	; (800d62c <tcp_receive+0x88c>)
 800d538:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d53a:	4b3c      	ldr	r3, [pc, #240]	; (800d62c <tcp_receive+0x88c>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	461a      	mov	r2, r3
 800d540:	4b38      	ldr	r3, [pc, #224]	; (800d624 <tcp_receive+0x884>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	441a      	add	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d54e:	440b      	add	r3, r1
 800d550:	429a      	cmp	r2, r3
 800d552:	d006      	beq.n	800d562 <tcp_receive+0x7c2>
 800d554:	4b36      	ldr	r3, [pc, #216]	; (800d630 <tcp_receive+0x890>)
 800d556:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d55a:	4936      	ldr	r1, [pc, #216]	; (800d634 <tcp_receive+0x894>)
 800d55c:	4836      	ldr	r0, [pc, #216]	; (800d638 <tcp_receive+0x898>)
 800d55e:	f005 f98d 	bl	801287c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80e7 	beq.w	800d73a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d56c:	4b2e      	ldr	r3, [pc, #184]	; (800d628 <tcp_receive+0x888>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	899b      	ldrh	r3, [r3, #12]
 800d572:	b29b      	uxth	r3, r3
 800d574:	4618      	mov	r0, r3
 800d576:	f7fa fd4f 	bl	8008018 <lwip_htons>
 800d57a:	4603      	mov	r3, r0
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	2b00      	cmp	r3, #0
 800d584:	d010      	beq.n	800d5a8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d586:	e00a      	b.n	800d59e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d58c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7fd fcb0 	bl	800aefe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1f0      	bne.n	800d588 <tcp_receive+0x7e8>
 800d5a6:	e0c8      	b.n	800d73a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d5ae:	e052      	b.n	800d656 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	899b      	ldrh	r3, [r3, #12]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fa fd2d 	bl	8008018 <lwip_htons>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d03d      	beq.n	800d646 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d5ca:	4b17      	ldr	r3, [pc, #92]	; (800d628 <tcp_receive+0x888>)
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	899b      	ldrh	r3, [r3, #12]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fa fd20 	bl	8008018 <lwip_htons>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d130      	bne.n	800d646 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d5e4:	4b10      	ldr	r3, [pc, #64]	; (800d628 <tcp_receive+0x888>)
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	899b      	ldrh	r3, [r3, #12]
 800d5ea:	b29c      	uxth	r4, r3
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f7fa fd13 	bl	8008018 <lwip_htons>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	4b0c      	ldr	r3, [pc, #48]	; (800d628 <tcp_receive+0x888>)
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	4322      	orrs	r2, r4
 800d5fc:	b292      	uxth	r2, r2
 800d5fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d600:	4b09      	ldr	r3, [pc, #36]	; (800d628 <tcp_receive+0x888>)
 800d602:	891c      	ldrh	r4, [r3, #8]
 800d604:	4b08      	ldr	r3, [pc, #32]	; (800d628 <tcp_receive+0x888>)
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	899b      	ldrh	r3, [r3, #12]
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fa fd03 	bl	8008018 <lwip_htons>
 800d612:	4603      	mov	r3, r0
 800d614:	b2db      	uxtb	r3, r3
 800d616:	f003 0303 	and.w	r3, r3, #3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00e      	beq.n	800d63c <tcp_receive+0x89c>
 800d61e:	2301      	movs	r3, #1
 800d620:	e00d      	b.n	800d63e <tcp_receive+0x89e>
 800d622:	bf00      	nop
 800d624:	200008b4 	.word	0x200008b4
 800d628:	20000894 	.word	0x20000894
 800d62c:	200008be 	.word	0x200008be
 800d630:	08014c90 	.word	0x08014c90
 800d634:	08015038 	.word	0x08015038
 800d638:	08014cdc 	.word	0x08014cdc
 800d63c:	2300      	movs	r3, #0
 800d63e:	4423      	add	r3, r4
 800d640:	b29a      	uxth	r2, r3
 800d642:	4b98      	ldr	r3, [pc, #608]	; (800d8a4 <tcp_receive+0xb04>)
 800d644:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d648:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d650:	6938      	ldr	r0, [r7, #16]
 800d652:	f7fd fc54 	bl	800aefe <tcp_seg_free>
            while (next &&
 800d656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00e      	beq.n	800d67a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d65c:	4b91      	ldr	r3, [pc, #580]	; (800d8a4 <tcp_receive+0xb04>)
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	4b91      	ldr	r3, [pc, #580]	; (800d8a8 <tcp_receive+0xb08>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	441a      	add	r2, r3
 800d668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d670:	8909      	ldrh	r1, [r1, #8]
 800d672:	440b      	add	r3, r1
 800d674:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d676:	2b00      	cmp	r3, #0
 800d678:	da9a      	bge.n	800d5b0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d059      	beq.n	800d734 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d680:	4b88      	ldr	r3, [pc, #544]	; (800d8a4 <tcp_receive+0xb04>)
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	461a      	mov	r2, r3
 800d686:	4b88      	ldr	r3, [pc, #544]	; (800d8a8 <tcp_receive+0xb08>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	441a      	add	r2, r3
 800d68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d694:	2b00      	cmp	r3, #0
 800d696:	dd4d      	ble.n	800d734 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	4b81      	ldr	r3, [pc, #516]	; (800d8a8 <tcp_receive+0xb08>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	4b80      	ldr	r3, [pc, #512]	; (800d8ac <tcp_receive+0xb0c>)
 800d6ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d6ae:	4b7f      	ldr	r3, [pc, #508]	; (800d8ac <tcp_receive+0xb0c>)
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	899b      	ldrh	r3, [r3, #12]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fa fcae 	bl	8008018 <lwip_htons>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	f003 0302 	and.w	r3, r3, #2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d005      	beq.n	800d6d4 <tcp_receive+0x934>
                inseg.len -= 1;
 800d6c8:	4b78      	ldr	r3, [pc, #480]	; (800d8ac <tcp_receive+0xb0c>)
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	4b76      	ldr	r3, [pc, #472]	; (800d8ac <tcp_receive+0xb0c>)
 800d6d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d6d4:	4b75      	ldr	r3, [pc, #468]	; (800d8ac <tcp_receive+0xb0c>)
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	4a74      	ldr	r2, [pc, #464]	; (800d8ac <tcp_receive+0xb0c>)
 800d6da:	8912      	ldrh	r2, [r2, #8]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fb fdc8 	bl	8009274 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d6e4:	4b71      	ldr	r3, [pc, #452]	; (800d8ac <tcp_receive+0xb0c>)
 800d6e6:	891c      	ldrh	r4, [r3, #8]
 800d6e8:	4b70      	ldr	r3, [pc, #448]	; (800d8ac <tcp_receive+0xb0c>)
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	899b      	ldrh	r3, [r3, #12]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fa fc91 	bl	8008018 <lwip_htons>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <tcp_receive+0x966>
 800d702:	2301      	movs	r3, #1
 800d704:	e000      	b.n	800d708 <tcp_receive+0x968>
 800d706:	2300      	movs	r3, #0
 800d708:	4423      	add	r3, r4
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	4b65      	ldr	r3, [pc, #404]	; (800d8a4 <tcp_receive+0xb04>)
 800d70e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d710:	4b64      	ldr	r3, [pc, #400]	; (800d8a4 <tcp_receive+0xb04>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	461a      	mov	r2, r3
 800d716:	4b64      	ldr	r3, [pc, #400]	; (800d8a8 <tcp_receive+0xb08>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	441a      	add	r2, r3
 800d71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	429a      	cmp	r2, r3
 800d724:	d006      	beq.n	800d734 <tcp_receive+0x994>
 800d726:	4b62      	ldr	r3, [pc, #392]	; (800d8b0 <tcp_receive+0xb10>)
 800d728:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d72c:	4961      	ldr	r1, [pc, #388]	; (800d8b4 <tcp_receive+0xb14>)
 800d72e:	4862      	ldr	r0, [pc, #392]	; (800d8b8 <tcp_receive+0xb18>)
 800d730:	f005 f8a4 	bl	801287c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d738:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d73a:	4b5a      	ldr	r3, [pc, #360]	; (800d8a4 <tcp_receive+0xb04>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	4b59      	ldr	r3, [pc, #356]	; (800d8a8 <tcp_receive+0xb08>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	441a      	add	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d74e:	4b55      	ldr	r3, [pc, #340]	; (800d8a4 <tcp_receive+0xb04>)
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d206      	bcs.n	800d764 <tcp_receive+0x9c4>
 800d756:	4b56      	ldr	r3, [pc, #344]	; (800d8b0 <tcp_receive+0xb10>)
 800d758:	f240 6207 	movw	r2, #1543	; 0x607
 800d75c:	4957      	ldr	r1, [pc, #348]	; (800d8bc <tcp_receive+0xb1c>)
 800d75e:	4856      	ldr	r0, [pc, #344]	; (800d8b8 <tcp_receive+0xb18>)
 800d760:	f005 f88c 	bl	801287c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d768:	4b4e      	ldr	r3, [pc, #312]	; (800d8a4 <tcp_receive+0xb04>)
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	b29a      	uxth	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7fc fe9d 	bl	800a4b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d77a:	4b4c      	ldr	r3, [pc, #304]	; (800d8ac <tcp_receive+0xb0c>)
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	891b      	ldrh	r3, [r3, #8]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d006      	beq.n	800d792 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d784:	4b49      	ldr	r3, [pc, #292]	; (800d8ac <tcp_receive+0xb0c>)
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4a4d      	ldr	r2, [pc, #308]	; (800d8c0 <tcp_receive+0xb20>)
 800d78a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d78c:	4b47      	ldr	r3, [pc, #284]	; (800d8ac <tcp_receive+0xb0c>)
 800d78e:	2200      	movs	r2, #0
 800d790:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d792:	4b46      	ldr	r3, [pc, #280]	; (800d8ac <tcp_receive+0xb0c>)
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	899b      	ldrh	r3, [r3, #12]
 800d798:	b29b      	uxth	r3, r3
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fa fc3c 	bl	8008018 <lwip_htons>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 0301 	and.w	r3, r3, #1
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 80b8 	beq.w	800d91e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d7ae:	4b45      	ldr	r3, [pc, #276]	; (800d8c4 <tcp_receive+0xb24>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	f043 0320 	orr.w	r3, r3, #32
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	4b42      	ldr	r3, [pc, #264]	; (800d8c4 <tcp_receive+0xb24>)
 800d7ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d7bc:	e0af      	b.n	800d91e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	4a36      	ldr	r2, [pc, #216]	; (800d8a8 <tcp_receive+0xb08>)
 800d7ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	891b      	ldrh	r3, [r3, #8]
 800d7d4:	461c      	mov	r4, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	899b      	ldrh	r3, [r3, #12]
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fa fc1a 	bl	8008018 <lwip_htons>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	f003 0303 	and.w	r3, r3, #3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <tcp_receive+0xa54>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e000      	b.n	800d7f6 <tcp_receive+0xa56>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	191a      	adds	r2, r3, r4
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fc:	441a      	add	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d806:	461c      	mov	r4, r3
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	891b      	ldrh	r3, [r3, #8]
 800d80c:	461d      	mov	r5, r3
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	899b      	ldrh	r3, [r3, #12]
 800d814:	b29b      	uxth	r3, r3
 800d816:	4618      	mov	r0, r3
 800d818:	f7fa fbfe 	bl	8008018 <lwip_htons>
 800d81c:	4603      	mov	r3, r0
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	f003 0303 	and.w	r3, r3, #3
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <tcp_receive+0xa8c>
 800d828:	2301      	movs	r3, #1
 800d82a:	e000      	b.n	800d82e <tcp_receive+0xa8e>
 800d82c:	2300      	movs	r3, #0
 800d82e:	442b      	add	r3, r5
 800d830:	429c      	cmp	r4, r3
 800d832:	d206      	bcs.n	800d842 <tcp_receive+0xaa2>
 800d834:	4b1e      	ldr	r3, [pc, #120]	; (800d8b0 <tcp_receive+0xb10>)
 800d836:	f240 622b 	movw	r2, #1579	; 0x62b
 800d83a:	4923      	ldr	r1, [pc, #140]	; (800d8c8 <tcp_receive+0xb28>)
 800d83c:	481e      	ldr	r0, [pc, #120]	; (800d8b8 <tcp_receive+0xb18>)
 800d83e:	f005 f81d 	bl	801287c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	891b      	ldrh	r3, [r3, #8]
 800d846:	461c      	mov	r4, r3
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	899b      	ldrh	r3, [r3, #12]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	4618      	mov	r0, r3
 800d852:	f7fa fbe1 	bl	8008018 <lwip_htons>
 800d856:	4603      	mov	r3, r0
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <tcp_receive+0xac6>
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <tcp_receive+0xac8>
 800d866:	2300      	movs	r3, #0
 800d868:	1919      	adds	r1, r3, r4
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d86e:	b28b      	uxth	r3, r1
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	b29a      	uxth	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7fc fe1b 	bl	800a4b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	891b      	ldrh	r3, [r3, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d028      	beq.n	800d8da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d888:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <tcp_receive+0xb20>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01d      	beq.n	800d8cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d890:	4b0b      	ldr	r3, [pc, #44]	; (800d8c0 <tcp_receive+0xb20>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	f7fb ff32 	bl	8009704 <pbuf_cat>
 800d8a0:	e018      	b.n	800d8d4 <tcp_receive+0xb34>
 800d8a2:	bf00      	nop
 800d8a4:	200008be 	.word	0x200008be
 800d8a8:	200008b4 	.word	0x200008b4
 800d8ac:	20000894 	.word	0x20000894
 800d8b0:	08014c90 	.word	0x08014c90
 800d8b4:	08015070 	.word	0x08015070
 800d8b8:	08014cdc 	.word	0x08014cdc
 800d8bc:	080150ac 	.word	0x080150ac
 800d8c0:	200008c4 	.word	0x200008c4
 800d8c4:	200008c1 	.word	0x200008c1
 800d8c8:	080150cc 	.word	0x080150cc
            } else {
              recv_data = cseg->p;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4a70      	ldr	r2, [pc, #448]	; (800da94 <tcp_receive+0xcf4>)
 800d8d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	899b      	ldrh	r3, [r3, #12]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fa fb98 	bl	8008018 <lwip_htons>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00d      	beq.n	800d910 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d8f4:	4b68      	ldr	r3, [pc, #416]	; (800da98 <tcp_receive+0xcf8>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f043 0320 	orr.w	r3, r3, #32
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4b66      	ldr	r3, [pc, #408]	; (800da98 <tcp_receive+0xcf8>)
 800d900:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7d1b      	ldrb	r3, [r3, #20]
 800d906:	2b04      	cmp	r3, #4
 800d908:	d102      	bne.n	800d910 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2207      	movs	r2, #7
 800d90e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d918:	68b8      	ldr	r0, [r7, #8]
 800d91a:	f7fd faf0 	bl	800aefe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d922:	2b00      	cmp	r3, #0
 800d924:	d008      	beq.n	800d938 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d932:	429a      	cmp	r2, r3
 800d934:	f43f af43 	beq.w	800d7be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	8b5b      	ldrh	r3, [r3, #26]
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <tcp_receive+0xbc2>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	8b5b      	ldrh	r3, [r3, #26]
 800d948:	f023 0301 	bic.w	r3, r3, #1
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	835a      	strh	r2, [r3, #26]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	8b5b      	ldrh	r3, [r3, #26]
 800d956:	f043 0302 	orr.w	r3, r3, #2
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d960:	e188      	b.n	800dc74 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	8b5b      	ldrh	r3, [r3, #26]
 800d966:	f043 0301 	orr.w	r3, r3, #1
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d970:	e180      	b.n	800dc74 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d976:	2b00      	cmp	r3, #0
 800d978:	d106      	bne.n	800d988 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d97a:	4848      	ldr	r0, [pc, #288]	; (800da9c <tcp_receive+0xcfc>)
 800d97c:	f7fd faf6 	bl	800af6c <tcp_seg_copy>
 800d980:	4602      	mov	r2, r0
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	675a      	str	r2, [r3, #116]	; 0x74
 800d986:	e16d      	b.n	800dc64 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d988:	2300      	movs	r3, #0
 800d98a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d990:	63bb      	str	r3, [r7, #56]	; 0x38
 800d992:	e157      	b.n	800dc44 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	4b41      	ldr	r3, [pc, #260]	; (800daa0 <tcp_receive+0xd00>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d11d      	bne.n	800d9de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d9a2:	4b3e      	ldr	r3, [pc, #248]	; (800da9c <tcp_receive+0xcfc>)
 800d9a4:	891a      	ldrh	r2, [r3, #8]
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	891b      	ldrh	r3, [r3, #8]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	f240 814f 	bls.w	800dc4e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9b0:	483a      	ldr	r0, [pc, #232]	; (800da9c <tcp_receive+0xcfc>)
 800d9b2:	f7fd fadb 	bl	800af6c <tcp_seg_copy>
 800d9b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 8149 	beq.w	800dc52 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c8:	697a      	ldr	r2, [r7, #20]
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	e002      	b.n	800d9d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d9d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9d6:	6978      	ldr	r0, [r7, #20]
 800d9d8:	f7ff f8de 	bl	800cb98 <tcp_oos_insert_segment>
                }
                break;
 800d9dc:	e139      	b.n	800dc52 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d117      	bne.n	800da14 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d9e4:	4b2e      	ldr	r3, [pc, #184]	; (800daa0 <tcp_receive+0xd00>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da57      	bge.n	800daa4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9f4:	4829      	ldr	r0, [pc, #164]	; (800da9c <tcp_receive+0xcfc>)
 800d9f6:	f7fd fab9 	bl	800af6c <tcp_seg_copy>
 800d9fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 8129 	beq.w	800dc56 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69ba      	ldr	r2, [r7, #24]
 800da08:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800da0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da0c:	69b8      	ldr	r0, [r7, #24]
 800da0e:	f7ff f8c3 	bl	800cb98 <tcp_oos_insert_segment>
                  }
                  break;
 800da12:	e120      	b.n	800dc56 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800da14:	4b22      	ldr	r3, [pc, #136]	; (800daa0 <tcp_receive+0xd00>)
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	3b01      	subs	r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	db3e      	blt.n	800daa4 <tcp_receive+0xd04>
 800da26:	4b1e      	ldr	r3, [pc, #120]	; (800daa0 <tcp_receive+0xd00>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	3301      	adds	r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	dc35      	bgt.n	800daa4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da38:	4818      	ldr	r0, [pc, #96]	; (800da9c <tcp_receive+0xcfc>)
 800da3a:	f7fd fa97 	bl	800af6c <tcp_seg_copy>
 800da3e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 8109 	beq.w	800dc5a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da50:	8912      	ldrh	r2, [r2, #8]
 800da52:	441a      	add	r2, r3
 800da54:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <tcp_receive+0xd00>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	dd12      	ble.n	800da84 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <tcp_receive+0xd00>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	b29a      	uxth	r2, r3
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	b29a      	uxth	r2, r3
 800da70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da72:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800da74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7a:	891b      	ldrh	r3, [r3, #8]
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f7fb fbf8 	bl	8009274 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800da84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da86:	69fa      	ldr	r2, [r7, #28]
 800da88:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800da8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da8c:	69f8      	ldr	r0, [r7, #28]
 800da8e:	f7ff f883 	bl	800cb98 <tcp_oos_insert_segment>
                  }
                  break;
 800da92:	e0e2      	b.n	800dc5a <tcp_receive+0xeba>
 800da94:	200008c4 	.word	0x200008c4
 800da98:	200008c1 	.word	0x200008c1
 800da9c:	20000894 	.word	0x20000894
 800daa0:	200008b4 	.word	0x200008b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800daa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	f040 80c6 	bne.w	800dc3e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dab2:	4b80      	ldr	r3, [pc, #512]	; (800dcb4 <tcp_receive+0xf14>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f340 80bd 	ble.w	800dc3e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fa faa3 	bl	8008018 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f040 80bf 	bne.w	800dc5e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dae0:	4875      	ldr	r0, [pc, #468]	; (800dcb8 <tcp_receive+0xf18>)
 800dae2:	f7fd fa43 	bl	800af6c <tcp_seg_copy>
 800dae6:	4602      	mov	r2, r0
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 80b6 	beq.w	800dc62 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dafe:	8912      	ldrh	r2, [r2, #8]
 800db00:	441a      	add	r2, r3
 800db02:	4b6c      	ldr	r3, [pc, #432]	; (800dcb4 <tcp_receive+0xf14>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	dd12      	ble.n	800db32 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800db0c:	4b69      	ldr	r3, [pc, #420]	; (800dcb4 <tcp_receive+0xf14>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	b29a      	uxth	r2, r3
 800db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	b29b      	uxth	r3, r3
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800db22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	891b      	ldrh	r3, [r3, #8]
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7fb fba1 	bl	8009274 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800db32:	4b62      	ldr	r3, [pc, #392]	; (800dcbc <tcp_receive+0xf1c>)
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	4b5e      	ldr	r3, [pc, #376]	; (800dcb4 <tcp_receive+0xf14>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	441a      	add	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db46:	440b      	add	r3, r1
 800db48:	1ad3      	subs	r3, r2, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f340 8089 	ble.w	800dc62 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	899b      	ldrh	r3, [r3, #12]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fa fa5c 	bl	8008018 <lwip_htons>
 800db60:	4603      	mov	r3, r0
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d022      	beq.n	800dbb2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	899b      	ldrh	r3, [r3, #12]
 800db74:	b29b      	uxth	r3, r3
 800db76:	b21b      	sxth	r3, r3
 800db78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800db7c:	b21c      	sxth	r4, r3
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	899b      	ldrh	r3, [r3, #12]
 800db86:	b29b      	uxth	r3, r3
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fa fa45 	bl	8008018 <lwip_htons>
 800db8e:	4603      	mov	r3, r0
 800db90:	b2db      	uxtb	r3, r3
 800db92:	b29b      	uxth	r3, r3
 800db94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fa fa3c 	bl	8008018 <lwip_htons>
 800dba0:	4603      	mov	r3, r0
 800dba2:	b21b      	sxth	r3, r3
 800dba4:	4323      	orrs	r3, r4
 800dba6:	b21a      	sxth	r2, r3
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	b292      	uxth	r2, r2
 800dbb0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbbc:	4413      	add	r3, r2
 800dbbe:	b299      	uxth	r1, r3
 800dbc0:	4b3c      	ldr	r3, [pc, #240]	; (800dcb4 <tcp_receive+0xf14>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	1a8a      	subs	r2, r1, r2
 800dbcc:	b292      	uxth	r2, r2
 800dbce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	891b      	ldrh	r3, [r3, #8]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4610      	mov	r0, r2
 800dbe0:	f7fb fb48 	bl	8009274 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	891c      	ldrh	r4, [r3, #8]
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fa fa0f 	bl	8008018 <lwip_htons>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0303 	and.w	r3, r3, #3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <tcp_receive+0xe6a>
 800dc06:	2301      	movs	r3, #1
 800dc08:	e000      	b.n	800dc0c <tcp_receive+0xe6c>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	4423      	add	r3, r4
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <tcp_receive+0xf1c>)
 800dc12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dc14:	4b29      	ldr	r3, [pc, #164]	; (800dcbc <tcp_receive+0xf1c>)
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	4b26      	ldr	r3, [pc, #152]	; (800dcb4 <tcp_receive+0xf14>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	441a      	add	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc28:	440b      	add	r3, r1
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d019      	beq.n	800dc62 <tcp_receive+0xec2>
 800dc2e:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <tcp_receive+0xf20>)
 800dc30:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dc34:	4923      	ldr	r1, [pc, #140]	; (800dcc4 <tcp_receive+0xf24>)
 800dc36:	4824      	ldr	r0, [pc, #144]	; (800dcc8 <tcp_receive+0xf28>)
 800dc38:	f004 fe20 	bl	801287c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dc3c:	e011      	b.n	800dc62 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f47f aea4 	bne.w	800d994 <tcp_receive+0xbf4>
 800dc4c:	e00a      	b.n	800dc64 <tcp_receive+0xec4>
                break;
 800dc4e:	bf00      	nop
 800dc50:	e008      	b.n	800dc64 <tcp_receive+0xec4>
                break;
 800dc52:	bf00      	nop
 800dc54:	e006      	b.n	800dc64 <tcp_receive+0xec4>
                  break;
 800dc56:	bf00      	nop
 800dc58:	e004      	b.n	800dc64 <tcp_receive+0xec4>
                  break;
 800dc5a:	bf00      	nop
 800dc5c:	e002      	b.n	800dc64 <tcp_receive+0xec4>
                  break;
 800dc5e:	bf00      	nop
 800dc60:	e000      	b.n	800dc64 <tcp_receive+0xec4>
                break;
 800dc62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 fe8d 	bl	800f984 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dc6a:	e003      	b.n	800dc74 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f001 fe89 	bl	800f984 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc72:	e01a      	b.n	800dcaa <tcp_receive+0xf0a>
 800dc74:	e019      	b.n	800dcaa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dc76:	4b0f      	ldr	r3, [pc, #60]	; (800dcb4 <tcp_receive+0xf14>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	db0a      	blt.n	800dc9a <tcp_receive+0xefa>
 800dc84:	4b0b      	ldr	r3, [pc, #44]	; (800dcb4 <tcp_receive+0xf14>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc90:	440b      	add	r3, r1
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	3301      	adds	r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd07      	ble.n	800dcaa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	8b5b      	ldrh	r3, [r3, #26]
 800dc9e:	f043 0302 	orr.w	r3, r3, #2
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dca8:	e7ff      	b.n	800dcaa <tcp_receive+0xf0a>
 800dcaa:	bf00      	nop
 800dcac:	3750      	adds	r7, #80	; 0x50
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bdb0      	pop	{r4, r5, r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	200008b4 	.word	0x200008b4
 800dcb8:	20000894 	.word	0x20000894
 800dcbc:	200008be 	.word	0x200008be
 800dcc0:	08014c90 	.word	0x08014c90
 800dcc4:	08015038 	.word	0x08015038
 800dcc8:	08014cdc 	.word	0x08014cdc

0800dccc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dcd2:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <tcp_get_next_optbyte+0x5c>)
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	b291      	uxth	r1, r2
 800dcda:	4a13      	ldr	r2, [pc, #76]	; (800dd28 <tcp_get_next_optbyte+0x5c>)
 800dcdc:	8011      	strh	r1, [r2, #0]
 800dcde:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dce0:	4b12      	ldr	r3, [pc, #72]	; (800dd2c <tcp_get_next_optbyte+0x60>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <tcp_get_next_optbyte+0x26>
 800dce8:	4b11      	ldr	r3, [pc, #68]	; (800dd30 <tcp_get_next_optbyte+0x64>)
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	88fa      	ldrh	r2, [r7, #6]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d208      	bcs.n	800dd04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dcf2:	4b10      	ldr	r3, [pc, #64]	; (800dd34 <tcp_get_next_optbyte+0x68>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3314      	adds	r3, #20
 800dcf8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dcfa:	88fb      	ldrh	r3, [r7, #6]
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	e00b      	b.n	800dd1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dd04:	88fb      	ldrh	r3, [r7, #6]
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	4b09      	ldr	r3, [pc, #36]	; (800dd30 <tcp_get_next_optbyte+0x64>)
 800dd0a:	881b      	ldrh	r3, [r3, #0]
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dd12:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <tcp_get_next_optbyte+0x60>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	797b      	ldrb	r3, [r7, #5]
 800dd18:	4413      	add	r3, r2
 800dd1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr
 800dd28:	200008b0 	.word	0x200008b0
 800dd2c:	200008ac 	.word	0x200008ac
 800dd30:	200008aa 	.word	0x200008aa
 800dd34:	200008a4 	.word	0x200008a4

0800dd38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d106      	bne.n	800dd54 <tcp_parseopt+0x1c>
 800dd46:	4b32      	ldr	r3, [pc, #200]	; (800de10 <tcp_parseopt+0xd8>)
 800dd48:	f240 727d 	movw	r2, #1917	; 0x77d
 800dd4c:	4931      	ldr	r1, [pc, #196]	; (800de14 <tcp_parseopt+0xdc>)
 800dd4e:	4832      	ldr	r0, [pc, #200]	; (800de18 <tcp_parseopt+0xe0>)
 800dd50:	f004 fd94 	bl	801287c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dd54:	4b31      	ldr	r3, [pc, #196]	; (800de1c <tcp_parseopt+0xe4>)
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d055      	beq.n	800de08 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd5c:	4b30      	ldr	r3, [pc, #192]	; (800de20 <tcp_parseopt+0xe8>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	801a      	strh	r2, [r3, #0]
 800dd62:	e045      	b.n	800ddf0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800dd64:	f7ff ffb2 	bl	800dccc <tcp_get_next_optbyte>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d006      	beq.n	800dd80 <tcp_parseopt+0x48>
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	dc2b      	bgt.n	800ddce <tcp_parseopt+0x96>
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d041      	beq.n	800ddfe <tcp_parseopt+0xc6>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d127      	bne.n	800ddce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dd7e:	e037      	b.n	800ddf0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dd80:	f7ff ffa4 	bl	800dccc <tcp_get_next_optbyte>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d13b      	bne.n	800de02 <tcp_parseopt+0xca>
 800dd8a:	4b25      	ldr	r3, [pc, #148]	; (800de20 <tcp_parseopt+0xe8>)
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	4a22      	ldr	r2, [pc, #136]	; (800de1c <tcp_parseopt+0xe4>)
 800dd92:	8812      	ldrh	r2, [r2, #0]
 800dd94:	4293      	cmp	r3, r2
 800dd96:	da34      	bge.n	800de02 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dd98:	f7ff ff98 	bl	800dccc <tcp_get_next_optbyte>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	021b      	lsls	r3, r3, #8
 800dda2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dda4:	f7ff ff92 	bl	800dccc <tcp_get_next_optbyte>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	89bb      	ldrh	r3, [r7, #12]
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ddb2:	89bb      	ldrh	r3, [r7, #12]
 800ddb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddb8:	d804      	bhi.n	800ddc4 <tcp_parseopt+0x8c>
 800ddba:	89bb      	ldrh	r3, [r7, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <tcp_parseopt+0x8c>
 800ddc0:	89ba      	ldrh	r2, [r7, #12]
 800ddc2:	e001      	b.n	800ddc8 <tcp_parseopt+0x90>
 800ddc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ddcc:	e010      	b.n	800ddf0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ddce:	f7ff ff7d 	bl	800dccc <tcp_get_next_optbyte>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ddd6:	7afb      	ldrb	r3, [r7, #11]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d914      	bls.n	800de06 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dddc:	7afb      	ldrb	r3, [r7, #11]
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <tcp_parseopt+0xe8>)
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	4413      	add	r3, r2
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	3b02      	subs	r3, #2
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b0c      	ldr	r3, [pc, #48]	; (800de20 <tcp_parseopt+0xe8>)
 800ddee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ddf0:	4b0b      	ldr	r3, [pc, #44]	; (800de20 <tcp_parseopt+0xe8>)
 800ddf2:	881a      	ldrh	r2, [r3, #0]
 800ddf4:	4b09      	ldr	r3, [pc, #36]	; (800de1c <tcp_parseopt+0xe4>)
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d3b3      	bcc.n	800dd64 <tcp_parseopt+0x2c>
 800ddfc:	e004      	b.n	800de08 <tcp_parseopt+0xd0>
          return;
 800ddfe:	bf00      	nop
 800de00:	e002      	b.n	800de08 <tcp_parseopt+0xd0>
            return;
 800de02:	bf00      	nop
 800de04:	e000      	b.n	800de08 <tcp_parseopt+0xd0>
            return;
 800de06:	bf00      	nop
      }
    }
  }
}
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	08014c90 	.word	0x08014c90
 800de14:	080150f4 	.word	0x080150f4
 800de18:	08014cdc 	.word	0x08014cdc
 800de1c:	200008a8 	.word	0x200008a8
 800de20:	200008b0 	.word	0x200008b0

0800de24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800de24:	b480      	push	{r7}
 800de26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800de28:	4b05      	ldr	r3, [pc, #20]	; (800de40 <tcp_trigger_input_pcb_close+0x1c>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	f043 0310 	orr.w	r3, r3, #16
 800de30:	b2da      	uxtb	r2, r3
 800de32:	4b03      	ldr	r3, [pc, #12]	; (800de40 <tcp_trigger_input_pcb_close+0x1c>)
 800de34:	701a      	strb	r2, [r3, #0]
}
 800de36:	bf00      	nop
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	200008c1 	.word	0x200008c1

0800de44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00a      	beq.n	800de6c <tcp_route+0x28>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	7a1b      	ldrb	r3, [r3, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d006      	beq.n	800de6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	7a1b      	ldrb	r3, [r3, #8]
 800de62:	4618      	mov	r0, r3
 800de64:	f7fb f82c 	bl	8008ec0 <netif_get_by_index>
 800de68:	4603      	mov	r3, r0
 800de6a:	e003      	b.n	800de74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f003 fad7 	bl	8011420 <ip4_route>
 800de72:	4603      	mov	r3, r0
  }
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d105      	bne.n	800de9e <tcp_create_segment+0x22>
 800de92:	4b44      	ldr	r3, [pc, #272]	; (800dfa4 <tcp_create_segment+0x128>)
 800de94:	22a3      	movs	r2, #163	; 0xa3
 800de96:	4944      	ldr	r1, [pc, #272]	; (800dfa8 <tcp_create_segment+0x12c>)
 800de98:	4844      	ldr	r0, [pc, #272]	; (800dfac <tcp_create_segment+0x130>)
 800de9a:	f004 fcef 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d105      	bne.n	800deb0 <tcp_create_segment+0x34>
 800dea4:	4b3f      	ldr	r3, [pc, #252]	; (800dfa4 <tcp_create_segment+0x128>)
 800dea6:	22a4      	movs	r2, #164	; 0xa4
 800dea8:	4941      	ldr	r1, [pc, #260]	; (800dfb0 <tcp_create_segment+0x134>)
 800deaa:	4840      	ldr	r0, [pc, #256]	; (800dfac <tcp_create_segment+0x130>)
 800deac:	f004 fce6 	bl	801287c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800deb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f003 0304 	and.w	r3, r3, #4
 800debc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800debe:	2003      	movs	r0, #3
 800dec0:	f7fa fd00 	bl	80088c4 <memp_malloc>
 800dec4:	6138      	str	r0, [r7, #16]
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d104      	bne.n	800ded6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800decc:	68b8      	ldr	r0, [r7, #8]
 800dece:	f7fb fb57 	bl	8009580 <pbuf_free>
    return NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	e061      	b.n	800df9a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dedc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	891a      	ldrh	r2, [r3, #8]
 800deee:	7dfb      	ldrb	r3, [r7, #23]
 800def0:	b29b      	uxth	r3, r3
 800def2:	429a      	cmp	r2, r3
 800def4:	d205      	bcs.n	800df02 <tcp_create_segment+0x86>
 800def6:	4b2b      	ldr	r3, [pc, #172]	; (800dfa4 <tcp_create_segment+0x128>)
 800def8:	22b0      	movs	r2, #176	; 0xb0
 800defa:	492e      	ldr	r1, [pc, #184]	; (800dfb4 <tcp_create_segment+0x138>)
 800defc:	482b      	ldr	r0, [pc, #172]	; (800dfac <tcp_create_segment+0x130>)
 800defe:	f004 fcbd 	bl	801287c <iprintf>
  seg->len = p->tot_len - optlen;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	891a      	ldrh	r2, [r3, #8]
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800df12:	2114      	movs	r1, #20
 800df14:	68b8      	ldr	r0, [r7, #8]
 800df16:	f7fb fa9d 	bl	8009454 <pbuf_add_header>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d004      	beq.n	800df2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800df20:	6938      	ldr	r0, [r7, #16]
 800df22:	f7fc ffec 	bl	800aefe <tcp_seg_free>
    return NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	e037      	b.n	800df9a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	685a      	ldr	r2, [r3, #4]
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8ada      	ldrh	r2, [r3, #22]
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	68dc      	ldr	r4, [r3, #12]
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fa f86b 	bl	8008018 <lwip_htons>
 800df42:	4603      	mov	r3, r0
 800df44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8b1a      	ldrh	r2, [r3, #24]
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	68dc      	ldr	r4, [r3, #12]
 800df4e:	4610      	mov	r0, r2
 800df50:	f7fa f862 	bl	8008018 <lwip_htons>
 800df54:	4603      	mov	r3, r0
 800df56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	68dc      	ldr	r4, [r3, #12]
 800df5c:	6838      	ldr	r0, [r7, #0]
 800df5e:	f7fa f870 	bl	8008042 <lwip_htonl>
 800df62:	4603      	mov	r3, r0
 800df64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	089b      	lsrs	r3, r3, #2
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	3305      	adds	r3, #5
 800df70:	b29b      	uxth	r3, r3
 800df72:	031b      	lsls	r3, r3, #12
 800df74:	b29a      	uxth	r2, r3
 800df76:	79fb      	ldrb	r3, [r7, #7]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	68dc      	ldr	r4, [r3, #12]
 800df82:	4610      	mov	r0, r2
 800df84:	f7fa f848 	bl	8008018 <lwip_htons>
 800df88:	4603      	mov	r3, r0
 800df8a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	2200      	movs	r2, #0
 800df92:	749a      	strb	r2, [r3, #18]
 800df94:	2200      	movs	r2, #0
 800df96:	74da      	strb	r2, [r3, #19]
  return seg;
 800df98:	693b      	ldr	r3, [r7, #16]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	371c      	adds	r7, #28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	08015110 	.word	0x08015110
 800dfa8:	08015144 	.word	0x08015144
 800dfac:	08015164 	.word	0x08015164
 800dfb0:	0801518c 	.word	0x0801518c
 800dfb4:	080151b0 	.word	0x080151b0

0800dfb8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	607b      	str	r3, [r7, #4]
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	81bb      	strh	r3, [r7, #12]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800dfcc:	89bb      	ldrh	r3, [r7, #12]
 800dfce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d105      	bne.n	800dfe2 <tcp_pbuf_prealloc+0x2a>
 800dfd6:	4b30      	ldr	r3, [pc, #192]	; (800e098 <tcp_pbuf_prealloc+0xe0>)
 800dfd8:	22e8      	movs	r2, #232	; 0xe8
 800dfda:	4930      	ldr	r1, [pc, #192]	; (800e09c <tcp_pbuf_prealloc+0xe4>)
 800dfdc:	4830      	ldr	r0, [pc, #192]	; (800e0a0 <tcp_pbuf_prealloc+0xe8>)
 800dfde:	f004 fc4d 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d105      	bne.n	800dff4 <tcp_pbuf_prealloc+0x3c>
 800dfe8:	4b2b      	ldr	r3, [pc, #172]	; (800e098 <tcp_pbuf_prealloc+0xe0>)
 800dfea:	22e9      	movs	r2, #233	; 0xe9
 800dfec:	492d      	ldr	r1, [pc, #180]	; (800e0a4 <tcp_pbuf_prealloc+0xec>)
 800dfee:	482c      	ldr	r0, [pc, #176]	; (800e0a0 <tcp_pbuf_prealloc+0xe8>)
 800dff0:	f004 fc44 	bl	801287c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800dff4:	89ba      	ldrh	r2, [r7, #12]
 800dff6:	897b      	ldrh	r3, [r7, #10]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d221      	bcs.n	800e040 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dffc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e000:	f003 0302 	and.w	r3, r3, #2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d111      	bne.n	800e02c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	8b5b      	ldrh	r3, [r3, #26]
 800e00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e010:	2b00      	cmp	r3, #0
 800e012:	d115      	bne.n	800e040 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e020:	2b00      	cmp	r3, #0
 800e022:	d103      	bne.n	800e02c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e024:	6a3b      	ldr	r3, [r7, #32]
 800e026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d009      	beq.n	800e040 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e02c:	89bb      	ldrh	r3, [r7, #12]
 800e02e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800e032:	f023 0203 	bic.w	r2, r3, #3
 800e036:	897b      	ldrh	r3, [r7, #10]
 800e038:	4293      	cmp	r3, r2
 800e03a:	bf28      	it	cs
 800e03c:	4613      	movcs	r3, r2
 800e03e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e040:	8af9      	ldrh	r1, [r7, #22]
 800e042:	7bfb      	ldrb	r3, [r7, #15]
 800e044:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fa ffb5 	bl	8008fb8 <pbuf_alloc>
 800e04e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	e019      	b.n	800e08e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <tcp_pbuf_prealloc+0xb8>
 800e062:	4b0d      	ldr	r3, [pc, #52]	; (800e098 <tcp_pbuf_prealloc+0xe0>)
 800e064:	f240 120b 	movw	r2, #267	; 0x10b
 800e068:	490f      	ldr	r1, [pc, #60]	; (800e0a8 <tcp_pbuf_prealloc+0xf0>)
 800e06a:	480d      	ldr	r0, [pc, #52]	; (800e0a0 <tcp_pbuf_prealloc+0xe8>)
 800e06c:	f004 fc06 	bl	801287c <iprintf>
  *oversize = p->len - length;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	895a      	ldrh	r2, [r3, #10]
 800e074:	89bb      	ldrh	r3, [r7, #12]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	b29a      	uxth	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	89ba      	ldrh	r2, [r7, #12]
 800e082:	811a      	strh	r2, [r3, #8]
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	891a      	ldrh	r2, [r3, #8]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	815a      	strh	r2, [r3, #10]
  return p;
 800e08c:	693b      	ldr	r3, [r7, #16]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3718      	adds	r7, #24
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	08015110 	.word	0x08015110
 800e09c:	080151c8 	.word	0x080151c8
 800e0a0:	08015164 	.word	0x08015164
 800e0a4:	080151ec 	.word	0x080151ec
 800e0a8:	0801520c 	.word	0x0801520c

0800e0ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d106      	bne.n	800e0cc <tcp_write_checks+0x20>
 800e0be:	4b34      	ldr	r3, [pc, #208]	; (800e190 <tcp_write_checks+0xe4>)
 800e0c0:	f240 1233 	movw	r2, #307	; 0x133
 800e0c4:	4933      	ldr	r1, [pc, #204]	; (800e194 <tcp_write_checks+0xe8>)
 800e0c6:	4834      	ldr	r0, [pc, #208]	; (800e198 <tcp_write_checks+0xec>)
 800e0c8:	f004 fbd8 	bl	801287c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7d1b      	ldrb	r3, [r3, #20]
 800e0d0:	2b04      	cmp	r3, #4
 800e0d2:	d00e      	beq.n	800e0f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e0d8:	2b07      	cmp	r3, #7
 800e0da:	d00a      	beq.n	800e0f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e0e0:	2b02      	cmp	r3, #2
 800e0e2:	d006      	beq.n	800e0f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d002      	beq.n	800e0f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e0ec:	f06f 030a 	mvn.w	r3, #10
 800e0f0:	e049      	b.n	800e186 <tcp_write_checks+0xda>
  } else if (len == 0) {
 800e0f2:	887b      	ldrh	r3, [r7, #2]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <tcp_write_checks+0x50>
    return ERR_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e044      	b.n	800e186 <tcp_write_checks+0xda>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e102:	887a      	ldrh	r2, [r7, #2]
 800e104:	429a      	cmp	r2, r3
 800e106:	d909      	bls.n	800e11c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	8b5b      	ldrh	r3, [r3, #26]
 800e10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e110:	b29a      	uxth	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	e034      	b.n	800e186 <tcp_write_checks+0xda>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e126:	d309      	bcc.n	800e13c <tcp_write_checks+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	8b5b      	ldrh	r3, [r3, #26]
 800e12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e130:	b29a      	uxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
 800e13a:	e024      	b.n	800e186 <tcp_write_checks+0xda>
  }
  if (pcb->snd_queuelen != 0) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00f      	beq.n	800e166 <tcp_write_checks+0xba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d11a      	bne.n	800e184 <tcp_write_checks+0xd8>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e152:	2b00      	cmp	r3, #0
 800e154:	d116      	bne.n	800e184 <tcp_write_checks+0xd8>
 800e156:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <tcp_write_checks+0xe4>)
 800e158:	f240 1255 	movw	r2, #341	; 0x155
 800e15c:	490f      	ldr	r1, [pc, #60]	; (800e19c <tcp_write_checks+0xf0>)
 800e15e:	480e      	ldr	r0, [pc, #56]	; (800e198 <tcp_write_checks+0xec>)
 800e160:	f004 fb8c 	bl	801287c <iprintf>
 800e164:	e00e      	b.n	800e184 <tcp_write_checks+0xd8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d103      	bne.n	800e176 <tcp_write_checks+0xca>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d006      	beq.n	800e184 <tcp_write_checks+0xd8>
 800e176:	4b06      	ldr	r3, [pc, #24]	; (800e190 <tcp_write_checks+0xe4>)
 800e178:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800e17c:	4908      	ldr	r1, [pc, #32]	; (800e1a0 <tcp_write_checks+0xf4>)
 800e17e:	4806      	ldr	r0, [pc, #24]	; (800e198 <tcp_write_checks+0xec>)
 800e180:	f004 fb7c 	bl	801287c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	08015110 	.word	0x08015110
 800e194:	08015220 	.word	0x08015220
 800e198:	08015164 	.word	0x08015164
 800e19c:	08015240 	.word	0x08015240
 800e1a0:	0801527c 	.word	0x0801527c

0800e1a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b09b      	sub	sp, #108	; 0x6c
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	4611      	mov	r1, r2
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	80fb      	strh	r3, [r7, #6]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	653b      	str	r3, [r7, #80]	; 0x50
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d109      	bne.n	800e200 <tcp_write+0x5c>
 800e1ec:	4ba4      	ldr	r3, [pc, #656]	; (800e480 <tcp_write+0x2dc>)
 800e1ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e1f2:	49a4      	ldr	r1, [pc, #656]	; (800e484 <tcp_write+0x2e0>)
 800e1f4:	48a4      	ldr	r0, [pc, #656]	; (800e488 <tcp_write+0x2e4>)
 800e1f6:	f004 fb41 	bl	801287c <iprintf>
 800e1fa:	f06f 030f 	mvn.w	r3, #15
 800e1fe:	e32c      	b.n	800e85a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e206:	085b      	lsrs	r3, r3, #1
 800e208:	b29a      	uxth	r2, r3
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e20e:	4293      	cmp	r3, r2
 800e210:	bf28      	it	cs
 800e212:	4613      	movcs	r3, r2
 800e214:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <tcp_write+0x7e>
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e220:	e000      	b.n	800e224 <tcp_write+0x80>
 800e222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e224:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d109      	bne.n	800e240 <tcp_write+0x9c>
 800e22c:	4b94      	ldr	r3, [pc, #592]	; (800e480 <tcp_write+0x2dc>)
 800e22e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800e232:	4996      	ldr	r1, [pc, #600]	; (800e48c <tcp_write+0x2e8>)
 800e234:	4894      	ldr	r0, [pc, #592]	; (800e488 <tcp_write+0x2e4>)
 800e236:	f004 fb21 	bl	801287c <iprintf>
 800e23a:	f06f 030f 	mvn.w	r3, #15
 800e23e:	e30c      	b.n	800e85a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e240:	88fb      	ldrh	r3, [r7, #6]
 800e242:	4619      	mov	r1, r3
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff ff31 	bl	800e0ac <tcp_write_checks>
 800e24a:	4603      	mov	r3, r0
 800e24c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e250:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <tcp_write+0xba>
    return err;
 800e258:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e25c:	e2fd      	b.n	800e85a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e264:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e268:	2300      	movs	r3, #0
 800e26a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80f6 	beq.w	800e464 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e27c:	653b      	str	r3, [r7, #80]	; 0x50
 800e27e:	e002      	b.n	800e286 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1f8      	bne.n	800e280 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e290:	7a9b      	ldrb	r3, [r3, #10]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	b29b      	uxth	r3, r3
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e29c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a0:	891b      	ldrh	r3, [r3, #8]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	8c3b      	ldrh	r3, [r7, #32]
 800e2a6:	440b      	add	r3, r1
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	da06      	bge.n	800e2ba <tcp_write+0x116>
 800e2ac:	4b74      	ldr	r3, [pc, #464]	; (800e480 <tcp_write+0x2dc>)
 800e2ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e2b2:	4977      	ldr	r1, [pc, #476]	; (800e490 <tcp_write+0x2ec>)
 800e2b4:	4874      	ldr	r0, [pc, #464]	; (800e488 <tcp_write+0x2e4>)
 800e2b6:	f004 fae1 	bl	801287c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2bc:	891a      	ldrh	r2, [r3, #8]
 800e2be:	8c3b      	ldrh	r3, [r7, #32]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e2d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e2d2:	8a7b      	ldrh	r3, [r7, #18]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d026      	beq.n	800e326 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e2d8:	8a7b      	ldrh	r3, [r7, #18]
 800e2da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d206      	bcs.n	800e2ee <tcp_write+0x14a>
 800e2e0:	4b67      	ldr	r3, [pc, #412]	; (800e480 <tcp_write+0x2dc>)
 800e2e2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e2e6:	496b      	ldr	r1, [pc, #428]	; (800e494 <tcp_write+0x2f0>)
 800e2e8:	4867      	ldr	r0, [pc, #412]	; (800e488 <tcp_write+0x2e4>)
 800e2ea:	f004 fac7 	bl	801287c <iprintf>
      seg = last_unsent;
 800e2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e2f2:	8a7b      	ldrh	r3, [r7, #18]
 800e2f4:	88fa      	ldrh	r2, [r7, #6]
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	bf28      	it	cs
 800e2fa:	4613      	movcs	r3, r2
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e300:	4293      	cmp	r3, r2
 800e302:	bf28      	it	cs
 800e304:	4613      	movcs	r3, r2
 800e306:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e30c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e30e:	4413      	add	r3, r2
 800e310:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e314:	8a7a      	ldrh	r2, [r7, #18]
 800e316:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e31e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e320:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e326:	8a7b      	ldrh	r3, [r7, #18]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <tcp_write+0x1a0>
 800e32c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	429a      	cmp	r2, r3
 800e334:	d006      	beq.n	800e344 <tcp_write+0x1a0>
 800e336:	4b52      	ldr	r3, [pc, #328]	; (800e480 <tcp_write+0x2dc>)
 800e338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e33c:	4956      	ldr	r1, [pc, #344]	; (800e498 <tcp_write+0x2f4>)
 800e33e:	4852      	ldr	r0, [pc, #328]	; (800e488 <tcp_write+0x2e4>)
 800e340:	f004 fa9c 	bl	801287c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e344:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	f080 8168 	bcs.w	800e620 <tcp_write+0x47c>
 800e350:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 8164 	beq.w	800e620 <tcp_write+0x47c>
 800e358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e35a:	891b      	ldrh	r3, [r3, #8]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 815f 	beq.w	800e620 <tcp_write+0x47c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e362:	88fa      	ldrh	r2, [r7, #6]
 800e364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e368:	1ad2      	subs	r2, r2, r3
 800e36a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e36c:	4293      	cmp	r3, r2
 800e36e:	bfa8      	it	ge
 800e370:	4613      	movge	r3, r2
 800e372:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e376:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e378:	797b      	ldrb	r3, [r7, #5]
 800e37a:	f003 0301 	and.w	r3, r3, #1
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d027      	beq.n	800e3d2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e382:	f107 0012 	add.w	r0, r7, #18
 800e386:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e388:	8bf9      	ldrh	r1, [r7, #30]
 800e38a:	2301      	movs	r3, #1
 800e38c:	9302      	str	r3, [sp, #8]
 800e38e:	797b      	ldrb	r3, [r7, #5]
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	4603      	mov	r3, r0
 800e398:	2000      	movs	r0, #0
 800e39a:	f7ff fe0d 	bl	800dfb8 <tcp_pbuf_prealloc>
 800e39e:	6578      	str	r0, [r7, #84]	; 0x54
 800e3a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 8227 	beq.w	800e7f6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3aa:	6858      	ldr	r0, [r3, #4]
 800e3ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	8bfa      	ldrh	r2, [r7, #30]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	f004 fa4a 	bl	8012850 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e3bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e3be:	f7fb f967 	bl	8009690 <pbuf_clen>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e3d0:	e041      	b.n	800e456 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	637b      	str	r3, [r7, #52]	; 0x34
 800e3d8:	e002      	b.n	800e3e0 <tcp_write+0x23c>
 800e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	637b      	str	r3, [r7, #52]	; 0x34
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1f8      	bne.n	800e3da <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ea:	7b1b      	ldrb	r3, [r3, #12]
 800e3ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d115      	bne.n	800e420 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3fa:	8952      	ldrh	r2, [r2, #10]
 800e3fc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	429a      	cmp	r2, r3
 800e402:	d10d      	bne.n	800e420 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e404:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d006      	beq.n	800e41a <tcp_write+0x276>
 800e40c:	4b1c      	ldr	r3, [pc, #112]	; (800e480 <tcp_write+0x2dc>)
 800e40e:	f240 2231 	movw	r2, #561	; 0x231
 800e412:	4922      	ldr	r1, [pc, #136]	; (800e49c <tcp_write+0x2f8>)
 800e414:	481c      	ldr	r0, [pc, #112]	; (800e488 <tcp_write+0x2e4>)
 800e416:	f004 fa31 	bl	801287c <iprintf>
          extendlen = seglen;
 800e41a:	8bfb      	ldrh	r3, [r7, #30]
 800e41c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e41e:	e01a      	b.n	800e456 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e420:	8bfb      	ldrh	r3, [r7, #30]
 800e422:	2201      	movs	r2, #1
 800e424:	4619      	mov	r1, r3
 800e426:	2000      	movs	r0, #0
 800e428:	f7fa fdc6 	bl	8008fb8 <pbuf_alloc>
 800e42c:	6578      	str	r0, [r7, #84]	; 0x54
 800e42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 81e2 	beq.w	800e7fa <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e436:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	441a      	add	r2, r3
 800e43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e440:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e442:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e444:	f7fb f924 	bl	8009690 <pbuf_clen>
 800e448:	4603      	mov	r3, r0
 800e44a:	461a      	mov	r2, r3
 800e44c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e450:	4413      	add	r3, r2
 800e452:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e456:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e45a:	8bfb      	ldrh	r3, [r7, #30]
 800e45c:	4413      	add	r3, r2
 800e45e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e462:	e0dd      	b.n	800e620 <tcp_write+0x47c>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 80d8 	beq.w	800e620 <tcp_write+0x47c>
 800e470:	4b03      	ldr	r3, [pc, #12]	; (800e480 <tcp_write+0x2dc>)
 800e472:	f240 224a 	movw	r2, #586	; 0x24a
 800e476:	490a      	ldr	r1, [pc, #40]	; (800e4a0 <tcp_write+0x2fc>)
 800e478:	4803      	ldr	r0, [pc, #12]	; (800e488 <tcp_write+0x2e4>)
 800e47a:	f004 f9ff 	bl	801287c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e47e:	e0cf      	b.n	800e620 <tcp_write+0x47c>
 800e480:	08015110 	.word	0x08015110
 800e484:	080152b0 	.word	0x080152b0
 800e488:	08015164 	.word	0x08015164
 800e48c:	080152c8 	.word	0x080152c8
 800e490:	080152fc 	.word	0x080152fc
 800e494:	08015314 	.word	0x08015314
 800e498:	08015334 	.word	0x08015334
 800e49c:	08015354 	.word	0x08015354
 800e4a0:	08015380 	.word	0x08015380
    struct pbuf *p;
    u16_t left = len - pos;
 800e4a4:	88fa      	ldrh	r2, [r7, #6]
 800e4a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e4ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e4ba:	8b7a      	ldrh	r2, [r7, #26]
 800e4bc:	8bbb      	ldrh	r3, [r7, #28]
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	bf28      	it	cs
 800e4c2:	4613      	movcs	r3, r2
 800e4c4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e4c6:	797b      	ldrb	r3, [r7, #5]
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d036      	beq.n	800e53e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e4d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	8b3b      	ldrh	r3, [r7, #24]
 800e4d8:	4413      	add	r3, r2
 800e4da:	b299      	uxth	r1, r3
 800e4dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	bf0c      	ite	eq
 800e4e2:	2301      	moveq	r3, #1
 800e4e4:	2300      	movne	r3, #0
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	f107 0012 	add.w	r0, r7, #18
 800e4ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4ee:	9302      	str	r3, [sp, #8]
 800e4f0:	797b      	ldrb	r3, [r7, #5]
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2036      	movs	r0, #54	; 0x36
 800e4fc:	f7ff fd5c 	bl	800dfb8 <tcp_pbuf_prealloc>
 800e500:	6338      	str	r0, [r7, #48]	; 0x30
 800e502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 817a 	beq.w	800e7fe <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	895b      	ldrh	r3, [r3, #10]
 800e50e:	8b3a      	ldrh	r2, [r7, #24]
 800e510:	429a      	cmp	r2, r3
 800e512:	d906      	bls.n	800e522 <tcp_write+0x37e>
 800e514:	4b8d      	ldr	r3, [pc, #564]	; (800e74c <tcp_write+0x5a8>)
 800e516:	f240 2266 	movw	r2, #614	; 0x266
 800e51a:	498d      	ldr	r1, [pc, #564]	; (800e750 <tcp_write+0x5ac>)
 800e51c:	488d      	ldr	r0, [pc, #564]	; (800e754 <tcp_write+0x5b0>)
 800e51e:	f004 f9ad 	bl	801287c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e52a:	18d0      	adds	r0, r2, r3
 800e52c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	4413      	add	r3, r2
 800e534:	8b3a      	ldrh	r2, [r7, #24]
 800e536:	4619      	mov	r1, r3
 800e538:	f004 f98a 	bl	8012850 <memcpy>
 800e53c:	e02f      	b.n	800e59e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e53e:	8a7b      	ldrh	r3, [r7, #18]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d006      	beq.n	800e552 <tcp_write+0x3ae>
 800e544:	4b81      	ldr	r3, [pc, #516]	; (800e74c <tcp_write+0x5a8>)
 800e546:	f240 2271 	movw	r2, #625	; 0x271
 800e54a:	4983      	ldr	r1, [pc, #524]	; (800e758 <tcp_write+0x5b4>)
 800e54c:	4881      	ldr	r0, [pc, #516]	; (800e754 <tcp_write+0x5b0>)
 800e54e:	f004 f995 	bl	801287c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e552:	8b3b      	ldrh	r3, [r7, #24]
 800e554:	2201      	movs	r2, #1
 800e556:	4619      	mov	r1, r3
 800e558:	2036      	movs	r0, #54	; 0x36
 800e55a:	f7fa fd2d 	bl	8008fb8 <pbuf_alloc>
 800e55e:	6178      	str	r0, [r7, #20]
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 814d 	beq.w	800e802 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	441a      	add	r2, r3
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e574:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e57e:	4619      	mov	r1, r3
 800e580:	2036      	movs	r0, #54	; 0x36
 800e582:	f7fa fd19 	bl	8008fb8 <pbuf_alloc>
 800e586:	6338      	str	r0, [r7, #48]	; 0x30
 800e588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d103      	bne.n	800e596 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e58e:	6978      	ldr	r0, [r7, #20]
 800e590:	f7fa fff6 	bl	8009580 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e594:	e138      	b.n	800e808 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e596:	6979      	ldr	r1, [r7, #20]
 800e598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e59a:	f7fb f8b3 	bl	8009704 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e59e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5a0:	f7fb f876 	bl	8009690 <pbuf_clen>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e5b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e5b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5ba:	d903      	bls.n	800e5c4 <tcp_write+0x420>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5be:	f7fa ffdf 	bl	8009580 <pbuf_free>
      goto memerr;
 800e5c2:	e121      	b.n	800e808 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5cc:	441a      	add	r2, r3
 800e5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d2:	9300      	str	r3, [sp, #0]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff fc4e 	bl	800de7c <tcp_create_segment>
 800e5e0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 810e 	beq.w	800e806 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <tcp_write+0x452>
      queue = seg;
 800e5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e5f4:	e00c      	b.n	800e610 <tcp_write+0x46c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d106      	bne.n	800e60a <tcp_write+0x466>
 800e5fc:	4b53      	ldr	r3, [pc, #332]	; (800e74c <tcp_write+0x5a8>)
 800e5fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e602:	4956      	ldr	r1, [pc, #344]	; (800e75c <tcp_write+0x5b8>)
 800e604:	4853      	ldr	r0, [pc, #332]	; (800e754 <tcp_write+0x5b0>)
 800e606:	f004 f939 	bl	801287c <iprintf>
      prev_seg->next = seg;
 800e60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e60c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e60e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e612:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e614:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e618:	8b3b      	ldrh	r3, [r7, #24]
 800e61a:	4413      	add	r3, r2
 800e61c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e620:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	429a      	cmp	r2, r3
 800e628:	f4ff af3c 	bcc.w	800e4a4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e62c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d02c      	beq.n	800e68c <tcp_write+0x4e8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e638:	e01e      	b.n	800e678 <tcp_write+0x4d4>
      p->tot_len += oversize_used;
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	891a      	ldrh	r2, [r3, #8]
 800e63e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e640:	4413      	add	r3, r2
 800e642:	b29a      	uxth	r2, r3
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d110      	bne.n	800e672 <tcp_write+0x4ce>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e656:	8952      	ldrh	r2, [r2, #10]
 800e658:	4413      	add	r3, r2
 800e65a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e65c:	68b9      	ldr	r1, [r7, #8]
 800e65e:	4618      	mov	r0, r3
 800e660:	f004 f8f6 	bl	8012850 <memcpy>
        p->len += oversize_used;
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	895a      	ldrh	r2, [r3, #10]
 800e668:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e66a:	4413      	add	r3, r2
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1dd      	bne.n	800e63a <tcp_write+0x496>
      }
    }
    last_unsent->len += oversize_used;
 800e67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e680:	891a      	ldrh	r2, [r3, #8]
 800e682:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e684:	4413      	add	r3, r2
 800e686:	b29a      	uxth	r2, r3
 800e688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e68a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e68c:	8a7a      	ldrh	r2, [r7, #18]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e696:	2b00      	cmp	r3, #0
 800e698:	d018      	beq.n	800e6cc <tcp_write+0x528>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d106      	bne.n	800e6ae <tcp_write+0x50a>
 800e6a0:	4b2a      	ldr	r3, [pc, #168]	; (800e74c <tcp_write+0x5a8>)
 800e6a2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e6a6:	492e      	ldr	r1, [pc, #184]	; (800e760 <tcp_write+0x5bc>)
 800e6a8:	482a      	ldr	r0, [pc, #168]	; (800e754 <tcp_write+0x5b0>)
 800e6aa:	f004 f8e7 	bl	801287c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fb f825 	bl	8009704 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6bc:	891a      	ldrh	r2, [r3, #8]
 800e6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6c0:	891b      	ldrh	r3, [r3, #8]
 800e6c2:	4413      	add	r3, r2
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6c8:	811a      	strh	r2, [r3, #8]
 800e6ca:	e037      	b.n	800e73c <tcp_write+0x598>
  } else if (extendlen > 0) {
 800e6cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d034      	beq.n	800e73c <tcp_write+0x598>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d003      	beq.n	800e6e0 <tcp_write+0x53c>
 800e6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d106      	bne.n	800e6ee <tcp_write+0x54a>
 800e6e0:	4b1a      	ldr	r3, [pc, #104]	; (800e74c <tcp_write+0x5a8>)
 800e6e2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e6e6:	491f      	ldr	r1, [pc, #124]	; (800e764 <tcp_write+0x5c0>)
 800e6e8:	481a      	ldr	r0, [pc, #104]	; (800e754 <tcp_write+0x5b0>)
 800e6ea:	f004 f8c7 	bl	801287c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6f4:	e009      	b.n	800e70a <tcp_write+0x566>
      p->tot_len += extendlen;
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	891a      	ldrh	r2, [r3, #8]
 800e6fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6fc:	4413      	add	r3, r2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	62bb      	str	r3, [r7, #40]	; 0x28
 800e70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1f1      	bne.n	800e6f6 <tcp_write+0x552>
    }
    p->tot_len += extendlen;
 800e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e714:	891a      	ldrh	r2, [r3, #8]
 800e716:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e718:	4413      	add	r3, r2
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e722:	895a      	ldrh	r2, [r3, #10]
 800e724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e726:	4413      	add	r3, r2
 800e728:	b29a      	uxth	r2, r3
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e730:	891a      	ldrh	r2, [r3, #8]
 800e732:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e734:	4413      	add	r3, r2
 800e736:	b29a      	uxth	r2, r3
 800e738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e73a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d112      	bne.n	800e768 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e746:	66da      	str	r2, [r3, #108]	; 0x6c
 800e748:	e011      	b.n	800e76e <tcp_write+0x5ca>
 800e74a:	bf00      	nop
 800e74c:	08015110 	.word	0x08015110
 800e750:	080153b0 	.word	0x080153b0
 800e754:	08015164 	.word	0x08015164
 800e758:	080153f0 	.word	0x080153f0
 800e75c:	08015400 	.word	0x08015400
 800e760:	08015414 	.word	0x08015414
 800e764:	0801544c 	.word	0x0801544c
  } else {
    last_unsent->next = queue;
 800e768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e76a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e76c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e772:	88fb      	ldrh	r3, [r7, #6]
 800e774:	441a      	add	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e780:	88fb      	ldrh	r3, [r7, #6]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	b29a      	uxth	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e792:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00e      	beq.n	800e7be <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10a      	bne.n	800e7be <tcp_write+0x61a>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d106      	bne.n	800e7be <tcp_write+0x61a>
 800e7b0:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <tcp_write+0x6c0>)
 800e7b2:	f240 3212 	movw	r2, #786	; 0x312
 800e7b6:	492c      	ldr	r1, [pc, #176]	; (800e868 <tcp_write+0x6c4>)
 800e7b8:	482c      	ldr	r0, [pc, #176]	; (800e86c <tcp_write+0x6c8>)
 800e7ba:	f004 f85f 	bl	801287c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d016      	beq.n	800e7f2 <tcp_write+0x64e>
 800e7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d012      	beq.n	800e7f2 <tcp_write+0x64e>
 800e7cc:	797b      	ldrb	r3, [r7, #5]
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10d      	bne.n	800e7f2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	899b      	ldrh	r3, [r3, #12]
 800e7dc:	b29c      	uxth	r4, r3
 800e7de:	2008      	movs	r0, #8
 800e7e0:	f7f9 fc1a 	bl	8008018 <lwip_htons>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	4322      	orrs	r2, r4
 800e7ee:	b292      	uxth	r2, r2
 800e7f0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	e031      	b.n	800e85a <tcp_write+0x6b6>
          goto memerr;
 800e7f6:	bf00      	nop
 800e7f8:	e006      	b.n	800e808 <tcp_write+0x664>
            goto memerr;
 800e7fa:	bf00      	nop
 800e7fc:	e004      	b.n	800e808 <tcp_write+0x664>
        goto memerr;
 800e7fe:	bf00      	nop
 800e800:	e002      	b.n	800e808 <tcp_write+0x664>
        goto memerr;
 800e802:	bf00      	nop
 800e804:	e000      	b.n	800e808 <tcp_write+0x664>
      goto memerr;
 800e806:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8b5b      	ldrh	r3, [r3, #26]
 800e80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <tcp_write+0x67e>
    pbuf_free(concat_p);
 800e81c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e81e:	f7fa feaf 	bl	8009580 <pbuf_free>
  }
  if (queue != NULL) {
 800e822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <tcp_write+0x68a>
    tcp_segs_free(queue);
 800e828:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e82a:	f7fc fb53 	bl	800aed4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00e      	beq.n	800e856 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10a      	bne.n	800e856 <tcp_write+0x6b2>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d106      	bne.n	800e856 <tcp_write+0x6b2>
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <tcp_write+0x6c0>)
 800e84a:	f240 3227 	movw	r2, #807	; 0x327
 800e84e:	4906      	ldr	r1, [pc, #24]	; (800e868 <tcp_write+0x6c4>)
 800e850:	4806      	ldr	r0, [pc, #24]	; (800e86c <tcp_write+0x6c8>)
 800e852:	f004 f813 	bl	801287c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	375c      	adds	r7, #92	; 0x5c
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd90      	pop	{r4, r7, pc}
 800e862:	bf00      	nop
 800e864:	08015110 	.word	0x08015110
 800e868:	08015484 	.word	0x08015484
 800e86c:	08015164 	.word	0x08015164

0800e870 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e870:	b590      	push	{r4, r7, lr}
 800e872:	b08b      	sub	sp, #44	; 0x2c
 800e874:	af02      	add	r7, sp, #8
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	460b      	mov	r3, r1
 800e87a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e87c:	2300      	movs	r3, #0
 800e87e:	61fb      	str	r3, [r7, #28]
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e884:	2300      	movs	r3, #0
 800e886:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <tcp_split_unsent_seg+0x2c>
 800e88e:	4b95      	ldr	r3, [pc, #596]	; (800eae4 <tcp_split_unsent_seg+0x274>)
 800e890:	f240 324b 	movw	r2, #843	; 0x34b
 800e894:	4994      	ldr	r1, [pc, #592]	; (800eae8 <tcp_split_unsent_seg+0x278>)
 800e896:	4895      	ldr	r0, [pc, #596]	; (800eaec <tcp_split_unsent_seg+0x27c>)
 800e898:	f003 fff0 	bl	801287c <iprintf>

  useg = pcb->unsent;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d102      	bne.n	800e8ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ac:	e116      	b.n	800eadc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e8ae:	887b      	ldrh	r3, [r7, #2]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d109      	bne.n	800e8c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e8b4:	4b8b      	ldr	r3, [pc, #556]	; (800eae4 <tcp_split_unsent_seg+0x274>)
 800e8b6:	f240 3253 	movw	r2, #851	; 0x353
 800e8ba:	498d      	ldr	r1, [pc, #564]	; (800eaf0 <tcp_split_unsent_seg+0x280>)
 800e8bc:	488b      	ldr	r0, [pc, #556]	; (800eaec <tcp_split_unsent_seg+0x27c>)
 800e8be:	f003 ffdd 	bl	801287c <iprintf>
    return ERR_VAL;
 800e8c2:	f06f 0305 	mvn.w	r3, #5
 800e8c6:	e109      	b.n	800eadc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	891b      	ldrh	r3, [r3, #8]
 800e8cc:	887a      	ldrh	r2, [r7, #2]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d301      	bcc.n	800e8d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e102      	b.n	800eadc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8da:	887a      	ldrh	r2, [r7, #2]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d906      	bls.n	800e8ee <tcp_split_unsent_seg+0x7e>
 800e8e0:	4b80      	ldr	r3, [pc, #512]	; (800eae4 <tcp_split_unsent_seg+0x274>)
 800e8e2:	f240 325b 	movw	r2, #859	; 0x35b
 800e8e6:	4983      	ldr	r1, [pc, #524]	; (800eaf4 <tcp_split_unsent_seg+0x284>)
 800e8e8:	4880      	ldr	r0, [pc, #512]	; (800eaec <tcp_split_unsent_seg+0x27c>)
 800e8ea:	f003 ffc7 	bl	801287c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	891b      	ldrh	r3, [r3, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <tcp_split_unsent_seg+0x94>
 800e8f6:	4b7b      	ldr	r3, [pc, #492]	; (800eae4 <tcp_split_unsent_seg+0x274>)
 800e8f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e8fc:	497e      	ldr	r1, [pc, #504]	; (800eaf8 <tcp_split_unsent_seg+0x288>)
 800e8fe:	487b      	ldr	r0, [pc, #492]	; (800eaec <tcp_split_unsent_seg+0x27c>)
 800e900:	f003 ffbc 	bl	801287c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	7a9b      	ldrb	r3, [r3, #10]
 800e908:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	f003 0304 	and.w	r3, r3, #4
 800e914:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	891a      	ldrh	r2, [r3, #8]
 800e91a:	887b      	ldrh	r3, [r7, #2]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e920:	7bbb      	ldrb	r3, [r7, #14]
 800e922:	b29a      	uxth	r2, r3
 800e924:	89bb      	ldrh	r3, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	b29b      	uxth	r3, r3
 800e92a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e92e:	4619      	mov	r1, r3
 800e930:	2036      	movs	r0, #54	; 0x36
 800e932:	f7fa fb41 	bl	8008fb8 <pbuf_alloc>
 800e936:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 80b7 	beq.w	800eaae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	891a      	ldrh	r2, [r3, #8]
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	891b      	ldrh	r3, [r3, #8]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	887b      	ldrh	r3, [r7, #2]
 800e950:	4413      	add	r3, r2
 800e952:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	6858      	ldr	r0, [r3, #4]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	7bbb      	ldrb	r3, [r7, #14]
 800e95e:	18d1      	adds	r1, r2, r3
 800e960:	897b      	ldrh	r3, [r7, #10]
 800e962:	89ba      	ldrh	r2, [r7, #12]
 800e964:	f7fa fff6 	bl	8009954 <pbuf_copy_partial>
 800e968:	4603      	mov	r3, r0
 800e96a:	461a      	mov	r2, r3
 800e96c:	89bb      	ldrh	r3, [r7, #12]
 800e96e:	4293      	cmp	r3, r2
 800e970:	f040 809f 	bne.w	800eab2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	899b      	ldrh	r3, [r3, #12]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7f9 fb4b 	bl	8008018 <lwip_htons>
 800e982:	4603      	mov	r3, r0
 800e984:	b2db      	uxtb	r3, r3
 800e986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e98a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e98c:	2300      	movs	r3, #0
 800e98e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e990:	7efb      	ldrb	r3, [r7, #27]
 800e992:	f003 0308 	and.w	r3, r3, #8
 800e996:	2b00      	cmp	r3, #0
 800e998:	d007      	beq.n	800e9aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e99a:	7efb      	ldrb	r3, [r7, #27]
 800e99c:	f023 0308 	bic.w	r3, r3, #8
 800e9a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e9a2:	7ebb      	ldrb	r3, [r7, #26]
 800e9a4:	f043 0308 	orr.w	r3, r3, #8
 800e9a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e9aa:	7efb      	ldrb	r3, [r7, #27]
 800e9ac:	f003 0301 	and.w	r3, r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e9b4:	7efb      	ldrb	r3, [r7, #27]
 800e9b6:	f023 0301 	bic.w	r3, r3, #1
 800e9ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e9bc:	7ebb      	ldrb	r3, [r7, #26]
 800e9be:	f043 0301 	orr.w	r3, r3, #1
 800e9c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7f9 fb39 	bl	8008042 <lwip_htonl>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	887b      	ldrh	r3, [r7, #2]
 800e9d4:	18d1      	adds	r1, r2, r3
 800e9d6:	7eba      	ldrb	r2, [r7, #26]
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	6939      	ldr	r1, [r7, #16]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7ff fa4b 	bl	800de7c <tcp_create_segment>
 800e9e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d063      	beq.n	800eab6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fa fe4c 	bl	8009690 <pbuf_clen>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	6858      	ldr	r0, [r3, #4]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	89bb      	ldrh	r3, [r7, #12]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f7fa fc29 	bl	8009274 <pbuf_realloc>
  useg->len -= remainder;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	891a      	ldrh	r2, [r3, #8]
 800ea26:	89bb      	ldrh	r3, [r7, #12]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	899b      	ldrh	r3, [r3, #12]
 800ea36:	b29c      	uxth	r4, r3
 800ea38:	7efb      	ldrb	r3, [r7, #27]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f9 faeb 	bl	8008018 <lwip_htons>
 800ea42:	4603      	mov	r3, r0
 800ea44:	461a      	mov	r2, r3
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	4322      	orrs	r2, r4
 800ea4c:	b292      	uxth	r2, r2
 800ea4e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fa fe1b 	bl	8009690 <pbuf_clen>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea64:	4413      	add	r3, r2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fa fe0c 	bl	8009690 <pbuf_clen>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea82:	4413      	add	r3, r2
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	69fa      	ldr	r2, [r7, #28]
 800ea98:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d103      	bne.n	800eaaa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e016      	b.n	800eadc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800eaae:	bf00      	nop
 800eab0:	e002      	b.n	800eab8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eab2:	bf00      	nop
 800eab4:	e000      	b.n	800eab8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eab6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <tcp_split_unsent_seg+0x25c>
 800eabe:	4b09      	ldr	r3, [pc, #36]	; (800eae4 <tcp_split_unsent_seg+0x274>)
 800eac0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800eac4:	490d      	ldr	r1, [pc, #52]	; (800eafc <tcp_split_unsent_seg+0x28c>)
 800eac6:	4809      	ldr	r0, [pc, #36]	; (800eaec <tcp_split_unsent_seg+0x27c>)
 800eac8:	f003 fed8 	bl	801287c <iprintf>
  if (p != NULL) {
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d002      	beq.n	800ead8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ead2:	6938      	ldr	r0, [r7, #16]
 800ead4:	f7fa fd54 	bl	8009580 <pbuf_free>
  }

  return ERR_MEM;
 800ead8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3724      	adds	r7, #36	; 0x24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd90      	pop	{r4, r7, pc}
 800eae4:	08015110 	.word	0x08015110
 800eae8:	080154a4 	.word	0x080154a4
 800eaec:	08015164 	.word	0x08015164
 800eaf0:	080154c8 	.word	0x080154c8
 800eaf4:	080154ec 	.word	0x080154ec
 800eaf8:	080154fc 	.word	0x080154fc
 800eafc:	0801550c 	.word	0x0801550c

0800eb00 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d106      	bne.n	800eb1c <tcp_send_fin+0x1c>
 800eb0e:	4b21      	ldr	r3, [pc, #132]	; (800eb94 <tcp_send_fin+0x94>)
 800eb10:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800eb14:	4920      	ldr	r1, [pc, #128]	; (800eb98 <tcp_send_fin+0x98>)
 800eb16:	4821      	ldr	r0, [pc, #132]	; (800eb9c <tcp_send_fin+0x9c>)
 800eb18:	f003 feb0 	bl	801287c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d02e      	beq.n	800eb82 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e002      	b.n	800eb32 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1f8      	bne.n	800eb2c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f9 fa68 	bl	8008018 <lwip_htons>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	f003 0307 	and.w	r3, r3, #7
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d116      	bne.n	800eb82 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29c      	uxth	r4, r3
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	f7f9 fa5b 	bl	8008018 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	461a      	mov	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	4322      	orrs	r2, r4
 800eb6c:	b292      	uxth	r2, r2
 800eb6e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	8b5b      	ldrh	r3, [r3, #26]
 800eb74:	f043 0320 	orr.w	r3, r3, #32
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e004      	b.n	800eb8c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eb82:	2101      	movs	r1, #1
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f80b 	bl	800eba0 <tcp_enqueue_flags>
 800eb8a:	4603      	mov	r3, r0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd90      	pop	{r4, r7, pc}
 800eb94:	08015110 	.word	0x08015110
 800eb98:	08015518 	.word	0x08015518
 800eb9c:	08015164 	.word	0x08015164

0800eba0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af02      	add	r7, sp, #8
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ebb4:	78fb      	ldrb	r3, [r7, #3]
 800ebb6:	f003 0303 	and.w	r3, r3, #3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <tcp_enqueue_flags+0x2c>
 800ebbe:	4b67      	ldr	r3, [pc, #412]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ebc0:	f240 4211 	movw	r2, #1041	; 0x411
 800ebc4:	4966      	ldr	r1, [pc, #408]	; (800ed60 <tcp_enqueue_flags+0x1c0>)
 800ebc6:	4867      	ldr	r0, [pc, #412]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ebc8:	f003 fe58 	bl	801287c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d106      	bne.n	800ebe0 <tcp_enqueue_flags+0x40>
 800ebd2:	4b62      	ldr	r3, [pc, #392]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ebd4:	f240 4213 	movw	r2, #1043	; 0x413
 800ebd8:	4963      	ldr	r1, [pc, #396]	; (800ed68 <tcp_enqueue_flags+0x1c8>)
 800ebda:	4862      	ldr	r0, [pc, #392]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ebdc:	f003 fe4e 	bl	801287c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ebe0:	78fb      	ldrb	r3, [r7, #3]
 800ebe2:	f003 0302 	and.w	r3, r3, #2
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ebea:	2301      	movs	r3, #1
 800ebec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebee:	7ffb      	ldrb	r3, [r7, #31]
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 0304 	and.w	r3, r3, #4
 800ebf8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec02:	4619      	mov	r1, r3
 800ec04:	2036      	movs	r0, #54	; 0x36
 800ec06:	f7fa f9d7 	bl	8008fb8 <pbuf_alloc>
 800ec0a:	6138      	str	r0, [r7, #16]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d109      	bne.n	800ec26 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8b5b      	ldrh	r3, [r3, #26]
 800ec16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec20:	f04f 33ff 	mov.w	r3, #4294967295
 800ec24:	e095      	b.n	800ed52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	895a      	ldrh	r2, [r3, #10]
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d206      	bcs.n	800ec40 <tcp_enqueue_flags+0xa0>
 800ec32:	4b4a      	ldr	r3, [pc, #296]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ec34:	f240 4239 	movw	r2, #1081	; 0x439
 800ec38:	494c      	ldr	r1, [pc, #304]	; (800ed6c <tcp_enqueue_flags+0x1cc>)
 800ec3a:	484a      	ldr	r0, [pc, #296]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ec3c:	f003 fe1e 	bl	801287c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ec44:	78fa      	ldrb	r2, [r7, #3]
 800ec46:	7ffb      	ldrb	r3, [r7, #31]
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	6939      	ldr	r1, [r7, #16]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff f914 	bl	800de7c <tcp_create_segment>
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d109      	bne.n	800ec70 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	8b5b      	ldrh	r3, [r3, #26]
 800ec60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6e:	e070      	b.n	800ed52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	f003 0303 	and.w	r3, r3, #3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d006      	beq.n	800ec8a <tcp_enqueue_flags+0xea>
 800ec7c:	4b37      	ldr	r3, [pc, #220]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ec7e:	f240 4242 	movw	r2, #1090	; 0x442
 800ec82:	493b      	ldr	r1, [pc, #236]	; (800ed70 <tcp_enqueue_flags+0x1d0>)
 800ec84:	4837      	ldr	r0, [pc, #220]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ec86:	f003 fdf9 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	891b      	ldrh	r3, [r3, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d006      	beq.n	800eca0 <tcp_enqueue_flags+0x100>
 800ec92:	4b32      	ldr	r3, [pc, #200]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ec94:	f240 4243 	movw	r2, #1091	; 0x443
 800ec98:	4936      	ldr	r1, [pc, #216]	; (800ed74 <tcp_enqueue_flags+0x1d4>)
 800ec9a:	4832      	ldr	r0, [pc, #200]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ec9c:	f003 fdee 	bl	801287c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	66da      	str	r2, [r3, #108]	; 0x6c
 800ecae:	e00d      	b.n	800eccc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb4:	61bb      	str	r3, [r7, #24]
 800ecb6:	e002      	b.n	800ecbe <tcp_enqueue_flags+0x11e>
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	61bb      	str	r3, [r7, #24]
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1f8      	bne.n	800ecb8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	f003 0302 	and.w	r3, r3, #2
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d104      	bne.n	800ece8 <tcp_enqueue_flags+0x148>
 800ecde:	78fb      	ldrb	r3, [r7, #3]
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ecf2:	78fb      	ldrb	r3, [r7, #3]
 800ecf4:	f003 0301 	and.w	r3, r3, #1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d006      	beq.n	800ed0a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8b5b      	ldrh	r3, [r3, #26]
 800ed00:	f043 0320 	orr.w	r3, r3, #32
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fa fcbe 	bl	8009690 <pbuf_clen>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed1e:	4413      	add	r3, r2
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00e      	beq.n	800ed50 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <tcp_enqueue_flags+0x1b0>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <tcp_enqueue_flags+0x1b0>
 800ed42:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <tcp_enqueue_flags+0x1bc>)
 800ed44:	f240 4265 	movw	r2, #1125	; 0x465
 800ed48:	490b      	ldr	r1, [pc, #44]	; (800ed78 <tcp_enqueue_flags+0x1d8>)
 800ed4a:	4806      	ldr	r0, [pc, #24]	; (800ed64 <tcp_enqueue_flags+0x1c4>)
 800ed4c:	f003 fd96 	bl	801287c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3720      	adds	r7, #32
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	08015110 	.word	0x08015110
 800ed60:	08015534 	.word	0x08015534
 800ed64:	08015164 	.word	0x08015164
 800ed68:	0801558c 	.word	0x0801558c
 800ed6c:	080155ac 	.word	0x080155ac
 800ed70:	080155e8 	.word	0x080155e8
 800ed74:	08015600 	.word	0x08015600
 800ed78:	0801562c 	.word	0x0801562c

0800ed7c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ed7c:	b5b0      	push	{r4, r5, r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d106      	bne.n	800ed98 <tcp_output+0x1c>
 800ed8a:	4b9e      	ldr	r3, [pc, #632]	; (800f004 <tcp_output+0x288>)
 800ed8c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ed90:	499d      	ldr	r1, [pc, #628]	; (800f008 <tcp_output+0x28c>)
 800ed92:	489e      	ldr	r0, [pc, #632]	; (800f00c <tcp_output+0x290>)
 800ed94:	f003 fd72 	bl	801287c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7d1b      	ldrb	r3, [r3, #20]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d106      	bne.n	800edae <tcp_output+0x32>
 800eda0:	4b98      	ldr	r3, [pc, #608]	; (800f004 <tcp_output+0x288>)
 800eda2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800eda6:	499a      	ldr	r1, [pc, #616]	; (800f010 <tcp_output+0x294>)
 800eda8:	4898      	ldr	r0, [pc, #608]	; (800f00c <tcp_output+0x290>)
 800edaa:	f003 fd67 	bl	801287c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800edae:	4b99      	ldr	r3, [pc, #612]	; (800f014 <tcp_output+0x298>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d101      	bne.n	800edbc <tcp_output+0x40>
    return ERR_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	e1ce      	b.n	800f15a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edc8:	4293      	cmp	r3, r2
 800edca:	bf28      	it	cs
 800edcc:	4613      	movcs	r3, r2
 800edce:	b29b      	uxth	r3, r3
 800edd0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d10b      	bne.n	800edf6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	8b5b      	ldrh	r3, [r3, #26]
 800ede2:	f003 0302 	and.w	r3, r3, #2
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 81aa 	beq.w	800f140 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fdc9 	bl	800f984 <tcp_send_empty_ack>
 800edf2:	4603      	mov	r3, r0
 800edf4:	e1b1      	b.n	800f15a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3304      	adds	r3, #4
 800edfc:	461a      	mov	r2, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff f820 	bl	800de44 <tcp_route>
 800ee04:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d102      	bne.n	800ee12 <tcp_output+0x96>
    return ERR_RTE;
 800ee0c:	f06f 0303 	mvn.w	r3, #3
 800ee10:	e1a3      	b.n	800f15a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d003      	beq.n	800ee20 <tcp_output+0xa4>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d111      	bne.n	800ee44 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <tcp_output+0xb0>
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	e000      	b.n	800ee2e <tcp_output+0xb2>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d102      	bne.n	800ee3c <tcp_output+0xc0>
      return ERR_RTE;
 800ee36:	f06f 0303 	mvn.w	r3, #3
 800ee3a:	e18e      	b.n	800f15a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7f9 f8f9 	bl	8008042 <lwip_htonl>
 800ee50:	4602      	mov	r2, r0
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee5a:	8912      	ldrh	r2, [r2, #8]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d227      	bcs.n	800eeb4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d114      	bne.n	800ee9c <tcp_output+0x120>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d110      	bne.n	800ee9c <tcp_output+0x120>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10b      	bne.n	800ee9c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	8b5b      	ldrh	r3, [r3, #26]
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 814d 	beq.w	800f144 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fd6a 	bl	800f984 <tcp_send_empty_ack>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	e152      	b.n	800f15a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eec0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 811c 	beq.w	800f102 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800eeca:	e002      	b.n	800eed2 <tcp_output+0x156>
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	623b      	str	r3, [r7, #32]
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f8      	bne.n	800eecc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800eeda:	e112      	b.n	800f102 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	899b      	ldrh	r3, [r3, #12]
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7f9 f897 	bl	8008018 <lwip_htons>
 800eeea:	4603      	mov	r3, r0
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	f003 0304 	and.w	r3, r3, #4
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d006      	beq.n	800ef04 <tcp_output+0x188>
 800eef6:	4b43      	ldr	r3, [pc, #268]	; (800f004 <tcp_output+0x288>)
 800eef8:	f240 5236 	movw	r2, #1334	; 0x536
 800eefc:	4946      	ldr	r1, [pc, #280]	; (800f018 <tcp_output+0x29c>)
 800eefe:	4843      	ldr	r0, [pc, #268]	; (800f00c <tcp_output+0x290>)
 800ef00:	f003 fcbc 	bl	801287c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d020      	beq.n	800ef4e <tcp_output+0x1d2>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	8b5b      	ldrh	r3, [r3, #26]
 800ef10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d11a      	bne.n	800ef4e <tcp_output+0x1d2>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00b      	beq.n	800ef38 <tcp_output+0x1bc>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d111      	bne.n	800ef4e <tcp_output+0x1d2>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef2e:	891a      	ldrh	r2, [r3, #8]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d20a      	bcs.n	800ef4e <tcp_output+0x1d2>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d005      	beq.n	800ef4e <tcp_output+0x1d2>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef4c:	d301      	bcc.n	800ef52 <tcp_output+0x1d6>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <tcp_output+0x1d8>
 800ef52:	2300      	movs	r3, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <tcp_output+0x1ea>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	8b5b      	ldrh	r3, [r3, #26]
 800ef5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f000 80e3 	beq.w	800f12c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7d1b      	ldrb	r3, [r3, #20]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d00d      	beq.n	800ef8a <tcp_output+0x20e>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	899b      	ldrh	r3, [r3, #12]
 800ef74:	b29c      	uxth	r4, r3
 800ef76:	2010      	movs	r0, #16
 800ef78:	f7f9 f84e 	bl	8008018 <lwip_htons>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	4322      	orrs	r2, r4
 800ef86:	b292      	uxth	r2, r2
 800ef88:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	6879      	ldr	r1, [r7, #4]
 800ef8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef90:	f000 f908 	bl	800f1a4 <tcp_output_segment>
 800ef94:	4603      	mov	r3, r0
 800ef96:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ef98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d009      	beq.n	800efb4 <tcp_output+0x238>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8b5b      	ldrh	r3, [r3, #26]
 800efa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	835a      	strh	r2, [r3, #26]
      return err;
 800efae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb2:	e0d2      	b.n	800f15a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d006      	beq.n	800efd2 <tcp_output+0x256>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	8b5b      	ldrh	r3, [r3, #26]
 800efc8:	f023 0303 	bic.w	r3, r3, #3
 800efcc:	b29a      	uxth	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	4618      	mov	r0, r3
 800efda:	f7f9 f832 	bl	8008042 <lwip_htonl>
 800efde:	4604      	mov	r4, r0
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	891b      	ldrh	r3, [r3, #8]
 800efe4:	461d      	mov	r5, r3
 800efe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	899b      	ldrh	r3, [r3, #12]
 800efec:	b29b      	uxth	r3, r3
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f9 f812 	bl	8008018 <lwip_htons>
 800eff4:	4603      	mov	r3, r0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f003 0303 	and.w	r3, r3, #3
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00d      	beq.n	800f01c <tcp_output+0x2a0>
 800f000:	2301      	movs	r3, #1
 800f002:	e00c      	b.n	800f01e <tcp_output+0x2a2>
 800f004:	08015110 	.word	0x08015110
 800f008:	08015654 	.word	0x08015654
 800f00c:	08015164 	.word	0x08015164
 800f010:	0801566c 	.word	0x0801566c
 800f014:	20011658 	.word	0x20011658
 800f018:	08015694 	.word	0x08015694
 800f01c:	2300      	movs	r3, #0
 800f01e:	442b      	add	r3, r5
 800f020:	4423      	add	r3, r4
 800f022:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	da02      	bge.n	800f036 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	891b      	ldrh	r3, [r3, #8]
 800f03a:	461c      	mov	r4, r3
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	899b      	ldrh	r3, [r3, #12]
 800f042:	b29b      	uxth	r3, r3
 800f044:	4618      	mov	r0, r3
 800f046:	f7f8 ffe7 	bl	8008018 <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	f003 0303 	and.w	r3, r3, #3
 800f052:	2b00      	cmp	r3, #0
 800f054:	d001      	beq.n	800f05a <tcp_output+0x2de>
 800f056:	2301      	movs	r3, #1
 800f058:	e000      	b.n	800f05c <tcp_output+0x2e0>
 800f05a:	2300      	movs	r3, #0
 800f05c:	4423      	add	r3, r4
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d049      	beq.n	800f0f6 <tcp_output+0x37a>
      seg->next = NULL;
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d105      	bne.n	800f07c <tcp_output+0x300>
        pcb->unacked = seg;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f074:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	623b      	str	r3, [r7, #32]
 800f07a:	e03f      	b.n	800f0fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	4618      	mov	r0, r3
 800f084:	f7f8 ffdd 	bl	8008042 <lwip_htonl>
 800f088:	4604      	mov	r4, r0
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	f7f8 ffd6 	bl	8008042 <lwip_htonl>
 800f096:	4603      	mov	r3, r0
 800f098:	1ae3      	subs	r3, r4, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	da24      	bge.n	800f0e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3370      	adds	r3, #112	; 0x70
 800f0a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f0a4:	e002      	b.n	800f0ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d011      	beq.n	800f0d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f8 ffc0 	bl	8008042 <lwip_htonl>
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f8 ffb9 	bl	8008042 <lwip_htonl>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dbe6      	blt.n	800f0a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	e009      	b.n	800f0fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	623b      	str	r3, [r7, #32]
 800f0f4:	e002      	b.n	800f0fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f0f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0f8:	f7fb ff01 	bl	800aefe <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f100:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	d012      	beq.n	800f12e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7f8 ff97 	bl	8008042 <lwip_htonl>
 800f114:	4602      	mov	r2, r0
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11e:	8912      	ldrh	r2, [r2, #8]
 800f120:	4413      	add	r3, r2
  while (seg != NULL &&
 800f122:	69ba      	ldr	r2, [r7, #24]
 800f124:	429a      	cmp	r2, r3
 800f126:	f4bf aed9 	bcs.w	800eedc <tcp_output+0x160>
 800f12a:	e000      	b.n	800f12e <tcp_output+0x3b2>
      break;
 800f12c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f132:	2b00      	cmp	r3, #0
 800f134:	d108      	bne.n	800f148 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f13e:	e004      	b.n	800f14a <tcp_output+0x3ce>
    goto output_done;
 800f140:	bf00      	nop
 800f142:	e002      	b.n	800f14a <tcp_output+0x3ce>
    goto output_done;
 800f144:	bf00      	nop
 800f146:	e000      	b.n	800f14a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f148:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	8b5b      	ldrh	r3, [r3, #26]
 800f14e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3728      	adds	r7, #40	; 0x28
 800f15e:	46bd      	mov	sp, r7
 800f160:	bdb0      	pop	{r4, r5, r7, pc}
 800f162:	bf00      	nop

0800f164 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d106      	bne.n	800f180 <tcp_output_segment_busy+0x1c>
 800f172:	4b09      	ldr	r3, [pc, #36]	; (800f198 <tcp_output_segment_busy+0x34>)
 800f174:	f240 529a 	movw	r2, #1434	; 0x59a
 800f178:	4908      	ldr	r1, [pc, #32]	; (800f19c <tcp_output_segment_busy+0x38>)
 800f17a:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <tcp_output_segment_busy+0x3c>)
 800f17c:	f003 fb7e 	bl	801287c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	7b9b      	ldrb	r3, [r3, #14]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d001      	beq.n	800f18e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e000      	b.n	800f190 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	08015110 	.word	0x08015110
 800f19c:	080156ac 	.word	0x080156ac
 800f1a0:	08015164 	.word	0x08015164

0800f1a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f1a4:	b5b0      	push	{r4, r5, r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af04      	add	r7, sp, #16
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <tcp_output_segment+0x20>
 800f1b6:	4b63      	ldr	r3, [pc, #396]	; (800f344 <tcp_output_segment+0x1a0>)
 800f1b8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f1bc:	4962      	ldr	r1, [pc, #392]	; (800f348 <tcp_output_segment+0x1a4>)
 800f1be:	4863      	ldr	r0, [pc, #396]	; (800f34c <tcp_output_segment+0x1a8>)
 800f1c0:	f003 fb5c 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <tcp_output_segment+0x34>
 800f1ca:	4b5e      	ldr	r3, [pc, #376]	; (800f344 <tcp_output_segment+0x1a0>)
 800f1cc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f1d0:	495f      	ldr	r1, [pc, #380]	; (800f350 <tcp_output_segment+0x1ac>)
 800f1d2:	485e      	ldr	r0, [pc, #376]	; (800f34c <tcp_output_segment+0x1a8>)
 800f1d4:	f003 fb52 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d106      	bne.n	800f1ec <tcp_output_segment+0x48>
 800f1de:	4b59      	ldr	r3, [pc, #356]	; (800f344 <tcp_output_segment+0x1a0>)
 800f1e0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f1e4:	495b      	ldr	r1, [pc, #364]	; (800f354 <tcp_output_segment+0x1b0>)
 800f1e6:	4859      	ldr	r0, [pc, #356]	; (800f34c <tcp_output_segment+0x1a8>)
 800f1e8:	f003 fb48 	bl	801287c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7ff ffb9 	bl	800f164 <tcp_output_segment_busy>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	e09f      	b.n	800f33c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68dc      	ldr	r4, [r3, #12]
 800f204:	4610      	mov	r0, r2
 800f206:	f7f8 ff1c 	bl	8008042 <lwip_htonl>
 800f20a:	4603      	mov	r3, r0
 800f20c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	68dc      	ldr	r4, [r3, #12]
 800f216:	4610      	mov	r0, r2
 800f218:	f7f8 fefe 	bl	8008018 <lwip_htons>
 800f21c:	4603      	mov	r3, r0
 800f21e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f228:	441a      	add	r2, r3
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	3314      	adds	r3, #20
 800f234:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	7a9b      	ldrb	r3, [r3, #10]
 800f23a:	f003 0301 	and.w	r3, r3, #1
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d015      	beq.n	800f26e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	3304      	adds	r3, #4
 800f246:	461a      	mov	r2, r3
 800f248:	6879      	ldr	r1, [r7, #4]
 800f24a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f24e:	f7fc fa33 	bl	800b6b8 <tcp_eff_send_mss_netif>
 800f252:	4603      	mov	r3, r0
 800f254:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f256:	8b7b      	ldrh	r3, [r7, #26]
 800f258:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f8 fef0 	bl	8008042 <lwip_htonl>
 800f262:	4602      	mov	r2, r0
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	3304      	adds	r3, #4
 800f26c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f274:	2b00      	cmp	r3, #0
 800f276:	da02      	bge.n	800f27e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2200      	movs	r2, #0
 800f27c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10c      	bne.n	800f2a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f286:	4b34      	ldr	r3, [pc, #208]	; (800f358 <tcp_output_segment+0x1b4>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	4618      	mov	r0, r3
 800f296:	f7f8 fed4 	bl	8008042 <lwip_htonl>
 800f29a:	4602      	mov	r2, r0
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	68da      	ldr	r2, [r3, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	8959      	ldrh	r1, [r3, #10]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	8b3a      	ldrh	r2, [r7, #24]
 800f2ba:	1a8a      	subs	r2, r1, r2
 800f2bc:	b292      	uxth	r2, r2
 800f2be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	8919      	ldrh	r1, [r3, #8]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	8b3a      	ldrh	r2, [r7, #24]
 800f2cc:	1a8a      	subs	r2, r1, r2
 800f2ce:	b292      	uxth	r2, r2
 800f2d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	68d2      	ldr	r2, [r2, #12]
 800f2da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	741a      	strb	r2, [r3, #16]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	f103 0214 	add.w	r2, r3, #20
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	7a9b      	ldrb	r3, [r3, #10]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	f003 0304 	and.w	r3, r3, #4
 800f2fa:	4413      	add	r3, r2
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d006      	beq.n	800f310 <tcp_output_segment+0x16c>
 800f302:	4b10      	ldr	r3, [pc, #64]	; (800f344 <tcp_output_segment+0x1a0>)
 800f304:	f240 621c 	movw	r2, #1564	; 0x61c
 800f308:	4914      	ldr	r1, [pc, #80]	; (800f35c <tcp_output_segment+0x1b8>)
 800f30a:	4810      	ldr	r0, [pc, #64]	; (800f34c <tcp_output_segment+0x1a8>)
 800f30c:	f003 fab6 	bl	801287c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6858      	ldr	r0, [r3, #4]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	1d1c      	adds	r4, r3, #4
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	7add      	ldrb	r5, [r3, #11]
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	7a9b      	ldrb	r3, [r3, #10]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	9202      	str	r2, [sp, #8]
 800f326:	2206      	movs	r2, #6
 800f328:	9201      	str	r2, [sp, #4]
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	462b      	mov	r3, r5
 800f32e:	4622      	mov	r2, r4
 800f330:	f002 fa34 	bl	801179c <ip4_output_if>
 800f334:	4603      	mov	r3, r0
 800f336:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3720      	adds	r7, #32
 800f340:	46bd      	mov	sp, r7
 800f342:	bdb0      	pop	{r4, r5, r7, pc}
 800f344:	08015110 	.word	0x08015110
 800f348:	080156d4 	.word	0x080156d4
 800f34c:	08015164 	.word	0x08015164
 800f350:	080156f4 	.word	0x080156f4
 800f354:	08015714 	.word	0x08015714
 800f358:	20011648 	.word	0x20011648
 800f35c:	08015738 	.word	0x08015738

0800f360 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f360:	b5b0      	push	{r4, r5, r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d106      	bne.n	800f37c <tcp_rexmit_rto_prepare+0x1c>
 800f36e:	4b31      	ldr	r3, [pc, #196]	; (800f434 <tcp_rexmit_rto_prepare+0xd4>)
 800f370:	f240 6263 	movw	r2, #1635	; 0x663
 800f374:	4930      	ldr	r1, [pc, #192]	; (800f438 <tcp_rexmit_rto_prepare+0xd8>)
 800f376:	4831      	ldr	r0, [pc, #196]	; (800f43c <tcp_rexmit_rto_prepare+0xdc>)
 800f378:	f003 fa80 	bl	801287c <iprintf>

  if (pcb->unacked == NULL) {
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f380:	2b00      	cmp	r3, #0
 800f382:	d102      	bne.n	800f38a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f384:	f06f 0305 	mvn.w	r3, #5
 800f388:	e050      	b.n	800f42c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38e:	60fb      	str	r3, [r7, #12]
 800f390:	e00b      	b.n	800f3aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7ff fee6 	bl	800f164 <tcp_output_segment_busy>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f39e:	f06f 0305 	mvn.w	r3, #5
 800f3a2:	e043      	b.n	800f42c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	60fb      	str	r3, [r7, #12]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1ef      	bne.n	800f392 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff fed6 	bl	800f164 <tcp_output_segment_busy>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d002      	beq.n	800f3c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f3be:	f06f 0305 	mvn.w	r3, #5
 800f3c2:	e033      	b.n	800f42c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8b5b      	ldrh	r3, [r3, #26]
 800f3de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7f8 fe27 	bl	8008042 <lwip_htonl>
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	891b      	ldrh	r3, [r3, #8]
 800f3fa:	461d      	mov	r5, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	899b      	ldrh	r3, [r3, #12]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f7f8 fe07 	bl	8008018 <lwip_htons>
 800f40a:	4603      	mov	r3, r0
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	f003 0303 	and.w	r3, r3, #3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <tcp_rexmit_rto_prepare+0xba>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <tcp_rexmit_rto_prepare+0xbc>
 800f41a:	2300      	movs	r3, #0
 800f41c:	442b      	add	r3, r5
 800f41e:	18e2      	adds	r2, r4, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3710      	adds	r7, #16
 800f430:	46bd      	mov	sp, r7
 800f432:	bdb0      	pop	{r4, r5, r7, pc}
 800f434:	08015110 	.word	0x08015110
 800f438:	0801574c 	.word	0x0801574c
 800f43c:	08015164 	.word	0x08015164

0800f440 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <tcp_rexmit_rto_commit+0x1c>
 800f44e:	4b0d      	ldr	r3, [pc, #52]	; (800f484 <tcp_rexmit_rto_commit+0x44>)
 800f450:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f454:	490c      	ldr	r1, [pc, #48]	; (800f488 <tcp_rexmit_rto_commit+0x48>)
 800f456:	480d      	ldr	r0, [pc, #52]	; (800f48c <tcp_rexmit_rto_commit+0x4c>)
 800f458:	f003 fa10 	bl	801287c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f462:	2bff      	cmp	r3, #255	; 0xff
 800f464:	d007      	beq.n	800f476 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f46c:	3301      	adds	r3, #1
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff fc80 	bl	800ed7c <tcp_output>
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	08015110 	.word	0x08015110
 800f488:	08015770 	.word	0x08015770
 800f48c:	08015164 	.word	0x08015164

0800f490 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <tcp_rexmit_rto+0x1c>
 800f49e:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <tcp_rexmit_rto+0x38>)
 800f4a0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f4a4:	4909      	ldr	r1, [pc, #36]	; (800f4cc <tcp_rexmit_rto+0x3c>)
 800f4a6:	480a      	ldr	r0, [pc, #40]	; (800f4d0 <tcp_rexmit_rto+0x40>)
 800f4a8:	f003 f9e8 	bl	801287c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff ff57 	bl	800f360 <tcp_rexmit_rto_prepare>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d102      	bne.n	800f4be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff ffc1 	bl	800f440 <tcp_rexmit_rto_commit>
  }
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	08015110 	.word	0x08015110
 800f4cc:	08015794 	.word	0x08015794
 800f4d0:	08015164 	.word	0x08015164

0800f4d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f4d4:	b590      	push	{r4, r7, lr}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d106      	bne.n	800f4f0 <tcp_rexmit+0x1c>
 800f4e2:	4b2f      	ldr	r3, [pc, #188]	; (800f5a0 <tcp_rexmit+0xcc>)
 800f4e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f4e8:	492e      	ldr	r1, [pc, #184]	; (800f5a4 <tcp_rexmit+0xd0>)
 800f4ea:	482f      	ldr	r0, [pc, #188]	; (800f5a8 <tcp_rexmit+0xd4>)
 800f4ec:	f003 f9c6 	bl	801287c <iprintf>

  if (pcb->unacked == NULL) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f4f8:	f06f 0305 	mvn.w	r3, #5
 800f4fc:	e04c      	b.n	800f598 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f502:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f504:	68b8      	ldr	r0, [r7, #8]
 800f506:	f7ff fe2d 	bl	800f164 <tcp_output_segment_busy>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f510:	f06f 0305 	mvn.w	r3, #5
 800f514:	e040      	b.n	800f598 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	336c      	adds	r3, #108	; 0x6c
 800f522:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f524:	e002      	b.n	800f52c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d011      	beq.n	800f558 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f8 fd80 	bl	8008042 <lwip_htonl>
 800f542:	4604      	mov	r4, r0
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7f8 fd79 	bl	8008042 <lwip_htonl>
 800f550:	4603      	mov	r3, r0
 800f552:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f554:	2b00      	cmp	r3, #0
 800f556:	dbe6      	blt.n	800f526 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d103      	bne.n	800f576 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f57c:	2bff      	cmp	r3, #255	; 0xff
 800f57e:	d007      	beq.n	800f590 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f586:	3301      	adds	r3, #1
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3714      	adds	r7, #20
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd90      	pop	{r4, r7, pc}
 800f5a0:	08015110 	.word	0x08015110
 800f5a4:	080157b0 	.word	0x080157b0
 800f5a8:	08015164 	.word	0x08015164

0800f5ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d106      	bne.n	800f5c8 <tcp_rexmit_fast+0x1c>
 800f5ba:	4b2a      	ldr	r3, [pc, #168]	; (800f664 <tcp_rexmit_fast+0xb8>)
 800f5bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f5c0:	4929      	ldr	r1, [pc, #164]	; (800f668 <tcp_rexmit_fast+0xbc>)
 800f5c2:	482a      	ldr	r0, [pc, #168]	; (800f66c <tcp_rexmit_fast+0xc0>)
 800f5c4:	f003 f95a 	bl	801287c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d044      	beq.n	800f65a <tcp_rexmit_fast+0xae>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	8b5b      	ldrh	r3, [r3, #26]
 800f5d4:	f003 0304 	and.w	r3, r3, #4
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d13e      	bne.n	800f65a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff ff79 	bl	800f4d4 <tcp_rexmit>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d138      	bne.n	800f65a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	bf28      	it	cs
 800f5f8:	4613      	movcs	r3, r2
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	0fda      	lsrs	r2, r3, #31
 800f5fe:	4413      	add	r3, r2
 800f600:	105b      	asrs	r3, r3, #1
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f610:	461a      	mov	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f616:	005b      	lsls	r3, r3, #1
 800f618:	429a      	cmp	r2, r3
 800f61a:	d206      	bcs.n	800f62a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	b29a      	uxth	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f634:	4619      	mov	r1, r3
 800f636:	0049      	lsls	r1, r1, #1
 800f638:	440b      	add	r3, r1
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4413      	add	r3, r2
 800f63e:	b29a      	uxth	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	8b5b      	ldrh	r3, [r3, #26]
 800f64a:	f043 0304 	orr.w	r3, r3, #4
 800f64e:	b29a      	uxth	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f65a:	bf00      	nop
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	08015110 	.word	0x08015110
 800f668:	080157c8 	.word	0x080157c8
 800f66c:	08015164 	.word	0x08015164

0800f670 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	607b      	str	r3, [r7, #4]
 800f67a:	460b      	mov	r3, r1
 800f67c:	817b      	strh	r3, [r7, #10]
 800f67e:	4613      	mov	r3, r2
 800f680:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f682:	897a      	ldrh	r2, [r7, #10]
 800f684:	893b      	ldrh	r3, [r7, #8]
 800f686:	4413      	add	r3, r2
 800f688:	b29b      	uxth	r3, r3
 800f68a:	3314      	adds	r3, #20
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f692:	4619      	mov	r1, r3
 800f694:	2022      	movs	r0, #34	; 0x22
 800f696:	f7f9 fc8f 	bl	8008fb8 <pbuf_alloc>
 800f69a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d04d      	beq.n	800f73e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f6a2:	897b      	ldrh	r3, [r7, #10]
 800f6a4:	3313      	adds	r3, #19
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	8952      	ldrh	r2, [r2, #10]
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	db06      	blt.n	800f6bc <tcp_output_alloc_header_common+0x4c>
 800f6ae:	4b26      	ldr	r3, [pc, #152]	; (800f748 <tcp_output_alloc_header_common+0xd8>)
 800f6b0:	f240 7223 	movw	r2, #1827	; 0x723
 800f6b4:	4925      	ldr	r1, [pc, #148]	; (800f74c <tcp_output_alloc_header_common+0xdc>)
 800f6b6:	4826      	ldr	r0, [pc, #152]	; (800f750 <tcp_output_alloc_header_common+0xe0>)
 800f6b8:	f003 f8e0 	bl	801287c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f6c2:	8c3b      	ldrh	r3, [r7, #32]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7f8 fca7 	bl	8008018 <lwip_htons>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7f8 fc9f 	bl	8008018 <lwip_htons>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	461a      	mov	r2, r3
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f7f8 fcaa 	bl	8008042 <lwip_htonl>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f6f4:	897b      	ldrh	r3, [r7, #10]
 800f6f6:	089b      	lsrs	r3, r3, #2
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	3305      	adds	r3, #5
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	031b      	lsls	r3, r3, #12
 800f700:	b29a      	uxth	r2, r3
 800f702:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f706:	b29b      	uxth	r3, r3
 800f708:	4313      	orrs	r3, r2
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7f8 fc83 	bl	8008018 <lwip_htons>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f71a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7f8 fc7b 	bl	8008018 <lwip_htons>
 800f722:	4603      	mov	r3, r0
 800f724:	461a      	mov	r2, r3
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	2200      	movs	r2, #0
 800f72e:	741a      	strb	r2, [r3, #16]
 800f730:	2200      	movs	r2, #0
 800f732:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	2200      	movs	r2, #0
 800f738:	749a      	strb	r2, [r3, #18]
 800f73a:	2200      	movs	r2, #0
 800f73c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f73e:	697b      	ldr	r3, [r7, #20]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08015110 	.word	0x08015110
 800f74c:	080157e8 	.word	0x080157e8
 800f750:	08015164 	.word	0x08015164

0800f754 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f754:	b5b0      	push	{r4, r5, r7, lr}
 800f756:	b08a      	sub	sp, #40	; 0x28
 800f758:	af04      	add	r7, sp, #16
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	607b      	str	r3, [r7, #4]
 800f75e:	460b      	mov	r3, r1
 800f760:	817b      	strh	r3, [r7, #10]
 800f762:	4613      	mov	r3, r2
 800f764:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d106      	bne.n	800f77a <tcp_output_alloc_header+0x26>
 800f76c:	4b15      	ldr	r3, [pc, #84]	; (800f7c4 <tcp_output_alloc_header+0x70>)
 800f76e:	f240 7242 	movw	r2, #1858	; 0x742
 800f772:	4915      	ldr	r1, [pc, #84]	; (800f7c8 <tcp_output_alloc_header+0x74>)
 800f774:	4815      	ldr	r0, [pc, #84]	; (800f7cc <tcp_output_alloc_header+0x78>)
 800f776:	f003 f881 	bl	801287c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	8adb      	ldrh	r3, [r3, #22]
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	8b12      	ldrh	r2, [r2, #24]
 800f786:	68f9      	ldr	r1, [r7, #12]
 800f788:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f78a:	893d      	ldrh	r5, [r7, #8]
 800f78c:	897c      	ldrh	r4, [r7, #10]
 800f78e:	9103      	str	r1, [sp, #12]
 800f790:	2110      	movs	r1, #16
 800f792:	9102      	str	r1, [sp, #8]
 800f794:	9201      	str	r2, [sp, #4]
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	462a      	mov	r2, r5
 800f79c:	4621      	mov	r1, r4
 800f79e:	f7ff ff67 	bl	800f670 <tcp_output_alloc_header_common>
 800f7a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d006      	beq.n	800f7b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f7b2:	441a      	add	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f7b8:	697b      	ldr	r3, [r7, #20]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	08015110 	.word	0x08015110
 800f7c8:	08015818 	.word	0x08015818
 800f7cc:	08015164 	.word	0x08015164

0800f7d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b088      	sub	sp, #32
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	460b      	mov	r3, r1
 800f7e0:	71fb      	strb	r3, [r7, #7]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d106      	bne.n	800f7fe <tcp_output_fill_options+0x2e>
 800f7f0:	4b13      	ldr	r3, [pc, #76]	; (800f840 <tcp_output_fill_options+0x70>)
 800f7f2:	f240 7256 	movw	r2, #1878	; 0x756
 800f7f6:	4913      	ldr	r1, [pc, #76]	; (800f844 <tcp_output_fill_options+0x74>)
 800f7f8:	4813      	ldr	r0, [pc, #76]	; (800f848 <tcp_output_fill_options+0x78>)
 800f7fa:	f003 f83f 	bl	801287c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	3314      	adds	r3, #20
 800f808:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	f103 0214 	add.w	r2, r3, #20
 800f810:	8bfb      	ldrh	r3, [r7, #30]
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	4619      	mov	r1, r3
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	f003 0304 	and.w	r3, r3, #4
 800f81e:	440b      	add	r3, r1
 800f820:	4413      	add	r3, r2
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	429a      	cmp	r2, r3
 800f826:	d006      	beq.n	800f836 <tcp_output_fill_options+0x66>
 800f828:	4b05      	ldr	r3, [pc, #20]	; (800f840 <tcp_output_fill_options+0x70>)
 800f82a:	f240 7275 	movw	r2, #1909	; 0x775
 800f82e:	4907      	ldr	r1, [pc, #28]	; (800f84c <tcp_output_fill_options+0x7c>)
 800f830:	4805      	ldr	r0, [pc, #20]	; (800f848 <tcp_output_fill_options+0x78>)
 800f832:	f003 f823 	bl	801287c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f836:	bf00      	nop
 800f838:	3720      	adds	r7, #32
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	08015110 	.word	0x08015110
 800f844:	08015840 	.word	0x08015840
 800f848:	08015164 	.word	0x08015164
 800f84c:	08015738 	.word	0x08015738

0800f850 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08a      	sub	sp, #40	; 0x28
 800f854:	af04      	add	r7, sp, #16
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d106      	bne.n	800f872 <tcp_output_control_segment+0x22>
 800f864:	4b1c      	ldr	r3, [pc, #112]	; (800f8d8 <tcp_output_control_segment+0x88>)
 800f866:	f240 7287 	movw	r2, #1927	; 0x787
 800f86a:	491c      	ldr	r1, [pc, #112]	; (800f8dc <tcp_output_control_segment+0x8c>)
 800f86c:	481c      	ldr	r0, [pc, #112]	; (800f8e0 <tcp_output_control_segment+0x90>)
 800f86e:	f003 f805 	bl	801287c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	6879      	ldr	r1, [r7, #4]
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7fe fae4 	bl	800de44 <tcp_route>
 800f87c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d102      	bne.n	800f88a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f884:	23fc      	movs	r3, #252	; 0xfc
 800f886:	75fb      	strb	r3, [r7, #23]
 800f888:	e01c      	b.n	800f8c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d006      	beq.n	800f89e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	7adb      	ldrb	r3, [r3, #11]
 800f894:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	7a9b      	ldrb	r3, [r3, #10]
 800f89a:	757b      	strb	r3, [r7, #21]
 800f89c:	e003      	b.n	800f8a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f89e:	23ff      	movs	r3, #255	; 0xff
 800f8a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f8a6:	7dba      	ldrb	r2, [r7, #22]
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	9302      	str	r3, [sp, #8]
 800f8ac:	2306      	movs	r3, #6
 800f8ae:	9301      	str	r3, [sp, #4]
 800f8b0:	7d7b      	ldrb	r3, [r7, #21]
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	683a      	ldr	r2, [r7, #0]
 800f8b8:	6879      	ldr	r1, [r7, #4]
 800f8ba:	68b8      	ldr	r0, [r7, #8]
 800f8bc:	f001 ff6e 	bl	801179c <ip4_output_if>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f8c4:	68b8      	ldr	r0, [r7, #8]
 800f8c6:	f7f9 fe5b 	bl	8009580 <pbuf_free>
  return err;
 800f8ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3718      	adds	r7, #24
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08015110 	.word	0x08015110
 800f8dc:	08015868 	.word	0x08015868
 800f8e0:	08015164 	.word	0x08015164

0800f8e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f8e4:	b590      	push	{r4, r7, lr}
 800f8e6:	b08b      	sub	sp, #44	; 0x2c
 800f8e8:	af04      	add	r7, sp, #16
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <tcp_rst+0x22>
 800f8f8:	4b1e      	ldr	r3, [pc, #120]	; (800f974 <tcp_rst+0x90>)
 800f8fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f8fe:	491e      	ldr	r1, [pc, #120]	; (800f978 <tcp_rst+0x94>)
 800f900:	481e      	ldr	r0, [pc, #120]	; (800f97c <tcp_rst+0x98>)
 800f902:	f002 ffbb 	bl	801287c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d106      	bne.n	800f91a <tcp_rst+0x36>
 800f90c:	4b19      	ldr	r3, [pc, #100]	; (800f974 <tcp_rst+0x90>)
 800f90e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f912:	491b      	ldr	r1, [pc, #108]	; (800f980 <tcp_rst+0x9c>)
 800f914:	4819      	ldr	r0, [pc, #100]	; (800f97c <tcp_rst+0x98>)
 800f916:	f002 ffb1 	bl	801287c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f91a:	2300      	movs	r3, #0
 800f91c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f91e:	2310      	movs	r3, #16
 800f920:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f922:	7dfb      	ldrb	r3, [r7, #23]
 800f924:	b29c      	uxth	r4, r3
 800f926:	68b8      	ldr	r0, [r7, #8]
 800f928:	f7f8 fb8b 	bl	8008042 <lwip_htonl>
 800f92c:	4602      	mov	r2, r0
 800f92e:	8abb      	ldrh	r3, [r7, #20]
 800f930:	9303      	str	r3, [sp, #12]
 800f932:	2314      	movs	r3, #20
 800f934:	9302      	str	r3, [sp, #8]
 800f936:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f938:	9301      	str	r3, [sp, #4]
 800f93a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f93c:	9300      	str	r3, [sp, #0]
 800f93e:	4613      	mov	r3, r2
 800f940:	2200      	movs	r2, #0
 800f942:	4621      	mov	r1, r4
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fe93 	bl	800f670 <tcp_output_alloc_header_common>
 800f94a:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00c      	beq.n	800f96c <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f952:	7dfb      	ldrb	r3, [r7, #23]
 800f954:	2200      	movs	r2, #0
 800f956:	6939      	ldr	r1, [r7, #16]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f7ff ff39 	bl	800f7d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	6939      	ldr	r1, [r7, #16]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f7ff ff73 	bl	800f850 <tcp_output_control_segment>
 800f96a:	e000      	b.n	800f96e <tcp_rst+0x8a>
    return;
 800f96c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f96e:	371c      	adds	r7, #28
 800f970:	46bd      	mov	sp, r7
 800f972:	bd90      	pop	{r4, r7, pc}
 800f974:	08015110 	.word	0x08015110
 800f978:	08015894 	.word	0x08015894
 800f97c:	08015164 	.word	0x08015164
 800f980:	080158b0 	.word	0x080158b0

0800f984 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f984:	b590      	push	{r4, r7, lr}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f990:	2300      	movs	r3, #0
 800f992:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <tcp_send_empty_ack+0x24>
 800f99a:	4b28      	ldr	r3, [pc, #160]	; (800fa3c <tcp_send_empty_ack+0xb8>)
 800f99c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f9a0:	4927      	ldr	r1, [pc, #156]	; (800fa40 <tcp_send_empty_ack+0xbc>)
 800f9a2:	4828      	ldr	r0, [pc, #160]	; (800fa44 <tcp_send_empty_ack+0xc0>)
 800f9a4:	f002 ff6a 	bl	801287c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	f003 0304 	and.w	r3, r3, #4
 800f9b2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f9b4:	7d7b      	ldrb	r3, [r7, #21]
 800f9b6:	b29c      	uxth	r4, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7f8 fb40 	bl	8008042 <lwip_htonl>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7ff fec3 	bl	800f754 <tcp_output_alloc_header>
 800f9ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d109      	bne.n	800f9ea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f043 0303 	orr.w	r3, r3, #3
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f9e4:	f06f 0301 	mvn.w	r3, #1
 800f9e8:	e023      	b.n	800fa32 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f9ea:	7dbb      	ldrb	r3, [r7, #22]
 800f9ec:	7dfa      	ldrb	r2, [r7, #23]
 800f9ee:	6939      	ldr	r1, [r7, #16]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff feed 	bl	800f7d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	6939      	ldr	r1, [r7, #16]
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7ff ff26 	bl	800f850 <tcp_output_control_segment>
 800fa04:	4603      	mov	r3, r0
 800fa06:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fa08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d007      	beq.n	800fa20 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f043 0303 	orr.w	r3, r3, #3
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	835a      	strh	r2, [r3, #26]
 800fa1e:	e006      	b.n	800fa2e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f023 0303 	bic.w	r3, r3, #3
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	371c      	adds	r7, #28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd90      	pop	{r4, r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08015110 	.word	0x08015110
 800fa40:	080158cc 	.word	0x080158cc
 800fa44:	08015164 	.word	0x08015164

0800fa48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa50:	2300      	movs	r3, #0
 800fa52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d106      	bne.n	800fa68 <tcp_keepalive+0x20>
 800fa5a:	4b18      	ldr	r3, [pc, #96]	; (800fabc <tcp_keepalive+0x74>)
 800fa5c:	f640 0224 	movw	r2, #2084	; 0x824
 800fa60:	4917      	ldr	r1, [pc, #92]	; (800fac0 <tcp_keepalive+0x78>)
 800fa62:	4818      	ldr	r0, [pc, #96]	; (800fac4 <tcp_keepalive+0x7c>)
 800fa64:	f002 ff0a 	bl	801287c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	b29c      	uxth	r4, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa70:	3b01      	subs	r3, #1
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7f8 fae5 	bl	8008042 <lwip_htonl>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7ff fe68 	bl	800f754 <tcp_output_alloc_header>
 800fa84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d102      	bne.n	800fa92 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa90:	e010      	b.n	800fab4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fa92:	7dfb      	ldrb	r3, [r7, #23]
 800fa94:	2200      	movs	r2, #0
 800fa96:	6939      	ldr	r1, [r7, #16]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7ff fe99 	bl	800f7d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3304      	adds	r3, #4
 800faa4:	6939      	ldr	r1, [r7, #16]
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff fed2 	bl	800f850 <tcp_output_control_segment>
 800faac:	4603      	mov	r3, r0
 800faae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	371c      	adds	r7, #28
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd90      	pop	{r4, r7, pc}
 800fabc:	08015110 	.word	0x08015110
 800fac0:	080158ec 	.word	0x080158ec
 800fac4:	08015164 	.word	0x08015164

0800fac8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fac8:	b590      	push	{r4, r7, lr}
 800faca:	b08b      	sub	sp, #44	; 0x2c
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fad0:	2300      	movs	r3, #0
 800fad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d106      	bne.n	800faea <tcp_zero_window_probe+0x22>
 800fadc:	4b4c      	ldr	r3, [pc, #304]	; (800fc10 <tcp_zero_window_probe+0x148>)
 800fade:	f640 024f 	movw	r2, #2127	; 0x84f
 800fae2:	494c      	ldr	r1, [pc, #304]	; (800fc14 <tcp_zero_window_probe+0x14c>)
 800fae4:	484c      	ldr	r0, [pc, #304]	; (800fc18 <tcp_zero_window_probe+0x150>)
 800fae6:	f002 fec9 	bl	801287c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800faf0:	6a3b      	ldr	r3, [r7, #32]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	e086      	b.n	800fc08 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fb00:	2bff      	cmp	r3, #255	; 0xff
 800fb02:	d007      	beq.n	800fb14 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fb14:	6a3b      	ldr	r3, [r7, #32]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	899b      	ldrh	r3, [r3, #12]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f8 fa7b 	bl	8008018 <lwip_htons>
 800fb22:	4603      	mov	r3, r0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d005      	beq.n	800fb3a <tcp_zero_window_probe+0x72>
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	891b      	ldrh	r3, [r3, #8]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <tcp_zero_window_probe+0x72>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <tcp_zero_window_probe+0x74>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fb3e:	7ffb      	ldrb	r3, [r7, #31]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bf0c      	ite	eq
 800fb44:	2301      	moveq	r3, #1
 800fb46:	2300      	movne	r3, #0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb50:	b299      	uxth	r1, r3
 800fb52:	6a3b      	ldr	r3, [r7, #32]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	8bba      	ldrh	r2, [r7, #28]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7ff fdfa 	bl	800f754 <tcp_output_alloc_header>
 800fb60:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d102      	bne.n	800fb6e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fb68:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6c:	e04c      	b.n	800fc08 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fb74:	7ffb      	ldrb	r3, [r7, #31]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d011      	beq.n	800fb9e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	899b      	ldrh	r3, [r3, #12]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	b21b      	sxth	r3, r3
 800fb82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fb86:	b21c      	sxth	r4, r3
 800fb88:	2011      	movs	r0, #17
 800fb8a:	f7f8 fa45 	bl	8008018 <lwip_htons>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	b21b      	sxth	r3, r3
 800fb92:	4323      	orrs	r3, r4
 800fb94:	b21b      	sxth	r3, r3
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	819a      	strh	r2, [r3, #12]
 800fb9c:	e010      	b.n	800fbc0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	3314      	adds	r3, #20
 800fba4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	6858      	ldr	r0, [r3, #4]
 800fbaa:	6a3b      	ldr	r3, [r7, #32]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	891a      	ldrh	r2, [r3, #8]
 800fbb0:	6a3b      	ldr	r3, [r7, #32]
 800fbb2:	891b      	ldrh	r3, [r3, #8]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	2201      	movs	r2, #1
 800fbba:	6939      	ldr	r1, [r7, #16]
 800fbbc:	f7f9 feca 	bl	8009954 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fbc0:	6a3b      	ldr	r3, [r7, #32]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f8 fa3b 	bl	8008042 <lwip_htonl>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	3301      	adds	r3, #1
 800fbd0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	da02      	bge.n	800fbe4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe8:	2200      	movs	r2, #0
 800fbea:	69b9      	ldr	r1, [r7, #24]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff fdef 	bl	800f7d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	69b9      	ldr	r1, [r7, #24]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7ff fe28 	bl	800f850 <tcp_output_control_segment>
 800fc00:	4603      	mov	r3, r0
 800fc02:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fc04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	372c      	adds	r7, #44	; 0x2c
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd90      	pop	{r4, r7, pc}
 800fc10:	08015110 	.word	0x08015110
 800fc14:	08015908 	.word	0x08015908
 800fc18:	08015164 	.word	0x08015164

0800fc1c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fc24:	f7fa f816 	bl	8009c54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fc28:	4b0a      	ldr	r3, [pc, #40]	; (800fc54 <tcpip_tcp_timer+0x38>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d103      	bne.n	800fc38 <tcpip_tcp_timer+0x1c>
 800fc30:	4b09      	ldr	r3, [pc, #36]	; (800fc58 <tcpip_tcp_timer+0x3c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d005      	beq.n	800fc44 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4908      	ldr	r1, [pc, #32]	; (800fc5c <tcpip_tcp_timer+0x40>)
 800fc3c:	20fa      	movs	r0, #250	; 0xfa
 800fc3e:	f000 f8f3 	bl	800fe28 <sys_timeout>
 800fc42:	e003      	b.n	800fc4c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fc44:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <tcpip_tcp_timer+0x44>)
 800fc46:	2200      	movs	r2, #0
 800fc48:	601a      	str	r2, [r3, #0]
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	20011644 	.word	0x20011644
 800fc58:	20011654 	.word	0x20011654
 800fc5c:	0800fc1d 	.word	0x0800fc1d
 800fc60:	200008d0 	.word	0x200008d0

0800fc64 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fc68:	4b0a      	ldr	r3, [pc, #40]	; (800fc94 <tcp_timer_needed+0x30>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10f      	bne.n	800fc90 <tcp_timer_needed+0x2c>
 800fc70:	4b09      	ldr	r3, [pc, #36]	; (800fc98 <tcp_timer_needed+0x34>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d103      	bne.n	800fc80 <tcp_timer_needed+0x1c>
 800fc78:	4b08      	ldr	r3, [pc, #32]	; (800fc9c <tcp_timer_needed+0x38>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d007      	beq.n	800fc90 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fc80:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <tcp_timer_needed+0x30>)
 800fc82:	2201      	movs	r2, #1
 800fc84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fc86:	2200      	movs	r2, #0
 800fc88:	4905      	ldr	r1, [pc, #20]	; (800fca0 <tcp_timer_needed+0x3c>)
 800fc8a:	20fa      	movs	r0, #250	; 0xfa
 800fc8c:	f000 f8cc 	bl	800fe28 <sys_timeout>
  }
}
 800fc90:	bf00      	nop
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	200008d0 	.word	0x200008d0
 800fc98:	20011644 	.word	0x20011644
 800fc9c:	20011654 	.word	0x20011654
 800fca0:	0800fc1d 	.word	0x0800fc1d

0800fca4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fcb0:	2006      	movs	r0, #6
 800fcb2:	f7f8 fe07 	bl	80088c4 <memp_malloc>
 800fcb6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d109      	bne.n	800fcd2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d151      	bne.n	800fd68 <sys_timeout_abs+0xc4>
 800fcc4:	4b2a      	ldr	r3, [pc, #168]	; (800fd70 <sys_timeout_abs+0xcc>)
 800fcc6:	22be      	movs	r2, #190	; 0xbe
 800fcc8:	492a      	ldr	r1, [pc, #168]	; (800fd74 <sys_timeout_abs+0xd0>)
 800fcca:	482b      	ldr	r0, [pc, #172]	; (800fd78 <sys_timeout_abs+0xd4>)
 800fccc:	f002 fdd6 	bl	801287c <iprintf>
    return;
 800fcd0:	e04a      	b.n	800fd68 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fcea:	4b24      	ldr	r3, [pc, #144]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d103      	bne.n	800fcfa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fcf2:	4a22      	ldr	r2, [pc, #136]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	6013      	str	r3, [r2, #0]
    return;
 800fcf8:	e037      	b.n	800fd6a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	685a      	ldr	r2, [r3, #4]
 800fcfe:	4b1f      	ldr	r3, [pc, #124]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	0fdb      	lsrs	r3, r3, #31
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d007      	beq.n	800fd22 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fd12:	4b1a      	ldr	r3, [pc, #104]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fd1a:	4a18      	ldr	r2, [pc, #96]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	e023      	b.n	800fd6a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fd22:	4b16      	ldr	r3, [pc, #88]	; (800fd7c <sys_timeout_abs+0xd8>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	617b      	str	r3, [r7, #20]
 800fd28:	e01a      	b.n	800fd60 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00b      	beq.n	800fd4a <sys_timeout_abs+0xa6>
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	0fdb      	lsrs	r3, r3, #31
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d007      	beq.n	800fd5a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	601a      	str	r2, [r3, #0]
        break;
 800fd58:	e007      	b.n	800fd6a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	617b      	str	r3, [r7, #20]
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1e1      	bne.n	800fd2a <sys_timeout_abs+0x86>
 800fd66:	e000      	b.n	800fd6a <sys_timeout_abs+0xc6>
    return;
 800fd68:	bf00      	nop
      }
    }
  }
}
 800fd6a:	3718      	adds	r7, #24
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	0801592c 	.word	0x0801592c
 800fd74:	08015960 	.word	0x08015960
 800fd78:	080159a0 	.word	0x080159a0
 800fd7c:	200008c8 	.word	0x200008c8

0800fd80 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4798      	blx	r3

  now = sys_now();
 800fd92:	f7f8 f8b3 	bl	8007efc <sys_now>
 800fd96:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	4b0f      	ldr	r3, [pc, #60]	; (800fddc <lwip_cyclic_timer+0x5c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4413      	add	r3, r2
 800fda2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	0fdb      	lsrs	r3, r3, #31
 800fdac:	f003 0301 	and.w	r3, r3, #1
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d009      	beq.n	800fdca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	4907      	ldr	r1, [pc, #28]	; (800fde0 <lwip_cyclic_timer+0x60>)
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff ff6e 	bl	800fca4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fdc8:	e004      	b.n	800fdd4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	4904      	ldr	r1, [pc, #16]	; (800fde0 <lwip_cyclic_timer+0x60>)
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7ff ff68 	bl	800fca4 <sys_timeout_abs>
}
 800fdd4:	bf00      	nop
 800fdd6:	3718      	adds	r7, #24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	200008cc 	.word	0x200008cc
 800fde0:	0800fd81 	.word	0x0800fd81

0800fde4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fdea:	2301      	movs	r3, #1
 800fdec:	607b      	str	r3, [r7, #4]
 800fdee:	e00e      	b.n	800fe0e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fdf0:	4a0b      	ldr	r2, [pc, #44]	; (800fe20 <sys_timeouts_init+0x3c>)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	4a08      	ldr	r2, [pc, #32]	; (800fe20 <sys_timeouts_init+0x3c>)
 800fdfe:	4413      	add	r3, r2
 800fe00:	461a      	mov	r2, r3
 800fe02:	4908      	ldr	r1, [pc, #32]	; (800fe24 <sys_timeouts_init+0x40>)
 800fe04:	f000 f810 	bl	800fe28 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	607b      	str	r3, [r7, #4]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d9ed      	bls.n	800fdf0 <sys_timeouts_init+0xc>
  }
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08016514 	.word	0x08016514
 800fe24:	0800fd81 	.word	0x0800fd81

0800fe28 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b086      	sub	sp, #24
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe3a:	d306      	bcc.n	800fe4a <sys_timeout+0x22>
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <sys_timeout+0x40>)
 800fe3e:	f240 1229 	movw	r2, #297	; 0x129
 800fe42:	490a      	ldr	r1, [pc, #40]	; (800fe6c <sys_timeout+0x44>)
 800fe44:	480a      	ldr	r0, [pc, #40]	; (800fe70 <sys_timeout+0x48>)
 800fe46:	f002 fd19 	bl	801287c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fe4a:	f7f8 f857 	bl	8007efc <sys_now>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	68b9      	ldr	r1, [r7, #8]
 800fe5a:	6978      	ldr	r0, [r7, #20]
 800fe5c:	f7ff ff22 	bl	800fca4 <sys_timeout_abs>
#endif
}
 800fe60:	bf00      	nop
 800fe62:	3718      	adds	r7, #24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	0801592c 	.word	0x0801592c
 800fe6c:	080159c8 	.word	0x080159c8
 800fe70:	080159a0 	.word	0x080159a0

0800fe74 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fe7a:	f7f8 f83f 	bl	8007efc <sys_now>
 800fe7e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800fe80:	4b1a      	ldr	r3, [pc, #104]	; (800feec <sys_check_timeouts+0x78>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d001      	beq.n	800fe8e <sys_check_timeouts+0x1a>
 800fe8a:	f7f9 f83f 	bl	8008f0c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fe8e:	4b18      	ldr	r3, [pc, #96]	; (800fef0 <sys_check_timeouts+0x7c>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d022      	beq.n	800fee0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	0fdb      	lsrs	r3, r3, #31
 800fea4:	f003 0301 	and.w	r3, r3, #1
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d11a      	bne.n	800fee4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a0f      	ldr	r2, [pc, #60]	; (800fef0 <sys_check_timeouts+0x7c>)
 800feb4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	4a0b      	ldr	r2, [pc, #44]	; (800fef4 <sys_check_timeouts+0x80>)
 800fec8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800feca:	68b9      	ldr	r1, [r7, #8]
 800fecc:	2006      	movs	r0, #6
 800fece:	f7f8 fd45 	bl	800895c <memp_free>
    if (handler != NULL) {
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d0d3      	beq.n	800fe80 <sys_check_timeouts+0xc>
      handler(arg);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6838      	ldr	r0, [r7, #0]
 800fedc:	4798      	blx	r3
  do {
 800fede:	e7cf      	b.n	800fe80 <sys_check_timeouts+0xc>
      return;
 800fee0:	bf00      	nop
 800fee2:	e000      	b.n	800fee6 <sys_check_timeouts+0x72>
      return;
 800fee4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	2001163c 	.word	0x2001163c
 800fef0:	200008c8 	.word	0x200008c8
 800fef4:	200008cc 	.word	0x200008cc

0800fef8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fefc:	f002 fd4c 	bl	8012998 <rand>
 800ff00:	4603      	mov	r3, r0
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	4b01      	ldr	r3, [pc, #4]	; (800ff18 <udp_init+0x20>)
 800ff12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ff14:	bf00      	nop
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20000020 	.word	0x20000020

0800ff1c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	4613      	mov	r3, r2
 800ff28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d105      	bne.n	800ff3c <udp_input_local_match+0x20>
 800ff30:	4b27      	ldr	r3, [pc, #156]	; (800ffd0 <udp_input_local_match+0xb4>)
 800ff32:	2287      	movs	r2, #135	; 0x87
 800ff34:	4927      	ldr	r1, [pc, #156]	; (800ffd4 <udp_input_local_match+0xb8>)
 800ff36:	4828      	ldr	r0, [pc, #160]	; (800ffd8 <udp_input_local_match+0xbc>)
 800ff38:	f002 fca0 	bl	801287c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d105      	bne.n	800ff4e <udp_input_local_match+0x32>
 800ff42:	4b23      	ldr	r3, [pc, #140]	; (800ffd0 <udp_input_local_match+0xb4>)
 800ff44:	2288      	movs	r2, #136	; 0x88
 800ff46:	4925      	ldr	r1, [pc, #148]	; (800ffdc <udp_input_local_match+0xc0>)
 800ff48:	4823      	ldr	r0, [pc, #140]	; (800ffd8 <udp_input_local_match+0xbc>)
 800ff4a:	f002 fc97 	bl	801287c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	7a1b      	ldrb	r3, [r3, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00b      	beq.n	800ff6e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	7a1a      	ldrb	r2, [r3, #8]
 800ff5a:	4b21      	ldr	r3, [pc, #132]	; (800ffe0 <udp_input_local_match+0xc4>)
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff62:	3301      	adds	r3, #1
 800ff64:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d001      	beq.n	800ff6e <udp_input_local_match+0x52>
    return 0;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	e02b      	b.n	800ffc6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d018      	beq.n	800ffa6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d013      	beq.n	800ffa2 <udp_input_local_match+0x86>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00f      	beq.n	800ffa2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff82:	4b17      	ldr	r3, [pc, #92]	; (800ffe0 <udp_input_local_match+0xc4>)
 800ff84:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8a:	d00a      	beq.n	800ffa2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <udp_input_local_match+0xc4>)
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	405a      	eors	r2, r3
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3308      	adds	r3, #8
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d110      	bne.n	800ffc4 <udp_input_local_match+0xa8>
          return 1;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e00f      	b.n	800ffc6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d009      	beq.n	800ffc0 <udp_input_local_match+0xa4>
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d005      	beq.n	800ffc0 <udp_input_local_match+0xa4>
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	4b09      	ldr	r3, [pc, #36]	; (800ffe0 <udp_input_local_match+0xc4>)
 800ffba:	695b      	ldr	r3, [r3, #20]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d101      	bne.n	800ffc4 <udp_input_local_match+0xa8>
        return 1;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e000      	b.n	800ffc6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	08015a14 	.word	0x08015a14
 800ffd4:	08015a44 	.word	0x08015a44
 800ffd8:	08015a68 	.word	0x08015a68
 800ffdc:	08015a90 	.word	0x08015a90
 800ffe0:	20003ca0 	.word	0x20003ca0

0800ffe4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ffe4:	b590      	push	{r4, r7, lr}
 800ffe6:	b08d      	sub	sp, #52	; 0x34
 800ffe8:	af02      	add	r7, sp, #8
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d105      	bne.n	8010004 <udp_input+0x20>
 800fff8:	4b7c      	ldr	r3, [pc, #496]	; (80101ec <udp_input+0x208>)
 800fffa:	22cf      	movs	r2, #207	; 0xcf
 800fffc:	497c      	ldr	r1, [pc, #496]	; (80101f0 <udp_input+0x20c>)
 800fffe:	487d      	ldr	r0, [pc, #500]	; (80101f4 <udp_input+0x210>)
 8010000:	f002 fc3c 	bl	801287c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d105      	bne.n	8010016 <udp_input+0x32>
 801000a:	4b78      	ldr	r3, [pc, #480]	; (80101ec <udp_input+0x208>)
 801000c:	22d0      	movs	r2, #208	; 0xd0
 801000e:	497a      	ldr	r1, [pc, #488]	; (80101f8 <udp_input+0x214>)
 8010010:	4878      	ldr	r0, [pc, #480]	; (80101f4 <udp_input+0x210>)
 8010012:	f002 fc33 	bl	801287c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	895b      	ldrh	r3, [r3, #10]
 801001a:	2b07      	cmp	r3, #7
 801001c:	d803      	bhi.n	8010026 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7f9 faae 	bl	8009580 <pbuf_free>
    goto end;
 8010024:	e0de      	b.n	80101e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801002c:	4b73      	ldr	r3, [pc, #460]	; (80101fc <udp_input+0x218>)
 801002e:	695b      	ldr	r3, [r3, #20]
 8010030:	4a72      	ldr	r2, [pc, #456]	; (80101fc <udp_input+0x218>)
 8010032:	6812      	ldr	r2, [r2, #0]
 8010034:	4611      	mov	r1, r2
 8010036:	4618      	mov	r0, r3
 8010038:	f001 fc88 	bl	801194c <ip4_addr_isbroadcast_u32>
 801003c:	4603      	mov	r3, r0
 801003e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	881b      	ldrh	r3, [r3, #0]
 8010044:	b29b      	uxth	r3, r3
 8010046:	4618      	mov	r0, r3
 8010048:	f7f7 ffe6 	bl	8008018 <lwip_htons>
 801004c:	4603      	mov	r3, r0
 801004e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	885b      	ldrh	r3, [r3, #2]
 8010054:	b29b      	uxth	r3, r3
 8010056:	4618      	mov	r0, r3
 8010058:	f7f7 ffde 	bl	8008018 <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010060:	2300      	movs	r3, #0
 8010062:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010064:	2300      	movs	r3, #0
 8010066:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010068:	2300      	movs	r3, #0
 801006a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801006c:	4b64      	ldr	r3, [pc, #400]	; (8010200 <udp_input+0x21c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
 8010072:	e054      	b.n	801011e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	8a5b      	ldrh	r3, [r3, #18]
 8010078:	89fa      	ldrh	r2, [r7, #14]
 801007a:	429a      	cmp	r2, r3
 801007c:	d14a      	bne.n	8010114 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801007e:	7cfb      	ldrb	r3, [r7, #19]
 8010080:	461a      	mov	r2, r3
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010086:	f7ff ff49 	bl	800ff1c <udp_input_local_match>
 801008a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801008c:	2b00      	cmp	r3, #0
 801008e:	d041      	beq.n	8010114 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	7c1b      	ldrb	r3, [r3, #16]
 8010094:	f003 0304 	and.w	r3, r3, #4
 8010098:	2b00      	cmp	r3, #0
 801009a:	d11d      	bne.n	80100d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d102      	bne.n	80100a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80100a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a4:	61fb      	str	r3, [r7, #28]
 80100a6:	e017      	b.n	80100d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80100a8:	7cfb      	ldrb	r3, [r7, #19]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d014      	beq.n	80100d8 <udp_input+0xf4>
 80100ae:	4b53      	ldr	r3, [pc, #332]	; (80101fc <udp_input+0x218>)
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b6:	d10f      	bne.n	80100d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	3304      	adds	r3, #4
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d008      	beq.n	80100d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	3304      	adds	r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d101      	bne.n	80100d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	8a9b      	ldrh	r3, [r3, #20]
 80100dc:	8a3a      	ldrh	r2, [r7, #16]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d118      	bne.n	8010114 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d005      	beq.n	80100f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	4b43      	ldr	r3, [pc, #268]	; (80101fc <udp_input+0x218>)
 80100f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d10e      	bne.n	8010114 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d014      	beq.n	8010126 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	68da      	ldr	r2, [r3, #12]
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010104:	4b3e      	ldr	r3, [pc, #248]	; (8010200 <udp_input+0x21c>)
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801010c:	4a3c      	ldr	r2, [pc, #240]	; (8010200 <udp_input+0x21c>)
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010112:	e008      	b.n	8010126 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
 801011e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1a7      	bne.n	8010074 <udp_input+0x90>
 8010124:	e000      	b.n	8010128 <udp_input+0x144>
        break;
 8010126:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <udp_input+0x14e>
    pcb = uncon_pcb;
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <udp_input+0x15a>
    for_us = 1;
 8010138:	2301      	movs	r3, #1
 801013a:	76fb      	strb	r3, [r7, #27]
 801013c:	e00a      	b.n	8010154 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	3304      	adds	r3, #4
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	4b2d      	ldr	r3, [pc, #180]	; (80101fc <udp_input+0x218>)
 8010146:	695b      	ldr	r3, [r3, #20]
 8010148:	429a      	cmp	r2, r3
 801014a:	bf0c      	ite	eq
 801014c:	2301      	moveq	r3, #1
 801014e:	2300      	movne	r3, #0
 8010150:	b2db      	uxtb	r3, r3
 8010152:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010154:	7efb      	ldrb	r3, [r7, #27]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d041      	beq.n	80101de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801015a:	2108      	movs	r1, #8
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f9 f989 	bl	8009474 <pbuf_remove_header>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00a      	beq.n	801017e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010168:	4b20      	ldr	r3, [pc, #128]	; (80101ec <udp_input+0x208>)
 801016a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801016e:	4925      	ldr	r1, [pc, #148]	; (8010204 <udp_input+0x220>)
 8010170:	4820      	ldr	r0, [pc, #128]	; (80101f4 <udp_input+0x210>)
 8010172:	f002 fb83 	bl	801287c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7f9 fa02 	bl	8009580 <pbuf_free>
      goto end;
 801017c:	e032      	b.n	80101e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	2b00      	cmp	r3, #0
 8010182:	d012      	beq.n	80101aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00a      	beq.n	80101a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	699c      	ldr	r4, [r3, #24]
 8010190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010192:	69d8      	ldr	r0, [r3, #28]
 8010194:	8a3b      	ldrh	r3, [r7, #16]
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <udp_input+0x224>)
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801019e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80101a0:	e021      	b.n	80101e6 <udp_input+0x202>
        pbuf_free(p);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7f9 f9ec 	bl	8009580 <pbuf_free>
        goto end;
 80101a8:	e01c      	b.n	80101e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80101aa:	7cfb      	ldrb	r3, [r7, #19]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d112      	bne.n	80101d6 <udp_input+0x1f2>
 80101b0:	4b12      	ldr	r3, [pc, #72]	; (80101fc <udp_input+0x218>)
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101b8:	2be0      	cmp	r3, #224	; 0xe0
 80101ba:	d00c      	beq.n	80101d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80101bc:	4b0f      	ldr	r3, [pc, #60]	; (80101fc <udp_input+0x218>)
 80101be:	899b      	ldrh	r3, [r3, #12]
 80101c0:	3308      	adds	r3, #8
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	b21b      	sxth	r3, r3
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f9 f9c6 	bl	800955a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80101ce:	2103      	movs	r1, #3
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f001 f89b 	bl	801130c <icmp_dest_unreach>
      pbuf_free(p);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7f9 f9d2 	bl	8009580 <pbuf_free>
  return;
 80101dc:	e003      	b.n	80101e6 <udp_input+0x202>
    pbuf_free(p);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7f9 f9ce 	bl	8009580 <pbuf_free>
  return;
 80101e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80101e6:	372c      	adds	r7, #44	; 0x2c
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd90      	pop	{r4, r7, pc}
 80101ec:	08015a14 	.word	0x08015a14
 80101f0:	08015ab8 	.word	0x08015ab8
 80101f4:	08015a68 	.word	0x08015a68
 80101f8:	08015ad0 	.word	0x08015ad0
 80101fc:	20003ca0 	.word	0x20003ca0
 8010200:	2001165c 	.word	0x2001165c
 8010204:	08015aec 	.word	0x08015aec
 8010208:	20003cb0 	.word	0x20003cb0

0801020c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d01e      	beq.n	801025a <udp_netif_ip_addr_changed+0x4e>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d01a      	beq.n	801025a <udp_netif_ip_addr_changed+0x4e>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d017      	beq.n	801025a <udp_netif_ip_addr_changed+0x4e>
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d013      	beq.n	801025a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010232:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <udp_netif_ip_addr_changed+0x5c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	e00c      	b.n	8010254 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	d103      	bne.n	801024e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	60fb      	str	r3, [r7, #12]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1ef      	bne.n	801023a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801025a:	bf00      	nop
 801025c:	3714      	adds	r7, #20
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	2001165c 	.word	0x2001165c

0801026c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010274:	4915      	ldr	r1, [pc, #84]	; (80102cc <etharp_free_entry+0x60>)
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	4613      	mov	r3, r2
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	4413      	add	r3, r2
 801027e:	00db      	lsls	r3, r3, #3
 8010280:	440b      	add	r3, r1
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d013      	beq.n	80102b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010288:	4910      	ldr	r1, [pc, #64]	; (80102cc <etharp_free_entry+0x60>)
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	4613      	mov	r3, r2
 801028e:	005b      	lsls	r3, r3, #1
 8010290:	4413      	add	r3, r2
 8010292:	00db      	lsls	r3, r3, #3
 8010294:	440b      	add	r3, r1
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4618      	mov	r0, r3
 801029a:	f7f9 f971 	bl	8009580 <pbuf_free>
    arp_table[i].q = NULL;
 801029e:	490b      	ldr	r1, [pc, #44]	; (80102cc <etharp_free_entry+0x60>)
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	4613      	mov	r3, r2
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	4413      	add	r3, r2
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	440b      	add	r3, r1
 80102ac:	2200      	movs	r2, #0
 80102ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80102b0:	4906      	ldr	r1, [pc, #24]	; (80102cc <etharp_free_entry+0x60>)
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	4613      	mov	r3, r2
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	4413      	add	r3, r2
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	440b      	add	r3, r1
 80102be:	3314      	adds	r3, #20
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	200008d4 	.word	0x200008d4

080102d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102d6:	2300      	movs	r3, #0
 80102d8:	607b      	str	r3, [r7, #4]
 80102da:	e096      	b.n	801040a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80102dc:	494f      	ldr	r1, [pc, #316]	; (801041c <etharp_tmr+0x14c>)
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	4613      	mov	r3, r2
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	4413      	add	r3, r2
 80102e6:	00db      	lsls	r3, r3, #3
 80102e8:	440b      	add	r3, r1
 80102ea:	3314      	adds	r3, #20
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 8086 	beq.w	8010404 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80102f8:	4948      	ldr	r1, [pc, #288]	; (801041c <etharp_tmr+0x14c>)
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	4613      	mov	r3, r2
 80102fe:	005b      	lsls	r3, r3, #1
 8010300:	4413      	add	r3, r2
 8010302:	00db      	lsls	r3, r3, #3
 8010304:	440b      	add	r3, r1
 8010306:	3312      	adds	r3, #18
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	b298      	uxth	r0, r3
 801030e:	4943      	ldr	r1, [pc, #268]	; (801041c <etharp_tmr+0x14c>)
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	4613      	mov	r3, r2
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	4413      	add	r3, r2
 8010318:	00db      	lsls	r3, r3, #3
 801031a:	440b      	add	r3, r1
 801031c:	3312      	adds	r3, #18
 801031e:	4602      	mov	r2, r0
 8010320:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010322:	493e      	ldr	r1, [pc, #248]	; (801041c <etharp_tmr+0x14c>)
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	4613      	mov	r3, r2
 8010328:	005b      	lsls	r3, r3, #1
 801032a:	4413      	add	r3, r2
 801032c:	00db      	lsls	r3, r3, #3
 801032e:	440b      	add	r3, r1
 8010330:	3312      	adds	r3, #18
 8010332:	881b      	ldrh	r3, [r3, #0]
 8010334:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010338:	d215      	bcs.n	8010366 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801033a:	4938      	ldr	r1, [pc, #224]	; (801041c <etharp_tmr+0x14c>)
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	4613      	mov	r3, r2
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4413      	add	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	440b      	add	r3, r1
 8010348:	3314      	adds	r3, #20
 801034a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801034c:	2b01      	cmp	r3, #1
 801034e:	d10e      	bne.n	801036e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010350:	4932      	ldr	r1, [pc, #200]	; (801041c <etharp_tmr+0x14c>)
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	4613      	mov	r3, r2
 8010356:	005b      	lsls	r3, r3, #1
 8010358:	4413      	add	r3, r2
 801035a:	00db      	lsls	r3, r3, #3
 801035c:	440b      	add	r3, r1
 801035e:	3312      	adds	r3, #18
 8010360:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010362:	2b04      	cmp	r3, #4
 8010364:	d903      	bls.n	801036e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7ff ff80 	bl	801026c <etharp_free_entry>
 801036c:	e04a      	b.n	8010404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801036e:	492b      	ldr	r1, [pc, #172]	; (801041c <etharp_tmr+0x14c>)
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	4613      	mov	r3, r2
 8010374:	005b      	lsls	r3, r3, #1
 8010376:	4413      	add	r3, r2
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	440b      	add	r3, r1
 801037c:	3314      	adds	r3, #20
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	2b03      	cmp	r3, #3
 8010382:	d10a      	bne.n	801039a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010384:	4925      	ldr	r1, [pc, #148]	; (801041c <etharp_tmr+0x14c>)
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	4613      	mov	r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4413      	add	r3, r2
 801038e:	00db      	lsls	r3, r3, #3
 8010390:	440b      	add	r3, r1
 8010392:	3314      	adds	r3, #20
 8010394:	2204      	movs	r2, #4
 8010396:	701a      	strb	r2, [r3, #0]
 8010398:	e034      	b.n	8010404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801039a:	4920      	ldr	r1, [pc, #128]	; (801041c <etharp_tmr+0x14c>)
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	4613      	mov	r3, r2
 80103a0:	005b      	lsls	r3, r3, #1
 80103a2:	4413      	add	r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	3314      	adds	r3, #20
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b04      	cmp	r3, #4
 80103ae:	d10a      	bne.n	80103c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80103b0:	491a      	ldr	r1, [pc, #104]	; (801041c <etharp_tmr+0x14c>)
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	4613      	mov	r3, r2
 80103b6:	005b      	lsls	r3, r3, #1
 80103b8:	4413      	add	r3, r2
 80103ba:	00db      	lsls	r3, r3, #3
 80103bc:	440b      	add	r3, r1
 80103be:	3314      	adds	r3, #20
 80103c0:	2202      	movs	r2, #2
 80103c2:	701a      	strb	r2, [r3, #0]
 80103c4:	e01e      	b.n	8010404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80103c6:	4915      	ldr	r1, [pc, #84]	; (801041c <etharp_tmr+0x14c>)
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	4613      	mov	r3, r2
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	4413      	add	r3, r2
 80103d0:	00db      	lsls	r3, r3, #3
 80103d2:	440b      	add	r3, r1
 80103d4:	3314      	adds	r3, #20
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d113      	bne.n	8010404 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80103dc:	490f      	ldr	r1, [pc, #60]	; (801041c <etharp_tmr+0x14c>)
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	4613      	mov	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	4413      	add	r3, r2
 80103e6:	00db      	lsls	r3, r3, #3
 80103e8:	440b      	add	r3, r1
 80103ea:	3308      	adds	r3, #8
 80103ec:	6818      	ldr	r0, [r3, #0]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	4613      	mov	r3, r2
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	4413      	add	r3, r2
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	4a08      	ldr	r2, [pc, #32]	; (801041c <etharp_tmr+0x14c>)
 80103fa:	4413      	add	r3, r2
 80103fc:	3304      	adds	r3, #4
 80103fe:	4619      	mov	r1, r3
 8010400:	f000 fe6e 	bl	80110e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	3301      	adds	r3, #1
 8010408:	607b      	str	r3, [r7, #4]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2b09      	cmp	r3, #9
 801040e:	f77f af65 	ble.w	80102dc <etharp_tmr+0xc>
      }
    }
  }
}
 8010412:	bf00      	nop
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	200008d4 	.word	0x200008d4

08010420 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b08a      	sub	sp, #40	; 0x28
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	460b      	mov	r3, r1
 801042a:	607a      	str	r2, [r7, #4]
 801042c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801042e:	230a      	movs	r3, #10
 8010430:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010432:	230a      	movs	r3, #10
 8010434:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010436:	230a      	movs	r3, #10
 8010438:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801043e:	230a      	movs	r3, #10
 8010440:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	83bb      	strh	r3, [r7, #28]
 8010446:	2300      	movs	r3, #0
 8010448:	837b      	strh	r3, [r7, #26]
 801044a:	2300      	movs	r3, #0
 801044c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801044e:	2300      	movs	r3, #0
 8010450:	843b      	strh	r3, [r7, #32]
 8010452:	e0ae      	b.n	80105b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010458:	49a6      	ldr	r1, [pc, #664]	; (80106f4 <etharp_find_entry+0x2d4>)
 801045a:	4613      	mov	r3, r2
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	4413      	add	r3, r2
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	440b      	add	r3, r1
 8010464:	3314      	adds	r3, #20
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801046a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801046e:	2b0a      	cmp	r3, #10
 8010470:	d105      	bne.n	801047e <etharp_find_entry+0x5e>
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d102      	bne.n	801047e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010478:	8c3b      	ldrh	r3, [r7, #32]
 801047a:	847b      	strh	r3, [r7, #34]	; 0x22
 801047c:	e095      	b.n	80105aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801047e:	7dfb      	ldrb	r3, [r7, #23]
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 8092 	beq.w	80105aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010486:	7dfb      	ldrb	r3, [r7, #23]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d009      	beq.n	80104a0 <etharp_find_entry+0x80>
 801048c:	7dfb      	ldrb	r3, [r7, #23]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d806      	bhi.n	80104a0 <etharp_find_entry+0x80>
 8010492:	4b99      	ldr	r3, [pc, #612]	; (80106f8 <etharp_find_entry+0x2d8>)
 8010494:	f240 1223 	movw	r2, #291	; 0x123
 8010498:	4998      	ldr	r1, [pc, #608]	; (80106fc <etharp_find_entry+0x2dc>)
 801049a:	4899      	ldr	r0, [pc, #612]	; (8010700 <etharp_find_entry+0x2e0>)
 801049c:	f002 f9ee 	bl	801287c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d020      	beq.n	80104e8 <etharp_find_entry+0xc8>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6819      	ldr	r1, [r3, #0]
 80104aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ae:	4891      	ldr	r0, [pc, #580]	; (80106f4 <etharp_find_entry+0x2d4>)
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	4403      	add	r3, r0
 80104ba:	3304      	adds	r3, #4
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4299      	cmp	r1, r3
 80104c0:	d112      	bne.n	80104e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00c      	beq.n	80104e2 <etharp_find_entry+0xc2>
 80104c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104cc:	4989      	ldr	r1, [pc, #548]	; (80106f4 <etharp_find_entry+0x2d4>)
 80104ce:	4613      	mov	r3, r2
 80104d0:	005b      	lsls	r3, r3, #1
 80104d2:	4413      	add	r3, r2
 80104d4:	00db      	lsls	r3, r3, #3
 80104d6:	440b      	add	r3, r1
 80104d8:	3308      	adds	r3, #8
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d102      	bne.n	80104e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80104e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80104e6:	e100      	b.n	80106ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80104e8:	7dfb      	ldrb	r3, [r7, #23]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d140      	bne.n	8010570 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80104ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104f2:	4980      	ldr	r1, [pc, #512]	; (80106f4 <etharp_find_entry+0x2d4>)
 80104f4:	4613      	mov	r3, r2
 80104f6:	005b      	lsls	r3, r3, #1
 80104f8:	4413      	add	r3, r2
 80104fa:	00db      	lsls	r3, r3, #3
 80104fc:	440b      	add	r3, r1
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01a      	beq.n	801053a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010508:	497a      	ldr	r1, [pc, #488]	; (80106f4 <etharp_find_entry+0x2d4>)
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	440b      	add	r3, r1
 8010514:	3312      	adds	r3, #18
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	8bba      	ldrh	r2, [r7, #28]
 801051a:	429a      	cmp	r2, r3
 801051c:	d845      	bhi.n	80105aa <etharp_find_entry+0x18a>
            old_queue = i;
 801051e:	8c3b      	ldrh	r3, [r7, #32]
 8010520:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010526:	4973      	ldr	r1, [pc, #460]	; (80106f4 <etharp_find_entry+0x2d4>)
 8010528:	4613      	mov	r3, r2
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	4413      	add	r3, r2
 801052e:	00db      	lsls	r3, r3, #3
 8010530:	440b      	add	r3, r1
 8010532:	3312      	adds	r3, #18
 8010534:	881b      	ldrh	r3, [r3, #0]
 8010536:	83bb      	strh	r3, [r7, #28]
 8010538:	e037      	b.n	80105aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801053a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801053e:	496d      	ldr	r1, [pc, #436]	; (80106f4 <etharp_find_entry+0x2d4>)
 8010540:	4613      	mov	r3, r2
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	4413      	add	r3, r2
 8010546:	00db      	lsls	r3, r3, #3
 8010548:	440b      	add	r3, r1
 801054a:	3312      	adds	r3, #18
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	8b7a      	ldrh	r2, [r7, #26]
 8010550:	429a      	cmp	r2, r3
 8010552:	d82a      	bhi.n	80105aa <etharp_find_entry+0x18a>
            old_pending = i;
 8010554:	8c3b      	ldrh	r3, [r7, #32]
 8010556:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010558:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801055c:	4965      	ldr	r1, [pc, #404]	; (80106f4 <etharp_find_entry+0x2d4>)
 801055e:	4613      	mov	r3, r2
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	4413      	add	r3, r2
 8010564:	00db      	lsls	r3, r3, #3
 8010566:	440b      	add	r3, r1
 8010568:	3312      	adds	r3, #18
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	837b      	strh	r3, [r7, #26]
 801056e:	e01c      	b.n	80105aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010570:	7dfb      	ldrb	r3, [r7, #23]
 8010572:	2b01      	cmp	r3, #1
 8010574:	d919      	bls.n	80105aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801057a:	495e      	ldr	r1, [pc, #376]	; (80106f4 <etharp_find_entry+0x2d4>)
 801057c:	4613      	mov	r3, r2
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	4413      	add	r3, r2
 8010582:	00db      	lsls	r3, r3, #3
 8010584:	440b      	add	r3, r1
 8010586:	3312      	adds	r3, #18
 8010588:	881b      	ldrh	r3, [r3, #0]
 801058a:	8b3a      	ldrh	r2, [r7, #24]
 801058c:	429a      	cmp	r2, r3
 801058e:	d80c      	bhi.n	80105aa <etharp_find_entry+0x18a>
            old_stable = i;
 8010590:	8c3b      	ldrh	r3, [r7, #32]
 8010592:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010594:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010598:	4956      	ldr	r1, [pc, #344]	; (80106f4 <etharp_find_entry+0x2d4>)
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	440b      	add	r3, r1
 80105a4:	3312      	adds	r3, #18
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105aa:	8c3b      	ldrh	r3, [r7, #32]
 80105ac:	3301      	adds	r3, #1
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	843b      	strh	r3, [r7, #32]
 80105b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105b6:	2b09      	cmp	r3, #9
 80105b8:	f77f af4c 	ble.w	8010454 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80105bc:	7afb      	ldrb	r3, [r7, #11]
 80105be:	f003 0302 	and.w	r3, r3, #2
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d108      	bne.n	80105d8 <etharp_find_entry+0x1b8>
 80105c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105ca:	2b0a      	cmp	r3, #10
 80105cc:	d107      	bne.n	80105de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80105ce:	7afb      	ldrb	r3, [r7, #11]
 80105d0:	f003 0301 	and.w	r3, r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d102      	bne.n	80105de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80105d8:	f04f 33ff 	mov.w	r3, #4294967295
 80105dc:	e085      	b.n	80106ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80105de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105e2:	2b09      	cmp	r3, #9
 80105e4:	dc02      	bgt.n	80105ec <etharp_find_entry+0x1cc>
    i = empty;
 80105e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105e8:	843b      	strh	r3, [r7, #32]
 80105ea:	e039      	b.n	8010660 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80105ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80105f0:	2b09      	cmp	r3, #9
 80105f2:	dc14      	bgt.n	801061e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80105f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80105f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105fc:	493d      	ldr	r1, [pc, #244]	; (80106f4 <etharp_find_entry+0x2d4>)
 80105fe:	4613      	mov	r3, r2
 8010600:	005b      	lsls	r3, r3, #1
 8010602:	4413      	add	r3, r2
 8010604:	00db      	lsls	r3, r3, #3
 8010606:	440b      	add	r3, r1
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d018      	beq.n	8010640 <etharp_find_entry+0x220>
 801060e:	4b3a      	ldr	r3, [pc, #232]	; (80106f8 <etharp_find_entry+0x2d8>)
 8010610:	f240 126d 	movw	r2, #365	; 0x16d
 8010614:	493b      	ldr	r1, [pc, #236]	; (8010704 <etharp_find_entry+0x2e4>)
 8010616:	483a      	ldr	r0, [pc, #232]	; (8010700 <etharp_find_entry+0x2e0>)
 8010618:	f002 f930 	bl	801287c <iprintf>
 801061c:	e010      	b.n	8010640 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801061e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010622:	2b09      	cmp	r3, #9
 8010624:	dc02      	bgt.n	801062c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010628:	843b      	strh	r3, [r7, #32]
 801062a:	e009      	b.n	8010640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801062c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010630:	2b09      	cmp	r3, #9
 8010632:	dc02      	bgt.n	801063a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010634:	8bfb      	ldrh	r3, [r7, #30]
 8010636:	843b      	strh	r3, [r7, #32]
 8010638:	e002      	b.n	8010640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801063a:	f04f 33ff 	mov.w	r3, #4294967295
 801063e:	e054      	b.n	80106ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010640:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010644:	2b09      	cmp	r3, #9
 8010646:	dd06      	ble.n	8010656 <etharp_find_entry+0x236>
 8010648:	4b2b      	ldr	r3, [pc, #172]	; (80106f8 <etharp_find_entry+0x2d8>)
 801064a:	f240 127f 	movw	r2, #383	; 0x17f
 801064e:	492e      	ldr	r1, [pc, #184]	; (8010708 <etharp_find_entry+0x2e8>)
 8010650:	482b      	ldr	r0, [pc, #172]	; (8010700 <etharp_find_entry+0x2e0>)
 8010652:	f002 f913 	bl	801287c <iprintf>
    etharp_free_entry(i);
 8010656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff fe06 	bl	801026c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010660:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010664:	2b09      	cmp	r3, #9
 8010666:	dd06      	ble.n	8010676 <etharp_find_entry+0x256>
 8010668:	4b23      	ldr	r3, [pc, #140]	; (80106f8 <etharp_find_entry+0x2d8>)
 801066a:	f240 1283 	movw	r2, #387	; 0x183
 801066e:	4926      	ldr	r1, [pc, #152]	; (8010708 <etharp_find_entry+0x2e8>)
 8010670:	4823      	ldr	r0, [pc, #140]	; (8010700 <etharp_find_entry+0x2e0>)
 8010672:	f002 f903 	bl	801287c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801067a:	491e      	ldr	r1, [pc, #120]	; (80106f4 <etharp_find_entry+0x2d4>)
 801067c:	4613      	mov	r3, r2
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4413      	add	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	440b      	add	r3, r1
 8010686:	3314      	adds	r3, #20
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d006      	beq.n	801069c <etharp_find_entry+0x27c>
 801068e:	4b1a      	ldr	r3, [pc, #104]	; (80106f8 <etharp_find_entry+0x2d8>)
 8010690:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010694:	491d      	ldr	r1, [pc, #116]	; (801070c <etharp_find_entry+0x2ec>)
 8010696:	481a      	ldr	r0, [pc, #104]	; (8010700 <etharp_find_entry+0x2e0>)
 8010698:	f002 f8f0 	bl	801287c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00b      	beq.n	80106ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80106a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6819      	ldr	r1, [r3, #0]
 80106aa:	4812      	ldr	r0, [pc, #72]	; (80106f4 <etharp_find_entry+0x2d4>)
 80106ac:	4613      	mov	r3, r2
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	00db      	lsls	r3, r3, #3
 80106b4:	4403      	add	r3, r0
 80106b6:	3304      	adds	r3, #4
 80106b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80106ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106be:	490d      	ldr	r1, [pc, #52]	; (80106f4 <etharp_find_entry+0x2d4>)
 80106c0:	4613      	mov	r3, r2
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	4413      	add	r3, r2
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	440b      	add	r3, r1
 80106ca:	3312      	adds	r3, #18
 80106cc:	2200      	movs	r2, #0
 80106ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80106d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106d4:	4907      	ldr	r1, [pc, #28]	; (80106f4 <etharp_find_entry+0x2d4>)
 80106d6:	4613      	mov	r3, r2
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	4413      	add	r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	440b      	add	r3, r1
 80106e0:	3308      	adds	r3, #8
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80106e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3728      	adds	r7, #40	; 0x28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	200008d4 	.word	0x200008d4
 80106f8:	08015d78 	.word	0x08015d78
 80106fc:	08015db0 	.word	0x08015db0
 8010700:	08015df0 	.word	0x08015df0
 8010704:	08015e18 	.word	0x08015e18
 8010708:	08015e30 	.word	0x08015e30
 801070c:	08015e44 	.word	0x08015e44

08010710 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af02      	add	r7, sp, #8
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010724:	2b06      	cmp	r3, #6
 8010726:	d006      	beq.n	8010736 <etharp_update_arp_entry+0x26>
 8010728:	4b48      	ldr	r3, [pc, #288]	; (801084c <etharp_update_arp_entry+0x13c>)
 801072a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801072e:	4948      	ldr	r1, [pc, #288]	; (8010850 <etharp_update_arp_entry+0x140>)
 8010730:	4848      	ldr	r0, [pc, #288]	; (8010854 <etharp_update_arp_entry+0x144>)
 8010732:	f002 f8a3 	bl	801287c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d012      	beq.n	8010762 <etharp_update_arp_entry+0x52>
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00e      	beq.n	8010762 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68f9      	ldr	r1, [r7, #12]
 801074a:	4618      	mov	r0, r3
 801074c:	f001 f8fe 	bl	801194c <ip4_addr_isbroadcast_u32>
 8010750:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010752:	2b00      	cmp	r3, #0
 8010754:	d105      	bne.n	8010762 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801075e:	2be0      	cmp	r3, #224	; 0xe0
 8010760:	d102      	bne.n	8010768 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010762:	f06f 030f 	mvn.w	r3, #15
 8010766:	e06c      	b.n	8010842 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010768:	78fb      	ldrb	r3, [r7, #3]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	4619      	mov	r1, r3
 801076e:	68b8      	ldr	r0, [r7, #8]
 8010770:	f7ff fe56 	bl	8010420 <etharp_find_entry>
 8010774:	4603      	mov	r3, r0
 8010776:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801077c:	2b00      	cmp	r3, #0
 801077e:	da02      	bge.n	8010786 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010780:	8afb      	ldrh	r3, [r7, #22]
 8010782:	b25b      	sxtb	r3, r3
 8010784:	e05d      	b.n	8010842 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801078a:	4933      	ldr	r1, [pc, #204]	; (8010858 <etharp_update_arp_entry+0x148>)
 801078c:	4613      	mov	r3, r2
 801078e:	005b      	lsls	r3, r3, #1
 8010790:	4413      	add	r3, r2
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	440b      	add	r3, r1
 8010796:	3314      	adds	r3, #20
 8010798:	2202      	movs	r2, #2
 801079a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801079c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107a0:	492d      	ldr	r1, [pc, #180]	; (8010858 <etharp_update_arp_entry+0x148>)
 80107a2:	4613      	mov	r3, r2
 80107a4:	005b      	lsls	r3, r3, #1
 80107a6:	4413      	add	r3, r2
 80107a8:	00db      	lsls	r3, r3, #3
 80107aa:	440b      	add	r3, r1
 80107ac:	3308      	adds	r3, #8
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80107b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107b6:	4613      	mov	r3, r2
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	4413      	add	r3, r2
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	3308      	adds	r3, #8
 80107c0:	4a25      	ldr	r2, [pc, #148]	; (8010858 <etharp_update_arp_entry+0x148>)
 80107c2:	4413      	add	r3, r2
 80107c4:	3304      	adds	r3, #4
 80107c6:	2206      	movs	r2, #6
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f002 f840 	bl	8012850 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80107d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107d4:	4920      	ldr	r1, [pc, #128]	; (8010858 <etharp_update_arp_entry+0x148>)
 80107d6:	4613      	mov	r3, r2
 80107d8:	005b      	lsls	r3, r3, #1
 80107da:	4413      	add	r3, r2
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	440b      	add	r3, r1
 80107e0:	3312      	adds	r3, #18
 80107e2:	2200      	movs	r2, #0
 80107e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80107e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107ea:	491b      	ldr	r1, [pc, #108]	; (8010858 <etharp_update_arp_entry+0x148>)
 80107ec:	4613      	mov	r3, r2
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	4413      	add	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	440b      	add	r3, r1
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d021      	beq.n	8010840 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80107fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010800:	4915      	ldr	r1, [pc, #84]	; (8010858 <etharp_update_arp_entry+0x148>)
 8010802:	4613      	mov	r3, r2
 8010804:	005b      	lsls	r3, r3, #1
 8010806:	4413      	add	r3, r2
 8010808:	00db      	lsls	r3, r3, #3
 801080a:	440b      	add	r3, r1
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010814:	4910      	ldr	r1, [pc, #64]	; (8010858 <etharp_update_arp_entry+0x148>)
 8010816:	4613      	mov	r3, r2
 8010818:	005b      	lsls	r3, r3, #1
 801081a:	4413      	add	r3, r2
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	440b      	add	r3, r1
 8010820:	2200      	movs	r2, #0
 8010822:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801082a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6939      	ldr	r1, [r7, #16]
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f001 ff91 	bl	801275c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801083a:	6938      	ldr	r0, [r7, #16]
 801083c:	f7f8 fea0 	bl	8009580 <pbuf_free>
  }
  return ERR_OK;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3718      	adds	r7, #24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	08015d78 	.word	0x08015d78
 8010850:	08015e70 	.word	0x08015e70
 8010854:	08015df0 	.word	0x08015df0
 8010858:	200008d4 	.word	0x200008d4

0801085c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010864:	2300      	movs	r3, #0
 8010866:	60fb      	str	r3, [r7, #12]
 8010868:	e01e      	b.n	80108a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801086a:	4913      	ldr	r1, [pc, #76]	; (80108b8 <etharp_cleanup_netif+0x5c>)
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	4613      	mov	r3, r2
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	4413      	add	r3, r2
 8010874:	00db      	lsls	r3, r3, #3
 8010876:	440b      	add	r3, r1
 8010878:	3314      	adds	r3, #20
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801087e:	7afb      	ldrb	r3, [r7, #11]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00e      	beq.n	80108a2 <etharp_cleanup_netif+0x46>
 8010884:	490c      	ldr	r1, [pc, #48]	; (80108b8 <etharp_cleanup_netif+0x5c>)
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	4613      	mov	r3, r2
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	4413      	add	r3, r2
 801088e:	00db      	lsls	r3, r3, #3
 8010890:	440b      	add	r3, r1
 8010892:	3308      	adds	r3, #8
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	429a      	cmp	r2, r3
 801089a:	d102      	bne.n	80108a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f7ff fce5 	bl	801026c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3301      	adds	r3, #1
 80108a6:	60fb      	str	r3, [r7, #12]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b09      	cmp	r3, #9
 80108ac:	dddd      	ble.n	801086a <etharp_cleanup_netif+0xe>
    }
  }
}
 80108ae:	bf00      	nop
 80108b0:	bf00      	nop
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	200008d4 	.word	0x200008d4

080108bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80108bc:	b5b0      	push	{r4, r5, r7, lr}
 80108be:	b08a      	sub	sp, #40	; 0x28
 80108c0:	af04      	add	r7, sp, #16
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d107      	bne.n	80108dc <etharp_input+0x20>
 80108cc:	4b3d      	ldr	r3, [pc, #244]	; (80109c4 <etharp_input+0x108>)
 80108ce:	f240 228a 	movw	r2, #650	; 0x28a
 80108d2:	493d      	ldr	r1, [pc, #244]	; (80109c8 <etharp_input+0x10c>)
 80108d4:	483d      	ldr	r0, [pc, #244]	; (80109cc <etharp_input+0x110>)
 80108d6:	f001 ffd1 	bl	801287c <iprintf>
 80108da:	e06f      	b.n	80109bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ec:	d10c      	bne.n	8010908 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108f2:	2b06      	cmp	r3, #6
 80108f4:	d108      	bne.n	8010908 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108fa:	2b04      	cmp	r3, #4
 80108fc:	d104      	bne.n	8010908 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	885b      	ldrh	r3, [r3, #2]
 8010902:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010904:	2b08      	cmp	r3, #8
 8010906:	d003      	beq.n	8010910 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7f8 fe39 	bl	8009580 <pbuf_free>
    return;
 801090e:	e055      	b.n	80109bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	330e      	adds	r3, #14
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	3318      	adds	r3, #24
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	3304      	adds	r3, #4
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d102      	bne.n	8010930 <etharp_input+0x74>
    for_us = 0;
 801092a:	2300      	movs	r3, #0
 801092c:	75fb      	strb	r3, [r7, #23]
 801092e:	e009      	b.n	8010944 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	3304      	adds	r3, #4
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	bf0c      	ite	eq
 801093c:	2301      	moveq	r3, #1
 801093e:	2300      	movne	r3, #0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	f103 0208 	add.w	r2, r3, #8
 801094a:	7dfb      	ldrb	r3, [r7, #23]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d001      	beq.n	8010954 <etharp_input+0x98>
 8010950:	2301      	movs	r3, #1
 8010952:	e000      	b.n	8010956 <etharp_input+0x9a>
 8010954:	2302      	movs	r3, #2
 8010956:	f107 010c 	add.w	r1, r7, #12
 801095a:	6838      	ldr	r0, [r7, #0]
 801095c:	f7ff fed8 	bl	8010710 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	88db      	ldrh	r3, [r3, #6]
 8010964:	b29b      	uxth	r3, r3
 8010966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801096a:	d003      	beq.n	8010974 <etharp_input+0xb8>
 801096c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010970:	d01e      	beq.n	80109b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010972:	e020      	b.n	80109b6 <etharp_input+0xfa>
      if (for_us) {
 8010974:	7dfb      	ldrb	r3, [r7, #23]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d01c      	beq.n	80109b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010994:	2102      	movs	r1, #2
 8010996:	9103      	str	r1, [sp, #12]
 8010998:	f107 010c 	add.w	r1, r7, #12
 801099c:	9102      	str	r1, [sp, #8]
 801099e:	9201      	str	r2, [sp, #4]
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	462b      	mov	r3, r5
 80109a4:	4622      	mov	r2, r4
 80109a6:	4601      	mov	r1, r0
 80109a8:	6838      	ldr	r0, [r7, #0]
 80109aa:	f000 faeb 	bl	8010f84 <etharp_raw>
      break;
 80109ae:	e001      	b.n	80109b4 <etharp_input+0xf8>
      break;
 80109b0:	bf00      	nop
 80109b2:	e000      	b.n	80109b6 <etharp_input+0xfa>
      break;
 80109b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7f8 fde2 	bl	8009580 <pbuf_free>
}
 80109bc:	3718      	adds	r7, #24
 80109be:	46bd      	mov	sp, r7
 80109c0:	bdb0      	pop	{r4, r5, r7, pc}
 80109c2:	bf00      	nop
 80109c4:	08015d78 	.word	0x08015d78
 80109c8:	08015ec8 	.word	0x08015ec8
 80109cc:	08015df0 	.word	0x08015df0

080109d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	4613      	mov	r3, r2
 80109dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80109de:	79fa      	ldrb	r2, [r7, #7]
 80109e0:	4944      	ldr	r1, [pc, #272]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 80109e2:	4613      	mov	r3, r2
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	4413      	add	r3, r2
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	440b      	add	r3, r1
 80109ec:	3314      	adds	r3, #20
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d806      	bhi.n	8010a02 <etharp_output_to_arp_index+0x32>
 80109f4:	4b40      	ldr	r3, [pc, #256]	; (8010af8 <etharp_output_to_arp_index+0x128>)
 80109f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80109fa:	4940      	ldr	r1, [pc, #256]	; (8010afc <etharp_output_to_arp_index+0x12c>)
 80109fc:	4840      	ldr	r0, [pc, #256]	; (8010b00 <etharp_output_to_arp_index+0x130>)
 80109fe:	f001 ff3d 	bl	801287c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010a02:	79fa      	ldrb	r2, [r7, #7]
 8010a04:	493b      	ldr	r1, [pc, #236]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a06:	4613      	mov	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	00db      	lsls	r3, r3, #3
 8010a0e:	440b      	add	r3, r1
 8010a10:	3314      	adds	r3, #20
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b02      	cmp	r3, #2
 8010a16:	d153      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010a18:	79fa      	ldrb	r2, [r7, #7]
 8010a1a:	4936      	ldr	r1, [pc, #216]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	4413      	add	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	440b      	add	r3, r1
 8010a26:	3312      	adds	r3, #18
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010a2e:	d919      	bls.n	8010a64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010a30:	79fa      	ldrb	r2, [r7, #7]
 8010a32:	4613      	mov	r3, r2
 8010a34:	005b      	lsls	r3, r3, #1
 8010a36:	4413      	add	r3, r2
 8010a38:	00db      	lsls	r3, r3, #3
 8010a3a:	4a2e      	ldr	r2, [pc, #184]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a3c:	4413      	add	r3, r2
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4619      	mov	r1, r3
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f000 fb4c 	bl	80110e0 <etharp_request>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d138      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a4e:	79fa      	ldrb	r2, [r7, #7]
 8010a50:	4928      	ldr	r1, [pc, #160]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a52:	4613      	mov	r3, r2
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	4413      	add	r3, r2
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	440b      	add	r3, r1
 8010a5c:	3314      	adds	r3, #20
 8010a5e:	2203      	movs	r2, #3
 8010a60:	701a      	strb	r2, [r3, #0]
 8010a62:	e02d      	b.n	8010ac0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010a64:	79fa      	ldrb	r2, [r7, #7]
 8010a66:	4923      	ldr	r1, [pc, #140]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a68:	4613      	mov	r3, r2
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	4413      	add	r3, r2
 8010a6e:	00db      	lsls	r3, r3, #3
 8010a70:	440b      	add	r3, r1
 8010a72:	3312      	adds	r3, #18
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010a7a:	d321      	bcc.n	8010ac0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	005b      	lsls	r3, r3, #1
 8010a82:	4413      	add	r3, r2
 8010a84:	00db      	lsls	r3, r3, #3
 8010a86:	4a1b      	ldr	r2, [pc, #108]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a88:	4413      	add	r3, r2
 8010a8a:	1d19      	adds	r1, r3, #4
 8010a8c:	79fa      	ldrb	r2, [r7, #7]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	3308      	adds	r3, #8
 8010a98:	4a16      	ldr	r2, [pc, #88]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a9a:	4413      	add	r3, r2
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 fafb 	bl	801109c <etharp_request_dst>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d109      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010aac:	79fa      	ldrb	r2, [r7, #7]
 8010aae:	4911      	ldr	r1, [pc, #68]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	005b      	lsls	r3, r3, #1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	440b      	add	r3, r1
 8010aba:	3314      	adds	r3, #20
 8010abc:	2203      	movs	r2, #3
 8010abe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010ac6:	79fa      	ldrb	r2, [r7, #7]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	3308      	adds	r3, #8
 8010ad2:	4a08      	ldr	r2, [pc, #32]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010ad4:	4413      	add	r3, r2
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010adc:	9200      	str	r2, [sp, #0]
 8010ade:	460a      	mov	r2, r1
 8010ae0:	68b9      	ldr	r1, [r7, #8]
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f001 fe3a 	bl	801275c <ethernet_output>
 8010ae8:	4603      	mov	r3, r0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	200008d4 	.word	0x200008d4
 8010af8:	08015d78 	.word	0x08015d78
 8010afc:	08015ee8 	.word	0x08015ee8
 8010b00:	08015df0 	.word	0x08015df0

08010b04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08a      	sub	sp, #40	; 0x28
 8010b08:	af02      	add	r7, sp, #8
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d106      	bne.n	8010b28 <etharp_output+0x24>
 8010b1a:	4b73      	ldr	r3, [pc, #460]	; (8010ce8 <etharp_output+0x1e4>)
 8010b1c:	f240 321e 	movw	r2, #798	; 0x31e
 8010b20:	4972      	ldr	r1, [pc, #456]	; (8010cec <etharp_output+0x1e8>)
 8010b22:	4873      	ldr	r0, [pc, #460]	; (8010cf0 <etharp_output+0x1ec>)
 8010b24:	f001 feaa 	bl	801287c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <etharp_output+0x38>
 8010b2e:	4b6e      	ldr	r3, [pc, #440]	; (8010ce8 <etharp_output+0x1e4>)
 8010b30:	f240 321f 	movw	r2, #799	; 0x31f
 8010b34:	496f      	ldr	r1, [pc, #444]	; (8010cf4 <etharp_output+0x1f0>)
 8010b36:	486e      	ldr	r0, [pc, #440]	; (8010cf0 <etharp_output+0x1ec>)
 8010b38:	f001 fea0 	bl	801287c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <etharp_output+0x4c>
 8010b42:	4b69      	ldr	r3, [pc, #420]	; (8010ce8 <etharp_output+0x1e4>)
 8010b44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010b48:	496b      	ldr	r1, [pc, #428]	; (8010cf8 <etharp_output+0x1f4>)
 8010b4a:	4869      	ldr	r0, [pc, #420]	; (8010cf0 <etharp_output+0x1ec>)
 8010b4c:	f001 fe96 	bl	801287c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68f9      	ldr	r1, [r7, #12]
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 fef8 	bl	801194c <ip4_addr_isbroadcast_u32>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010b62:	4b66      	ldr	r3, [pc, #408]	; (8010cfc <etharp_output+0x1f8>)
 8010b64:	61fb      	str	r3, [r7, #28]
 8010b66:	e0af      	b.n	8010cc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b70:	2be0      	cmp	r3, #224	; 0xe0
 8010b72:	d118      	bne.n	8010ba6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010b74:	2301      	movs	r3, #1
 8010b76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010b7c:	235e      	movs	r3, #94	; 0x5e
 8010b7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3301      	adds	r3, #1
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	3302      	adds	r3, #2
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3303      	adds	r3, #3
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010b9e:	f107 0310 	add.w	r3, r7, #16
 8010ba2:	61fb      	str	r3, [r7, #28]
 8010ba4:	e090      	b.n	8010cc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	3304      	adds	r3, #4
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	405a      	eors	r2, r3
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d012      	beq.n	8010be4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010bc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d00b      	beq.n	8010be4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	330c      	adds	r3, #12
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d003      	beq.n	8010bde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	330c      	adds	r3, #12
 8010bda:	61bb      	str	r3, [r7, #24]
 8010bdc:	e002      	b.n	8010be4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010bde:	f06f 0303 	mvn.w	r3, #3
 8010be2:	e07d      	b.n	8010ce0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010be4:	4b46      	ldr	r3, [pc, #280]	; (8010d00 <etharp_output+0x1fc>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	4a46      	ldr	r2, [pc, #280]	; (8010d04 <etharp_output+0x200>)
 8010bec:	460b      	mov	r3, r1
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	440b      	add	r3, r1
 8010bf2:	00db      	lsls	r3, r3, #3
 8010bf4:	4413      	add	r3, r2
 8010bf6:	3314      	adds	r3, #20
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d925      	bls.n	8010c4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010bfe:	4b40      	ldr	r3, [pc, #256]	; (8010d00 <etharp_output+0x1fc>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	4619      	mov	r1, r3
 8010c04:	4a3f      	ldr	r2, [pc, #252]	; (8010d04 <etharp_output+0x200>)
 8010c06:	460b      	mov	r3, r1
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	440b      	add	r3, r1
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	4413      	add	r3, r2
 8010c10:	3308      	adds	r3, #8
 8010c12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d117      	bne.n	8010c4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	4b38      	ldr	r3, [pc, #224]	; (8010d00 <etharp_output+0x1fc>)
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	4618      	mov	r0, r3
 8010c24:	4937      	ldr	r1, [pc, #220]	; (8010d04 <etharp_output+0x200>)
 8010c26:	4603      	mov	r3, r0
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4403      	add	r3, r0
 8010c2c:	00db      	lsls	r3, r3, #3
 8010c2e:	440b      	add	r3, r1
 8010c30:	3304      	adds	r3, #4
 8010c32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d108      	bne.n	8010c4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010c38:	4b31      	ldr	r3, [pc, #196]	; (8010d00 <etharp_output+0x1fc>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	68b9      	ldr	r1, [r7, #8]
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f7ff fec5 	bl	80109d0 <etharp_output_to_arp_index>
 8010c46:	4603      	mov	r3, r0
 8010c48:	e04a      	b.n	8010ce0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	75fb      	strb	r3, [r7, #23]
 8010c4e:	e031      	b.n	8010cb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c50:	7dfa      	ldrb	r2, [r7, #23]
 8010c52:	492c      	ldr	r1, [pc, #176]	; (8010d04 <etharp_output+0x200>)
 8010c54:	4613      	mov	r3, r2
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4413      	add	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	440b      	add	r3, r1
 8010c5e:	3314      	adds	r3, #20
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d923      	bls.n	8010cae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010c66:	7dfa      	ldrb	r2, [r7, #23]
 8010c68:	4926      	ldr	r1, [pc, #152]	; (8010d04 <etharp_output+0x200>)
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	3308      	adds	r3, #8
 8010c76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d117      	bne.n	8010cae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	6819      	ldr	r1, [r3, #0]
 8010c82:	7dfa      	ldrb	r2, [r7, #23]
 8010c84:	481f      	ldr	r0, [pc, #124]	; (8010d04 <etharp_output+0x200>)
 8010c86:	4613      	mov	r3, r2
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	4403      	add	r3, r0
 8010c90:	3304      	adds	r3, #4
 8010c92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010c94:	4299      	cmp	r1, r3
 8010c96:	d10a      	bne.n	8010cae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010c98:	4a19      	ldr	r2, [pc, #100]	; (8010d00 <etharp_output+0x1fc>)
 8010c9a:	7dfb      	ldrb	r3, [r7, #23]
 8010c9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	68b9      	ldr	r1, [r7, #8]
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f7ff fe93 	bl	80109d0 <etharp_output_to_arp_index>
 8010caa:	4603      	mov	r3, r0
 8010cac:	e018      	b.n	8010ce0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	75fb      	strb	r3, [r7, #23]
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	2b09      	cmp	r3, #9
 8010cb8:	d9ca      	bls.n	8010c50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	69b9      	ldr	r1, [r7, #24]
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f000 f822 	bl	8010d08 <etharp_query>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	e00b      	b.n	8010ce0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	68b9      	ldr	r1, [r7, #8]
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f001 fd3f 	bl	801275c <ethernet_output>
 8010cde:	4603      	mov	r3, r0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3720      	adds	r7, #32
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	08015d78 	.word	0x08015d78
 8010cec:	08015ec8 	.word	0x08015ec8
 8010cf0:	08015df0 	.word	0x08015df0
 8010cf4:	08015f18 	.word	0x08015f18
 8010cf8:	08015eb8 	.word	0x08015eb8
 8010cfc:	08016530 	.word	0x08016530
 8010d00:	200009c4 	.word	0x200009c4
 8010d04:	200008d4 	.word	0x200008d4

08010d08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08c      	sub	sp, #48	; 0x30
 8010d0c:	af02      	add	r7, sp, #8
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	3326      	adds	r3, #38	; 0x26
 8010d18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010d1a:	23ff      	movs	r3, #255	; 0xff
 8010d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68f9      	ldr	r1, [r7, #12]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f000 fe0e 	bl	801194c <ip4_addr_isbroadcast_u32>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10c      	bne.n	8010d50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d3e:	2be0      	cmp	r3, #224	; 0xe0
 8010d40:	d006      	beq.n	8010d50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d003      	beq.n	8010d50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d50:	f06f 030f 	mvn.w	r3, #15
 8010d54:	e101      	b.n	8010f5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	2101      	movs	r1, #1
 8010d5a:	68b8      	ldr	r0, [r7, #8]
 8010d5c:	f7ff fb60 	bl	8010420 <etharp_find_entry>
 8010d60:	4603      	mov	r3, r0
 8010d62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	da02      	bge.n	8010d72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010d6c:	8a7b      	ldrh	r3, [r7, #18]
 8010d6e:	b25b      	sxtb	r3, r3
 8010d70:	e0f3      	b.n	8010f5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010d72:	8a7b      	ldrh	r3, [r7, #18]
 8010d74:	2b7e      	cmp	r3, #126	; 0x7e
 8010d76:	d906      	bls.n	8010d86 <etharp_query+0x7e>
 8010d78:	4b7a      	ldr	r3, [pc, #488]	; (8010f64 <etharp_query+0x25c>)
 8010d7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010d7e:	497a      	ldr	r1, [pc, #488]	; (8010f68 <etharp_query+0x260>)
 8010d80:	487a      	ldr	r0, [pc, #488]	; (8010f6c <etharp_query+0x264>)
 8010d82:	f001 fd7b 	bl	801287c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010d86:	8a7b      	ldrh	r3, [r7, #18]
 8010d88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010d8a:	7c7a      	ldrb	r2, [r7, #17]
 8010d8c:	4978      	ldr	r1, [pc, #480]	; (8010f70 <etharp_query+0x268>)
 8010d8e:	4613      	mov	r3, r2
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	4413      	add	r3, r2
 8010d94:	00db      	lsls	r3, r3, #3
 8010d96:	440b      	add	r3, r1
 8010d98:	3314      	adds	r3, #20
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d115      	bne.n	8010dcc <etharp_query+0xc4>
    is_new_entry = 1;
 8010da0:	2301      	movs	r3, #1
 8010da2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010da4:	7c7a      	ldrb	r2, [r7, #17]
 8010da6:	4972      	ldr	r1, [pc, #456]	; (8010f70 <etharp_query+0x268>)
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	440b      	add	r3, r1
 8010db2:	3314      	adds	r3, #20
 8010db4:	2201      	movs	r2, #1
 8010db6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010db8:	7c7a      	ldrb	r2, [r7, #17]
 8010dba:	496d      	ldr	r1, [pc, #436]	; (8010f70 <etharp_query+0x268>)
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	00db      	lsls	r3, r3, #3
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010dcc:	7c7a      	ldrb	r2, [r7, #17]
 8010dce:	4968      	ldr	r1, [pc, #416]	; (8010f70 <etharp_query+0x268>)
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	440b      	add	r3, r1
 8010dda:	3314      	adds	r3, #20
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d011      	beq.n	8010e06 <etharp_query+0xfe>
 8010de2:	7c7a      	ldrb	r2, [r7, #17]
 8010de4:	4962      	ldr	r1, [pc, #392]	; (8010f70 <etharp_query+0x268>)
 8010de6:	4613      	mov	r3, r2
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	4413      	add	r3, r2
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	440b      	add	r3, r1
 8010df0:	3314      	adds	r3, #20
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d806      	bhi.n	8010e06 <etharp_query+0xfe>
 8010df8:	4b5a      	ldr	r3, [pc, #360]	; (8010f64 <etharp_query+0x25c>)
 8010dfa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010dfe:	495d      	ldr	r1, [pc, #372]	; (8010f74 <etharp_query+0x26c>)
 8010e00:	485a      	ldr	r0, [pc, #360]	; (8010f6c <etharp_query+0x264>)
 8010e02:	f001 fd3b 	bl	801287c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <etharp_query+0x10a>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10c      	bne.n	8010e2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010e12:	68b9      	ldr	r1, [r7, #8]
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 f963 	bl	80110e0 <etharp_request>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d102      	bne.n	8010e2c <etharp_query+0x124>
      return result;
 8010e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e2a:	e096      	b.n	8010f5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <etharp_query+0x138>
 8010e32:	4b4c      	ldr	r3, [pc, #304]	; (8010f64 <etharp_query+0x25c>)
 8010e34:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010e38:	494f      	ldr	r1, [pc, #316]	; (8010f78 <etharp_query+0x270>)
 8010e3a:	484c      	ldr	r0, [pc, #304]	; (8010f6c <etharp_query+0x264>)
 8010e3c:	f001 fd1e 	bl	801287c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010e40:	7c7a      	ldrb	r2, [r7, #17]
 8010e42:	494b      	ldr	r1, [pc, #300]	; (8010f70 <etharp_query+0x268>)
 8010e44:	4613      	mov	r3, r2
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	00db      	lsls	r3, r3, #3
 8010e4c:	440b      	add	r3, r1
 8010e4e:	3314      	adds	r3, #20
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d917      	bls.n	8010e86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010e56:	4a49      	ldr	r2, [pc, #292]	; (8010f7c <etharp_query+0x274>)
 8010e58:	7c7b      	ldrb	r3, [r7, #17]
 8010e5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010e5c:	7c7a      	ldrb	r2, [r7, #17]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	00db      	lsls	r3, r3, #3
 8010e66:	3308      	adds	r3, #8
 8010e68:	4a41      	ldr	r2, [pc, #260]	; (8010f70 <etharp_query+0x268>)
 8010e6a:	4413      	add	r3, r2
 8010e6c:	3304      	adds	r3, #4
 8010e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e72:	9200      	str	r2, [sp, #0]
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	6879      	ldr	r1, [r7, #4]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f001 fc6f 	bl	801275c <ethernet_output>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e84:	e067      	b.n	8010f56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010e86:	7c7a      	ldrb	r2, [r7, #17]
 8010e88:	4939      	ldr	r1, [pc, #228]	; (8010f70 <etharp_query+0x268>)
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	440b      	add	r3, r1
 8010e94:	3314      	adds	r3, #20
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d15c      	bne.n	8010f56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ea4:	e01c      	b.n	8010ee0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	895a      	ldrh	r2, [r3, #10]
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d10a      	bne.n	8010ec8 <etharp_query+0x1c0>
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d006      	beq.n	8010ec8 <etharp_query+0x1c0>
 8010eba:	4b2a      	ldr	r3, [pc, #168]	; (8010f64 <etharp_query+0x25c>)
 8010ebc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010ec0:	492f      	ldr	r1, [pc, #188]	; (8010f80 <etharp_query+0x278>)
 8010ec2:	482a      	ldr	r0, [pc, #168]	; (8010f6c <etharp_query+0x264>)
 8010ec4:	f001 fcda 	bl	801287c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	7b1b      	ldrb	r3, [r3, #12]
 8010ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <etharp_query+0x1d2>
        copy_needed = 1;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	61bb      	str	r3, [r7, #24]
        break;
 8010ed8:	e005      	b.n	8010ee6 <etharp_query+0x1de>
      }
      p = p->next;
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1df      	bne.n	8010ea6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d007      	beq.n	8010efc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010ef2:	200e      	movs	r0, #14
 8010ef4:	f7f8 fe32 	bl	8009b5c <pbuf_clone>
 8010ef8:	61f8      	str	r0, [r7, #28]
 8010efa:	e004      	b.n	8010f06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010f00:	69f8      	ldr	r0, [r7, #28]
 8010f02:	f7f8 fbdd 	bl	80096c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d021      	beq.n	8010f50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010f0c:	7c7a      	ldrb	r2, [r7, #17]
 8010f0e:	4918      	ldr	r1, [pc, #96]	; (8010f70 <etharp_query+0x268>)
 8010f10:	4613      	mov	r3, r2
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	4413      	add	r3, r2
 8010f16:	00db      	lsls	r3, r3, #3
 8010f18:	440b      	add	r3, r1
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00a      	beq.n	8010f36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010f20:	7c7a      	ldrb	r2, [r7, #17]
 8010f22:	4913      	ldr	r1, [pc, #76]	; (8010f70 <etharp_query+0x268>)
 8010f24:	4613      	mov	r3, r2
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	4413      	add	r3, r2
 8010f2a:	00db      	lsls	r3, r3, #3
 8010f2c:	440b      	add	r3, r1
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f8 fb25 	bl	8009580 <pbuf_free>
      }
      arp_table[i].q = p;
 8010f36:	7c7a      	ldrb	r2, [r7, #17]
 8010f38:	490d      	ldr	r1, [pc, #52]	; (8010f70 <etharp_query+0x268>)
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	4413      	add	r3, r2
 8010f40:	00db      	lsls	r3, r3, #3
 8010f42:	440b      	add	r3, r1
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f4e:	e002      	b.n	8010f56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010f50:	23ff      	movs	r3, #255	; 0xff
 8010f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3728      	adds	r7, #40	; 0x28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	08015d78 	.word	0x08015d78
 8010f68:	08015f24 	.word	0x08015f24
 8010f6c:	08015df0 	.word	0x08015df0
 8010f70:	200008d4 	.word	0x200008d4
 8010f74:	08015f34 	.word	0x08015f34
 8010f78:	08015f18 	.word	0x08015f18
 8010f7c:	200009c4 	.word	0x200009c4
 8010f80:	08015f5c 	.word	0x08015f5c

08010f84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08a      	sub	sp, #40	; 0x28
 8010f88:	af02      	add	r7, sp, #8
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
 8010f90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <etharp_raw+0x26>
 8010f9c:	4b3a      	ldr	r3, [pc, #232]	; (8011088 <etharp_raw+0x104>)
 8010f9e:	f240 4257 	movw	r2, #1111	; 0x457
 8010fa2:	493a      	ldr	r1, [pc, #232]	; (801108c <etharp_raw+0x108>)
 8010fa4:	483a      	ldr	r0, [pc, #232]	; (8011090 <etharp_raw+0x10c>)
 8010fa6:	f001 fc69 	bl	801287c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010faa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010fae:	211c      	movs	r1, #28
 8010fb0:	200e      	movs	r0, #14
 8010fb2:	f7f8 f801 	bl	8008fb8 <pbuf_alloc>
 8010fb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d102      	bne.n	8010fc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc2:	e05d      	b.n	8011080 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	895b      	ldrh	r3, [r3, #10]
 8010fc8:	2b1b      	cmp	r3, #27
 8010fca:	d806      	bhi.n	8010fda <etharp_raw+0x56>
 8010fcc:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <etharp_raw+0x104>)
 8010fce:	f240 4262 	movw	r2, #1122	; 0x462
 8010fd2:	4930      	ldr	r1, [pc, #192]	; (8011094 <etharp_raw+0x110>)
 8010fd4:	482e      	ldr	r0, [pc, #184]	; (8011090 <etharp_raw+0x10c>)
 8010fd6:	f001 fc51 	bl	801287c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010fe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f7 f818 	bl	8008018 <lwip_htons>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	461a      	mov	r2, r3
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ff6:	2b06      	cmp	r3, #6
 8010ff8:	d006      	beq.n	8011008 <etharp_raw+0x84>
 8010ffa:	4b23      	ldr	r3, [pc, #140]	; (8011088 <etharp_raw+0x104>)
 8010ffc:	f240 4269 	movw	r2, #1129	; 0x469
 8011000:	4925      	ldr	r1, [pc, #148]	; (8011098 <etharp_raw+0x114>)
 8011002:	4823      	ldr	r0, [pc, #140]	; (8011090 <etharp_raw+0x10c>)
 8011004:	f001 fc3a 	bl	801287c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	3308      	adds	r3, #8
 801100c:	2206      	movs	r2, #6
 801100e:	6839      	ldr	r1, [r7, #0]
 8011010:	4618      	mov	r0, r3
 8011012:	f001 fc1d 	bl	8012850 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	3312      	adds	r3, #18
 801101a:	2206      	movs	r2, #6
 801101c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801101e:	4618      	mov	r0, r3
 8011020:	f001 fc16 	bl	8012850 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	330e      	adds	r3, #14
 8011028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801102a:	6812      	ldr	r2, [r2, #0]
 801102c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	3318      	adds	r3, #24
 8011032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011034:	6812      	ldr	r2, [r2, #0]
 8011036:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2200      	movs	r2, #0
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	2200      	movs	r2, #0
 8011040:	f042 0201 	orr.w	r2, r2, #1
 8011044:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	2200      	movs	r2, #0
 801104a:	f042 0208 	orr.w	r2, r2, #8
 801104e:	709a      	strb	r2, [r3, #2]
 8011050:	2200      	movs	r2, #0
 8011052:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2206      	movs	r2, #6
 8011058:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2204      	movs	r2, #4
 801105e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011060:	f640 0306 	movw	r3, #2054	; 0x806
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68ba      	ldr	r2, [r7, #8]
 801106a:	69b9      	ldr	r1, [r7, #24]
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	f001 fb75 	bl	801275c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011072:	69b8      	ldr	r0, [r7, #24]
 8011074:	f7f8 fa84 	bl	8009580 <pbuf_free>
  p = NULL;
 8011078:	2300      	movs	r3, #0
 801107a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801107c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3720      	adds	r7, #32
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	08015d78 	.word	0x08015d78
 801108c:	08015ec8 	.word	0x08015ec8
 8011090:	08015df0 	.word	0x08015df0
 8011094:	08015f78 	.word	0x08015f78
 8011098:	08015fac 	.word	0x08015fac

0801109c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af04      	add	r7, sp, #16
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80110b8:	2201      	movs	r2, #1
 80110ba:	9203      	str	r2, [sp, #12]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	9202      	str	r2, [sp, #8]
 80110c0:	4a06      	ldr	r2, [pc, #24]	; (80110dc <etharp_request_dst+0x40>)
 80110c2:	9201      	str	r2, [sp, #4]
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	4603      	mov	r3, r0
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f7ff ff5a 	bl	8010f84 <etharp_raw>
 80110d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	08016538 	.word	0x08016538

080110e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80110ea:	4a05      	ldr	r2, [pc, #20]	; (8011100 <etharp_request+0x20>)
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff ffd4 	bl	801109c <etharp_request_dst>
 80110f4:	4603      	mov	r3, r0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	08016530 	.word	0x08016530

08011104 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08e      	sub	sp, #56	; 0x38
 8011108:	af04      	add	r7, sp, #16
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801110e:	4b79      	ldr	r3, [pc, #484]	; (80112f4 <icmp_input+0x1f0>)
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b2db      	uxtb	r3, r3
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	b2db      	uxtb	r3, r3
 8011122:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011126:	2b13      	cmp	r3, #19
 8011128:	f240 80cd 	bls.w	80112c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	895b      	ldrh	r3, [r3, #10]
 8011130:	2b03      	cmp	r3, #3
 8011132:	f240 80ca 	bls.w	80112ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011140:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011144:	2b00      	cmp	r3, #0
 8011146:	f000 80b7 	beq.w	80112b8 <icmp_input+0x1b4>
 801114a:	2b08      	cmp	r3, #8
 801114c:	f040 80b7 	bne.w	80112be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011150:	4b69      	ldr	r3, [pc, #420]	; (80112f8 <icmp_input+0x1f4>)
 8011152:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011154:	4b67      	ldr	r3, [pc, #412]	; (80112f4 <icmp_input+0x1f0>)
 8011156:	695b      	ldr	r3, [r3, #20]
 8011158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801115c:	2be0      	cmp	r3, #224	; 0xe0
 801115e:	f000 80bb 	beq.w	80112d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011162:	4b64      	ldr	r3, [pc, #400]	; (80112f4 <icmp_input+0x1f0>)
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	4a63      	ldr	r2, [pc, #396]	; (80112f4 <icmp_input+0x1f0>)
 8011168:	6812      	ldr	r2, [r2, #0]
 801116a:	4611      	mov	r1, r2
 801116c:	4618      	mov	r0, r3
 801116e:	f000 fbed 	bl	801194c <ip4_addr_isbroadcast_u32>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	f040 80b1 	bne.w	80112dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	891b      	ldrh	r3, [r3, #8]
 801117e:	2b07      	cmp	r3, #7
 8011180:	f240 80a5 	bls.w	80112ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011186:	330e      	adds	r3, #14
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7f8 f962 	bl	8009454 <pbuf_add_header>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d04b      	beq.n	801122e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	891a      	ldrh	r2, [r3, #8]
 801119a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801119c:	4413      	add	r3, r2
 801119e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	891b      	ldrh	r3, [r3, #8]
 80111a4:	8b7a      	ldrh	r2, [r7, #26]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	f0c0 809a 	bcc.w	80112e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80111ac:	8b7b      	ldrh	r3, [r7, #26]
 80111ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111b2:	4619      	mov	r1, r3
 80111b4:	200e      	movs	r0, #14
 80111b6:	f7f7 feff 	bl	8008fb8 <pbuf_alloc>
 80111ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f000 8090 	beq.w	80112e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	895b      	ldrh	r3, [r3, #10]
 80111c8:	461a      	mov	r2, r3
 80111ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111cc:	3308      	adds	r3, #8
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d203      	bcs.n	80111da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80111d2:	6978      	ldr	r0, [r7, #20]
 80111d4:	f7f8 f9d4 	bl	8009580 <pbuf_free>
          goto icmperr;
 80111d8:	e085      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80111e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111e2:	4618      	mov	r0, r3
 80111e4:	f001 fb34 	bl	8012850 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80111e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111ea:	4619      	mov	r1, r3
 80111ec:	6978      	ldr	r0, [r7, #20]
 80111ee:	f7f8 f941 	bl	8009474 <pbuf_remove_header>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d009      	beq.n	801120c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80111f8:	4b40      	ldr	r3, [pc, #256]	; (80112fc <icmp_input+0x1f8>)
 80111fa:	22b6      	movs	r2, #182	; 0xb6
 80111fc:	4940      	ldr	r1, [pc, #256]	; (8011300 <icmp_input+0x1fc>)
 80111fe:	4841      	ldr	r0, [pc, #260]	; (8011304 <icmp_input+0x200>)
 8011200:	f001 fb3c 	bl	801287c <iprintf>
          pbuf_free(r);
 8011204:	6978      	ldr	r0, [r7, #20]
 8011206:	f7f8 f9bb 	bl	8009580 <pbuf_free>
          goto icmperr;
 801120a:	e06c      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	6978      	ldr	r0, [r7, #20]
 8011210:	f7f8 face 	bl	80097b0 <pbuf_copy>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801121a:	6978      	ldr	r0, [r7, #20]
 801121c:	f7f8 f9b0 	bl	8009580 <pbuf_free>
          goto icmperr;
 8011220:	e061      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7f8 f9ac 	bl	8009580 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e00f      	b.n	801124e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801122e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011230:	330e      	adds	r3, #14
 8011232:	4619      	mov	r1, r3
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7f8 f91d 	bl	8009474 <pbuf_remove_header>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d006      	beq.n	801124e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011240:	4b2e      	ldr	r3, [pc, #184]	; (80112fc <icmp_input+0x1f8>)
 8011242:	22c7      	movs	r2, #199	; 0xc7
 8011244:	4930      	ldr	r1, [pc, #192]	; (8011308 <icmp_input+0x204>)
 8011246:	482f      	ldr	r0, [pc, #188]	; (8011304 <icmp_input+0x200>)
 8011248:	f001 fb18 	bl	801287c <iprintf>
          goto icmperr;
 801124c:	e04b      	b.n	80112e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011256:	4619      	mov	r1, r3
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7f8 f8fb 	bl	8009454 <pbuf_add_header>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d12b      	bne.n	80112bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011272:	4b20      	ldr	r3, [pc, #128]	; (80112f4 <icmp_input+0x1f0>)
 8011274:	691a      	ldr	r2, [r3, #16]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	2200      	movs	r2, #0
 801127e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	2200      	movs	r2, #0
 8011284:	709a      	strb	r2, [r3, #2]
 8011286:	2200      	movs	r2, #0
 8011288:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	22ff      	movs	r2, #255	; 0xff
 801128e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2200      	movs	r2, #0
 8011294:	729a      	strb	r2, [r3, #10]
 8011296:	2200      	movs	r2, #0
 8011298:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	9302      	str	r3, [sp, #8]
 801129e:	2301      	movs	r3, #1
 80112a0:	9301      	str	r3, [sp, #4]
 80112a2:	2300      	movs	r3, #0
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	23ff      	movs	r3, #255	; 0xff
 80112a8:	2200      	movs	r2, #0
 80112aa:	69f9      	ldr	r1, [r7, #28]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 fa75 	bl	801179c <ip4_output_if>
 80112b2:	4603      	mov	r3, r0
 80112b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80112b6:	e001      	b.n	80112bc <icmp_input+0x1b8>
      break;
 80112b8:	bf00      	nop
 80112ba:	e000      	b.n	80112be <icmp_input+0x1ba>
      break;
 80112bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7f8 f95e 	bl	8009580 <pbuf_free>
  return;
 80112c4:	e013      	b.n	80112ee <icmp_input+0x1ea>
    goto lenerr;
 80112c6:	bf00      	nop
 80112c8:	e002      	b.n	80112d0 <icmp_input+0x1cc>
    goto lenerr;
 80112ca:	bf00      	nop
 80112cc:	e000      	b.n	80112d0 <icmp_input+0x1cc>
        goto lenerr;
 80112ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7f8 f955 	bl	8009580 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112d6:	e00a      	b.n	80112ee <icmp_input+0x1ea>
        goto icmperr;
 80112d8:	bf00      	nop
 80112da:	e004      	b.n	80112e6 <icmp_input+0x1e2>
        goto icmperr;
 80112dc:	bf00      	nop
 80112de:	e002      	b.n	80112e6 <icmp_input+0x1e2>
          goto icmperr;
 80112e0:	bf00      	nop
 80112e2:	e000      	b.n	80112e6 <icmp_input+0x1e2>
          goto icmperr;
 80112e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7f8 f94a 	bl	8009580 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80112ee:	3728      	adds	r7, #40	; 0x28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20003ca0 	.word	0x20003ca0
 80112f8:	20003cb4 	.word	0x20003cb4
 80112fc:	08015ff0 	.word	0x08015ff0
 8011300:	08016028 	.word	0x08016028
 8011304:	08016060 	.word	0x08016060
 8011308:	08016088 	.word	0x08016088

0801130c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011318:	78fb      	ldrb	r3, [r7, #3]
 801131a:	461a      	mov	r2, r3
 801131c:	2103      	movs	r1, #3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f814 	bl	801134c <icmp_send_response>
}
 8011324:	bf00      	nop
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011338:	78fb      	ldrb	r3, [r7, #3]
 801133a:	461a      	mov	r2, r3
 801133c:	210b      	movs	r1, #11
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f804 	bl	801134c <icmp_send_response>
}
 8011344:	bf00      	nop
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b08c      	sub	sp, #48	; 0x30
 8011350:	af04      	add	r7, sp, #16
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	460b      	mov	r3, r1
 8011356:	70fb      	strb	r3, [r7, #3]
 8011358:	4613      	mov	r3, r2
 801135a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801135c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011360:	2124      	movs	r1, #36	; 0x24
 8011362:	2022      	movs	r0, #34	; 0x22
 8011364:	f7f7 fe28 	bl	8008fb8 <pbuf_alloc>
 8011368:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d04c      	beq.n	801140a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	2b23      	cmp	r3, #35	; 0x23
 8011376:	d806      	bhi.n	8011386 <icmp_send_response+0x3a>
 8011378:	4b26      	ldr	r3, [pc, #152]	; (8011414 <icmp_send_response+0xc8>)
 801137a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801137e:	4926      	ldr	r1, [pc, #152]	; (8011418 <icmp_send_response+0xcc>)
 8011380:	4826      	ldr	r0, [pc, #152]	; (801141c <icmp_send_response+0xd0>)
 8011382:	f001 fa7b 	bl	801287c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	78fa      	ldrb	r2, [r7, #3]
 8011396:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	78ba      	ldrb	r2, [r7, #2]
 801139c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	2200      	movs	r2, #0
 80113a2:	711a      	strb	r2, [r3, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2200      	movs	r2, #0
 80113ac:	719a      	strb	r2, [r3, #6]
 80113ae:	2200      	movs	r2, #0
 80113b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	f103 0008 	add.w	r0, r3, #8
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	221c      	movs	r2, #28
 80113c0:	4619      	mov	r1, r3
 80113c2:	f001 fa45 	bl	8012850 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80113cc:	f107 030c 	add.w	r3, r7, #12
 80113d0:	4618      	mov	r0, r3
 80113d2:	f000 f825 	bl	8011420 <ip4_route>
 80113d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d011      	beq.n	8011402 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2200      	movs	r2, #0
 80113e2:	709a      	strb	r2, [r3, #2]
 80113e4:	2200      	movs	r2, #0
 80113e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80113e8:	f107 020c 	add.w	r2, r7, #12
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	9302      	str	r3, [sp, #8]
 80113f0:	2301      	movs	r3, #1
 80113f2:	9301      	str	r3, [sp, #4]
 80113f4:	2300      	movs	r3, #0
 80113f6:	9300      	str	r3, [sp, #0]
 80113f8:	23ff      	movs	r3, #255	; 0xff
 80113fa:	2100      	movs	r1, #0
 80113fc:	69f8      	ldr	r0, [r7, #28]
 80113fe:	f000 f9cd 	bl	801179c <ip4_output_if>
  }
  pbuf_free(q);
 8011402:	69f8      	ldr	r0, [r7, #28]
 8011404:	f7f8 f8bc 	bl	8009580 <pbuf_free>
 8011408:	e000      	b.n	801140c <icmp_send_response+0xc0>
    return;
 801140a:	bf00      	nop
}
 801140c:	3720      	adds	r7, #32
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	08015ff0 	.word	0x08015ff0
 8011418:	080160bc 	.word	0x080160bc
 801141c:	08016060 	.word	0x08016060

08011420 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011428:	4b33      	ldr	r3, [pc, #204]	; (80114f8 <ip4_route+0xd8>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60fb      	str	r3, [r7, #12]
 801142e:	e036      	b.n	801149e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d02b      	beq.n	8011498 <ip4_route+0x78>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011446:	089b      	lsrs	r3, r3, #2
 8011448:	f003 0301 	and.w	r3, r3, #1
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d022      	beq.n	8011498 <ip4_route+0x78>
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	3304      	adds	r3, #4
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d01d      	beq.n	8011498 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3304      	adds	r3, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	405a      	eors	r2, r3
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	3308      	adds	r3, #8
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4013      	ands	r3, r2
 8011470:	2b00      	cmp	r3, #0
 8011472:	d101      	bne.n	8011478 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	e038      	b.n	80114ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	d108      	bne.n	8011498 <ip4_route+0x78>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	330c      	adds	r3, #12
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	429a      	cmp	r2, r3
 8011492:	d101      	bne.n	8011498 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	e028      	b.n	80114ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1c5      	bne.n	8011430 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80114a4:	4b15      	ldr	r3, [pc, #84]	; (80114fc <ip4_route+0xdc>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d01a      	beq.n	80114e2 <ip4_route+0xc2>
 80114ac:	4b13      	ldr	r3, [pc, #76]	; (80114fc <ip4_route+0xdc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114b4:	f003 0301 	and.w	r3, r3, #1
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d012      	beq.n	80114e2 <ip4_route+0xc2>
 80114bc:	4b0f      	ldr	r3, [pc, #60]	; (80114fc <ip4_route+0xdc>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114c4:	f003 0304 	and.w	r3, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d00a      	beq.n	80114e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114cc:	4b0b      	ldr	r3, [pc, #44]	; (80114fc <ip4_route+0xdc>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	3304      	adds	r3, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d004      	beq.n	80114e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	2b7f      	cmp	r3, #127	; 0x7f
 80114e0:	d101      	bne.n	80114e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80114e2:	2300      	movs	r3, #0
 80114e4:	e001      	b.n	80114ea <ip4_route+0xca>
  }

  return netif_default;
 80114e6:	4b05      	ldr	r3, [pc, #20]	; (80114fc <ip4_route+0xdc>)
 80114e8:	681b      	ldr	r3, [r3, #0]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	20011634 	.word	0x20011634
 80114fc:	20011638 	.word	0x20011638

08011500 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801150e:	f003 0301 	and.w	r3, r3, #1
 8011512:	b2db      	uxtb	r3, r3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d016      	beq.n	8011546 <ip4_input_accept+0x46>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	3304      	adds	r3, #4
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d011      	beq.n	8011546 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011522:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <ip4_input_accept+0x50>)
 8011524:	695a      	ldr	r2, [r3, #20]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3304      	adds	r3, #4
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	429a      	cmp	r2, r3
 801152e:	d008      	beq.n	8011542 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011530:	4b07      	ldr	r3, [pc, #28]	; (8011550 <ip4_input_accept+0x50>)
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	6879      	ldr	r1, [r7, #4]
 8011536:	4618      	mov	r0, r3
 8011538:	f000 fa08 	bl	801194c <ip4_addr_isbroadcast_u32>
 801153c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011542:	2301      	movs	r3, #1
 8011544:	e000      	b.n	8011548 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	20003ca0 	.word	0x20003ca0

08011554 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	091b      	lsrs	r3, r3, #4
 801156a:	b2db      	uxtb	r3, r3
 801156c:	2b04      	cmp	r3, #4
 801156e:	d004      	beq.n	801157a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f7f8 f805 	bl	8009580 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	e107      	b.n	801178a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	f003 030f 	and.w	r3, r3, #15
 8011582:	b2db      	uxtb	r3, r3
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	b2db      	uxtb	r3, r3
 8011588:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	885b      	ldrh	r3, [r3, #2]
 801158e:	b29b      	uxth	r3, r3
 8011590:	4618      	mov	r0, r3
 8011592:	f7f6 fd41 	bl	8008018 <lwip_htons>
 8011596:	4603      	mov	r3, r0
 8011598:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	89ba      	ldrh	r2, [r7, #12]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d204      	bcs.n	80115ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80115a4:	89bb      	ldrh	r3, [r7, #12]
 80115a6:	4619      	mov	r1, r3
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7f7 fe63 	bl	8009274 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	895b      	ldrh	r3, [r3, #10]
 80115b2:	89fa      	ldrh	r2, [r7, #14]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d807      	bhi.n	80115c8 <ip4_input+0x74>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	891b      	ldrh	r3, [r3, #8]
 80115bc:	89ba      	ldrh	r2, [r7, #12]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d802      	bhi.n	80115c8 <ip4_input+0x74>
 80115c2:	89fb      	ldrh	r3, [r7, #14]
 80115c4:	2b13      	cmp	r3, #19
 80115c6:	d804      	bhi.n	80115d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7f7 ffd9 	bl	8009580 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	e0db      	b.n	801178a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	4a6f      	ldr	r2, [pc, #444]	; (8011794 <ip4_input+0x240>)
 80115d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	4a6d      	ldr	r2, [pc, #436]	; (8011794 <ip4_input+0x240>)
 80115e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80115e2:	4b6c      	ldr	r3, [pc, #432]	; (8011794 <ip4_input+0x240>)
 80115e4:	695b      	ldr	r3, [r3, #20]
 80115e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80115ea:	2be0      	cmp	r3, #224	; 0xe0
 80115ec:	d112      	bne.n	8011614 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115f4:	f003 0301 	and.w	r3, r3, #1
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d007      	beq.n	801160e <ip4_input+0xba>
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	3304      	adds	r3, #4
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d002      	beq.n	801160e <ip4_input+0xba>
      netif = inp;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	613b      	str	r3, [r7, #16]
 801160c:	e02a      	b.n	8011664 <ip4_input+0x110>
    } else {
      netif = NULL;
 801160e:	2300      	movs	r3, #0
 8011610:	613b      	str	r3, [r7, #16]
 8011612:	e027      	b.n	8011664 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011614:	6838      	ldr	r0, [r7, #0]
 8011616:	f7ff ff73 	bl	8011500 <ip4_input_accept>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <ip4_input+0xd2>
      netif = inp;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	613b      	str	r3, [r7, #16]
 8011624:	e01e      	b.n	8011664 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011626:	2300      	movs	r3, #0
 8011628:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801162a:	4b5a      	ldr	r3, [pc, #360]	; (8011794 <ip4_input+0x240>)
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	b2db      	uxtb	r3, r3
 8011630:	2b7f      	cmp	r3, #127	; 0x7f
 8011632:	d017      	beq.n	8011664 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011634:	4b58      	ldr	r3, [pc, #352]	; (8011798 <ip4_input+0x244>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	613b      	str	r3, [r7, #16]
 801163a:	e00e      	b.n	801165a <ip4_input+0x106>
          if (netif == inp) {
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	429a      	cmp	r2, r3
 8011642:	d006      	beq.n	8011652 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011644:	6938      	ldr	r0, [r7, #16]
 8011646:	f7ff ff5b 	bl	8011500 <ip4_input_accept>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d108      	bne.n	8011662 <ip4_input+0x10e>
 8011650:	e000      	b.n	8011654 <ip4_input+0x100>
            continue;
 8011652:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	613b      	str	r3, [r7, #16]
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1ed      	bne.n	801163c <ip4_input+0xe8>
 8011660:	e000      	b.n	8011664 <ip4_input+0x110>
            break;
 8011662:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011664:	4b4b      	ldr	r3, [pc, #300]	; (8011794 <ip4_input+0x240>)
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	6839      	ldr	r1, [r7, #0]
 801166a:	4618      	mov	r0, r3
 801166c:	f000 f96e 	bl	801194c <ip4_addr_isbroadcast_u32>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	d105      	bne.n	8011682 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011676:	4b47      	ldr	r3, [pc, #284]	; (8011794 <ip4_input+0x240>)
 8011678:	691b      	ldr	r3, [r3, #16]
 801167a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801167e:	2be0      	cmp	r3, #224	; 0xe0
 8011680:	d104      	bne.n	801168c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7f7 ff7c 	bl	8009580 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011688:	2300      	movs	r3, #0
 801168a:	e07e      	b.n	801178a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d104      	bne.n	801169c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7f7 ff74 	bl	8009580 <pbuf_free>
    return ERR_OK;
 8011698:	2300      	movs	r3, #0
 801169a:	e076      	b.n	801178a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	88db      	ldrh	r3, [r3, #6]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	461a      	mov	r2, r3
 80116a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80116a8:	4013      	ands	r3, r2
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00b      	beq.n	80116c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fc92 	bl	8011fd8 <ip4_reass>
 80116b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d101      	bne.n	80116c0 <ip4_input+0x16c>
      return ERR_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	e064      	b.n	801178a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80116c6:	4a33      	ldr	r2, [pc, #204]	; (8011794 <ip4_input+0x240>)
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80116cc:	4a31      	ldr	r2, [pc, #196]	; (8011794 <ip4_input+0x240>)
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80116d2:	4a30      	ldr	r2, [pc, #192]	; (8011794 <ip4_input+0x240>)
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	f003 030f 	and.w	r3, r3, #15
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	4b2a      	ldr	r3, [pc, #168]	; (8011794 <ip4_input+0x240>)
 80116ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80116ec:	89fb      	ldrh	r3, [r7, #14]
 80116ee:	4619      	mov	r1, r3
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7f7 febf 	bl	8009474 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	7a5b      	ldrb	r3, [r3, #9]
 80116fa:	2b11      	cmp	r3, #17
 80116fc:	d006      	beq.n	801170c <ip4_input+0x1b8>
 80116fe:	2b11      	cmp	r3, #17
 8011700:	dc13      	bgt.n	801172a <ip4_input+0x1d6>
 8011702:	2b01      	cmp	r3, #1
 8011704:	d00c      	beq.n	8011720 <ip4_input+0x1cc>
 8011706:	2b06      	cmp	r3, #6
 8011708:	d005      	beq.n	8011716 <ip4_input+0x1c2>
 801170a:	e00e      	b.n	801172a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801170c:	6839      	ldr	r1, [r7, #0]
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f7fe fc68 	bl	800ffe4 <udp_input>
        break;
 8011714:	e026      	b.n	8011764 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011716:	6839      	ldr	r1, [r7, #0]
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7fa f88b 	bl	800b834 <tcp_input>
        break;
 801171e:	e021      	b.n	8011764 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7ff fcee 	bl	8011104 <icmp_input>
        break;
 8011728:	e01c      	b.n	8011764 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801172a:	4b1a      	ldr	r3, [pc, #104]	; (8011794 <ip4_input+0x240>)
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	6939      	ldr	r1, [r7, #16]
 8011730:	4618      	mov	r0, r3
 8011732:	f000 f90b 	bl	801194c <ip4_addr_isbroadcast_u32>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d10f      	bne.n	801175c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801173c:	4b15      	ldr	r3, [pc, #84]	; (8011794 <ip4_input+0x240>)
 801173e:	695b      	ldr	r3, [r3, #20]
 8011740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011744:	2be0      	cmp	r3, #224	; 0xe0
 8011746:	d009      	beq.n	801175c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801174c:	4619      	mov	r1, r3
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7f7 ff03 	bl	800955a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011754:	2102      	movs	r1, #2
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff fdd8 	bl	801130c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f7f7 ff0f 	bl	8009580 <pbuf_free>
        break;
 8011762:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011764:	4b0b      	ldr	r3, [pc, #44]	; (8011794 <ip4_input+0x240>)
 8011766:	2200      	movs	r2, #0
 8011768:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801176a:	4b0a      	ldr	r3, [pc, #40]	; (8011794 <ip4_input+0x240>)
 801176c:	2200      	movs	r2, #0
 801176e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011770:	4b08      	ldr	r3, [pc, #32]	; (8011794 <ip4_input+0x240>)
 8011772:	2200      	movs	r2, #0
 8011774:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011776:	4b07      	ldr	r3, [pc, #28]	; (8011794 <ip4_input+0x240>)
 8011778:	2200      	movs	r2, #0
 801177a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801177c:	4b05      	ldr	r3, [pc, #20]	; (8011794 <ip4_input+0x240>)
 801177e:	2200      	movs	r2, #0
 8011780:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011782:	4b04      	ldr	r3, [pc, #16]	; (8011794 <ip4_input+0x240>)
 8011784:	2200      	movs	r2, #0
 8011786:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3718      	adds	r7, #24
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20003ca0 	.word	0x20003ca0
 8011798:	20011634 	.word	0x20011634

0801179c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b08a      	sub	sp, #40	; 0x28
 80117a0:	af04      	add	r7, sp, #16
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d009      	beq.n	80117c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d003      	beq.n	80117c2 <ip4_output_if+0x26>
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d102      	bne.n	80117c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80117c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c4:	3304      	adds	r3, #4
 80117c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80117c8:	78fa      	ldrb	r2, [r7, #3]
 80117ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117cc:	9302      	str	r3, [sp, #8]
 80117ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4613      	mov	r3, r2
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	6979      	ldr	r1, [r7, #20]
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f000 f805 	bl	80117f0 <ip4_output_if_src>
 80117e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3718      	adds	r7, #24
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	7b9b      	ldrb	r3, [r3, #14]
 8011802:	2b01      	cmp	r3, #1
 8011804:	d006      	beq.n	8011814 <ip4_output_if_src+0x24>
 8011806:	4b4b      	ldr	r3, [pc, #300]	; (8011934 <ip4_output_if_src+0x144>)
 8011808:	f44f 7255 	mov.w	r2, #852	; 0x354
 801180c:	494a      	ldr	r1, [pc, #296]	; (8011938 <ip4_output_if_src+0x148>)
 801180e:	484b      	ldr	r0, [pc, #300]	; (801193c <ip4_output_if_src+0x14c>)
 8011810:	f001 f834 	bl	801287c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d060      	beq.n	80118dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801181a:	2314      	movs	r3, #20
 801181c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801181e:	2114      	movs	r1, #20
 8011820:	68f8      	ldr	r0, [r7, #12]
 8011822:	f7f7 fe17 	bl	8009454 <pbuf_add_header>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801182c:	f06f 0301 	mvn.w	r3, #1
 8011830:	e07c      	b.n	801192c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	895b      	ldrh	r3, [r3, #10]
 801183c:	2b13      	cmp	r3, #19
 801183e:	d806      	bhi.n	801184e <ip4_output_if_src+0x5e>
 8011840:	4b3c      	ldr	r3, [pc, #240]	; (8011934 <ip4_output_if_src+0x144>)
 8011842:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011846:	493e      	ldr	r1, [pc, #248]	; (8011940 <ip4_output_if_src+0x150>)
 8011848:	483c      	ldr	r0, [pc, #240]	; (801193c <ip4_output_if_src+0x14c>)
 801184a:	f001 f817 	bl	801287c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	78fa      	ldrb	r2, [r7, #3]
 8011852:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801185a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011864:	8b7b      	ldrh	r3, [r7, #26]
 8011866:	089b      	lsrs	r3, r3, #2
 8011868:	b29b      	uxth	r3, r3
 801186a:	b2db      	uxtb	r3, r3
 801186c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011870:	b2da      	uxtb	r2, r3
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011876:	69fb      	ldr	r3, [r7, #28]
 8011878:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801187c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	891b      	ldrh	r3, [r3, #8]
 8011882:	4618      	mov	r0, r3
 8011884:	f7f6 fbc8 	bl	8008018 <lwip_htons>
 8011888:	4603      	mov	r3, r0
 801188a:	461a      	mov	r2, r3
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	2200      	movs	r2, #0
 8011894:	719a      	strb	r2, [r3, #6]
 8011896:	2200      	movs	r2, #0
 8011898:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801189a:	4b2a      	ldr	r3, [pc, #168]	; (8011944 <ip4_output_if_src+0x154>)
 801189c:	881b      	ldrh	r3, [r3, #0]
 801189e:	4618      	mov	r0, r3
 80118a0:	f7f6 fbba 	bl	8008018 <lwip_htons>
 80118a4:	4603      	mov	r3, r0
 80118a6:	461a      	mov	r2, r3
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80118ac:	4b25      	ldr	r3, [pc, #148]	; (8011944 <ip4_output_if_src+0x154>)
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	3301      	adds	r3, #1
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	4b23      	ldr	r3, [pc, #140]	; (8011944 <ip4_output_if_src+0x154>)
 80118b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d104      	bne.n	80118c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80118be:	4b22      	ldr	r3, [pc, #136]	; (8011948 <ip4_output_if_src+0x158>)
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	60da      	str	r2, [r3, #12]
 80118c6:	e003      	b.n	80118d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	2200      	movs	r2, #0
 80118d4:	729a      	strb	r2, [r3, #10]
 80118d6:	2200      	movs	r2, #0
 80118d8:	72da      	strb	r2, [r3, #11]
 80118da:	e00f      	b.n	80118fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	2b13      	cmp	r3, #19
 80118e2:	d802      	bhi.n	80118ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80118e4:	f06f 0301 	mvn.w	r3, #1
 80118e8:	e020      	b.n	801192c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80118f6:	f107 0314 	add.w	r3, r7, #20
 80118fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80118fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00c      	beq.n	801191e <ip4_output_if_src+0x12e>
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	891a      	ldrh	r2, [r3, #8]
 8011908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801190c:	429a      	cmp	r2, r3
 801190e:	d906      	bls.n	801191e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f000 fd4d 	bl	80123b4 <ip4_frag>
 801191a:	4603      	mov	r3, r0
 801191c:	e006      	b.n	801192c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	68f9      	ldr	r1, [r7, #12]
 8011926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011928:	4798      	blx	r3
 801192a:	4603      	mov	r3, r0
}
 801192c:	4618      	mov	r0, r3
 801192e:	3720      	adds	r7, #32
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	080160e8 	.word	0x080160e8
 8011938:	0801611c 	.word	0x0801611c
 801193c:	08016128 	.word	0x08016128
 8011940:	08016150 	.word	0x08016150
 8011944:	200009c6 	.word	0x200009c6
 8011948:	0801652c 	.word	0x0801652c

0801194c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011960:	d002      	beq.n	8011968 <ip4_addr_isbroadcast_u32+0x1c>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d101      	bne.n	801196c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011968:	2301      	movs	r3, #1
 801196a:	e02a      	b.n	80119c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011972:	f003 0302 	and.w	r3, r3, #2
 8011976:	2b00      	cmp	r3, #0
 8011978:	d101      	bne.n	801197e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801197a:	2300      	movs	r3, #0
 801197c:	e021      	b.n	80119c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	3304      	adds	r3, #4
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	429a      	cmp	r2, r3
 8011988:	d101      	bne.n	801198e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801198a:	2300      	movs	r3, #0
 801198c:	e019      	b.n	80119c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	3304      	adds	r3, #4
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	405a      	eors	r2, r3
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	3308      	adds	r3, #8
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4013      	ands	r3, r2
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10d      	bne.n	80119c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	3308      	adds	r3, #8
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	43da      	mvns	r2, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	3308      	adds	r3, #8
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d101      	bne.n	80119c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80119bc:	2301      	movs	r3, #1
 80119be:	e000      	b.n	80119c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80119c0:	2300      	movs	r3, #0
  }
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3714      	adds	r7, #20
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr
	...

080119d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80119d6:	2300      	movs	r3, #0
 80119d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80119da:	4b12      	ldr	r3, [pc, #72]	; (8011a24 <ip_reass_tmr+0x54>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80119e0:	e018      	b.n	8011a14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	7fdb      	ldrb	r3, [r3, #31]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00b      	beq.n	8011a02 <ip_reass_tmr+0x32>
      r->timer--;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	7fdb      	ldrb	r3, [r3, #31]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	60fb      	str	r3, [r7, #12]
 8011a00:	e008      	b.n	8011a14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011a0c:	68b9      	ldr	r1, [r7, #8]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 f80a 	bl	8011a28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1e3      	bne.n	80119e2 <ip_reass_tmr+0x12>
    }
  }
}
 8011a1a:	bf00      	nop
 8011a1c:	bf00      	nop
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	200009c8 	.word	0x200009c8

08011a28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d105      	bne.n	8011a4a <ip_reass_free_complete_datagram+0x22>
 8011a3e:	4b45      	ldr	r3, [pc, #276]	; (8011b54 <ip_reass_free_complete_datagram+0x12c>)
 8011a40:	22ab      	movs	r2, #171	; 0xab
 8011a42:	4945      	ldr	r1, [pc, #276]	; (8011b58 <ip_reass_free_complete_datagram+0x130>)
 8011a44:	4845      	ldr	r0, [pc, #276]	; (8011b5c <ip_reass_free_complete_datagram+0x134>)
 8011a46:	f000 ff19 	bl	801287c <iprintf>
  if (prev != NULL) {
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00a      	beq.n	8011a66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d005      	beq.n	8011a66 <ip_reass_free_complete_datagram+0x3e>
 8011a5a:	4b3e      	ldr	r3, [pc, #248]	; (8011b54 <ip_reass_free_complete_datagram+0x12c>)
 8011a5c:	22ad      	movs	r2, #173	; 0xad
 8011a5e:	4940      	ldr	r1, [pc, #256]	; (8011b60 <ip_reass_free_complete_datagram+0x138>)
 8011a60:	483e      	ldr	r0, [pc, #248]	; (8011b5c <ip_reass_free_complete_datagram+0x134>)
 8011a62:	f000 ff0b 	bl	801287c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	889b      	ldrh	r3, [r3, #4]
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d12a      	bne.n	8011ace <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	6858      	ldr	r0, [r3, #4]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	2214      	movs	r2, #20
 8011a90:	4619      	mov	r1, r3
 8011a92:	f000 fedd 	bl	8012850 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011a96:	2101      	movs	r1, #1
 8011a98:	69b8      	ldr	r0, [r7, #24]
 8011a9a:	f7ff fc47 	bl	801132c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011a9e:	69b8      	ldr	r0, [r7, #24]
 8011aa0:	f7f7 fdf6 	bl	8009690 <pbuf_clen>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011aa8:	8bfa      	ldrh	r2, [r7, #30]
 8011aaa:	8a7b      	ldrh	r3, [r7, #18]
 8011aac:	4413      	add	r3, r2
 8011aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ab2:	db05      	blt.n	8011ac0 <ip_reass_free_complete_datagram+0x98>
 8011ab4:	4b27      	ldr	r3, [pc, #156]	; (8011b54 <ip_reass_free_complete_datagram+0x12c>)
 8011ab6:	22bc      	movs	r2, #188	; 0xbc
 8011ab8:	492a      	ldr	r1, [pc, #168]	; (8011b64 <ip_reass_free_complete_datagram+0x13c>)
 8011aba:	4828      	ldr	r0, [pc, #160]	; (8011b5c <ip_reass_free_complete_datagram+0x134>)
 8011abc:	f000 fede 	bl	801287c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ac0:	8bfa      	ldrh	r2, [r7, #30]
 8011ac2:	8a7b      	ldrh	r3, [r7, #18]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011ac8:	69b8      	ldr	r0, [r7, #24]
 8011aca:	f7f7 fd59 	bl	8009580 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011ad4:	e01f      	b.n	8011b16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7f7 fdd2 	bl	8009690 <pbuf_clen>
 8011aec:	4603      	mov	r3, r0
 8011aee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011af0:	8bfa      	ldrh	r2, [r7, #30]
 8011af2:	8a7b      	ldrh	r3, [r7, #18]
 8011af4:	4413      	add	r3, r2
 8011af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011afa:	db05      	blt.n	8011b08 <ip_reass_free_complete_datagram+0xe0>
 8011afc:	4b15      	ldr	r3, [pc, #84]	; (8011b54 <ip_reass_free_complete_datagram+0x12c>)
 8011afe:	22cc      	movs	r2, #204	; 0xcc
 8011b00:	4918      	ldr	r1, [pc, #96]	; (8011b64 <ip_reass_free_complete_datagram+0x13c>)
 8011b02:	4816      	ldr	r0, [pc, #88]	; (8011b5c <ip_reass_free_complete_datagram+0x134>)
 8011b04:	f000 feba 	bl	801287c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011b08:	8bfa      	ldrh	r2, [r7, #30]
 8011b0a:	8a7b      	ldrh	r3, [r7, #18]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	f7f7 fd35 	bl	8009580 <pbuf_free>
  while (p != NULL) {
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1dc      	bne.n	8011ad6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011b1c:	6839      	ldr	r1, [r7, #0]
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f000 f8c2 	bl	8011ca8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011b24:	4b10      	ldr	r3, [pc, #64]	; (8011b68 <ip_reass_free_complete_datagram+0x140>)
 8011b26:	881b      	ldrh	r3, [r3, #0]
 8011b28:	8bfa      	ldrh	r2, [r7, #30]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d905      	bls.n	8011b3a <ip_reass_free_complete_datagram+0x112>
 8011b2e:	4b09      	ldr	r3, [pc, #36]	; (8011b54 <ip_reass_free_complete_datagram+0x12c>)
 8011b30:	22d2      	movs	r2, #210	; 0xd2
 8011b32:	490e      	ldr	r1, [pc, #56]	; (8011b6c <ip_reass_free_complete_datagram+0x144>)
 8011b34:	4809      	ldr	r0, [pc, #36]	; (8011b5c <ip_reass_free_complete_datagram+0x134>)
 8011b36:	f000 fea1 	bl	801287c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011b3a:	4b0b      	ldr	r3, [pc, #44]	; (8011b68 <ip_reass_free_complete_datagram+0x140>)
 8011b3c:	881a      	ldrh	r2, [r3, #0]
 8011b3e:	8bfb      	ldrh	r3, [r7, #30]
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	4b08      	ldr	r3, [pc, #32]	; (8011b68 <ip_reass_free_complete_datagram+0x140>)
 8011b46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011b48:	8bfb      	ldrh	r3, [r7, #30]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3720      	adds	r7, #32
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08016180 	.word	0x08016180
 8011b58:	080161bc 	.word	0x080161bc
 8011b5c:	080161c8 	.word	0x080161c8
 8011b60:	080161f0 	.word	0x080161f0
 8011b64:	08016204 	.word	0x08016204
 8011b68:	200009cc 	.word	0x200009cc
 8011b6c:	08016224 	.word	0x08016224

08011b70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b08a      	sub	sp, #40	; 0x28
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011b82:	2300      	movs	r3, #0
 8011b84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011b86:	2300      	movs	r3, #0
 8011b88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011b8e:	4b28      	ldr	r3, [pc, #160]	; (8011c30 <ip_reass_remove_oldest_datagram+0xc0>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011b94:	e030      	b.n	8011bf8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b98:	695a      	ldr	r2, [r3, #20]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d10c      	bne.n	8011bbc <ip_reass_remove_oldest_datagram+0x4c>
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba4:	699a      	ldr	r2, [r3, #24]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	691b      	ldr	r3, [r3, #16]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d106      	bne.n	8011bbc <ip_reass_remove_oldest_datagram+0x4c>
 8011bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb0:	899a      	ldrh	r2, [r3, #12]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	889b      	ldrh	r3, [r3, #4]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d014      	beq.n	8011be6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011bc2:	6a3b      	ldr	r3, [r7, #32]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d104      	bne.n	8011bd2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	61bb      	str	r3, [r7, #24]
 8011bd0:	e009      	b.n	8011be6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd4:	7fda      	ldrb	r2, [r3, #31]
 8011bd6:	6a3b      	ldr	r3, [r7, #32]
 8011bd8:	7fdb      	ldrb	r3, [r3, #31]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d803      	bhi.n	8011be6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d001      	beq.n	8011bf2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1cb      	bne.n	8011b96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d008      	beq.n	8011c16 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011c04:	69b9      	ldr	r1, [r7, #24]
 8011c06:	6a38      	ldr	r0, [r7, #32]
 8011c08:	f7ff ff0e 	bl	8011a28 <ip_reass_free_complete_datagram>
 8011c0c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011c0e:	697a      	ldr	r2, [r7, #20]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	4413      	add	r3, r2
 8011c14:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011c16:	697a      	ldr	r2, [r7, #20]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	da02      	bge.n	8011c24 <ip_reass_remove_oldest_datagram+0xb4>
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	dcac      	bgt.n	8011b7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011c24:	697b      	ldr	r3, [r7, #20]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3728      	adds	r7, #40	; 0x28
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	200009c8 	.word	0x200009c8

08011c34 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c3e:	2004      	movs	r0, #4
 8011c40:	f7f6 fe40 	bl	80088c4 <memp_malloc>
 8011c44:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d110      	bne.n	8011c6e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7ff ff8e 	bl	8011b70 <ip_reass_remove_oldest_datagram>
 8011c54:	4602      	mov	r2, r0
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	dc03      	bgt.n	8011c64 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c5c:	2004      	movs	r0, #4
 8011c5e:	f7f6 fe31 	bl	80088c4 <memp_malloc>
 8011c62:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d101      	bne.n	8011c6e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e016      	b.n	8011c9c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011c6e:	2220      	movs	r2, #32
 8011c70:	2100      	movs	r1, #0
 8011c72:	68f8      	ldr	r0, [r7, #12]
 8011c74:	f000 fdfa 	bl	801286c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	220f      	movs	r2, #15
 8011c7c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011c7e:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <ip_reass_enqueue_new_datagram+0x70>)
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011c86:	4a07      	ldr	r2, [pc, #28]	; (8011ca4 <ip_reass_enqueue_new_datagram+0x70>)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	3308      	adds	r3, #8
 8011c90:	2214      	movs	r2, #20
 8011c92:	6879      	ldr	r1, [r7, #4]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f000 fddb 	bl	8012850 <memcpy>
  return ipr;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	200009c8 	.word	0x200009c8

08011ca8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011cb2:	4b10      	ldr	r3, [pc, #64]	; (8011cf4 <ip_reass_dequeue_datagram+0x4c>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d104      	bne.n	8011cc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	4a0c      	ldr	r2, [pc, #48]	; (8011cf4 <ip_reass_dequeue_datagram+0x4c>)
 8011cc2:	6013      	str	r3, [r2, #0]
 8011cc4:	e00d      	b.n	8011ce2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d106      	bne.n	8011cda <ip_reass_dequeue_datagram+0x32>
 8011ccc:	4b0a      	ldr	r3, [pc, #40]	; (8011cf8 <ip_reass_dequeue_datagram+0x50>)
 8011cce:	f240 1245 	movw	r2, #325	; 0x145
 8011cd2:	490a      	ldr	r1, [pc, #40]	; (8011cfc <ip_reass_dequeue_datagram+0x54>)
 8011cd4:	480a      	ldr	r0, [pc, #40]	; (8011d00 <ip_reass_dequeue_datagram+0x58>)
 8011cd6:	f000 fdd1 	bl	801287c <iprintf>
    prev->next = ipr->next;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	2004      	movs	r0, #4
 8011ce6:	f7f6 fe39 	bl	800895c <memp_free>
}
 8011cea:	bf00      	nop
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	200009c8 	.word	0x200009c8
 8011cf8:	08016180 	.word	0x08016180
 8011cfc:	08016248 	.word	0x08016248
 8011d00:	080161c8 	.word	0x080161c8

08011d04 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08c      	sub	sp, #48	; 0x30
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011d10:	2300      	movs	r3, #0
 8011d12:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011d14:	2301      	movs	r3, #1
 8011d16:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7f6 f977 	bl	8008018 <lwip_htons>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	f003 030f 	and.w	r3, r3, #15
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011d3c:	7e7b      	ldrb	r3, [r7, #25]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	8b7a      	ldrh	r2, [r7, #26]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d202      	bcs.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d46:	f04f 33ff 	mov.w	r3, #4294967295
 8011d4a:	e135      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011d4c:	7e7b      	ldrb	r3, [r7, #25]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	8b7a      	ldrh	r2, [r7, #26]
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	88db      	ldrh	r3, [r3, #6]
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7f6 f95b 	bl	8008018 <lwip_htons>
 8011d62:	4603      	mov	r3, r0
 8011d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	00db      	lsls	r3, r3, #3
 8011d6c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d76:	2200      	movs	r2, #0
 8011d78:	701a      	strb	r2, [r3, #0]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	705a      	strb	r2, [r3, #1]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	709a      	strb	r2, [r3, #2]
 8011d82:	2200      	movs	r2, #0
 8011d84:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	8afa      	ldrh	r2, [r7, #22]
 8011d8a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011d8c:	8afa      	ldrh	r2, [r7, #22]
 8011d8e:	8b7b      	ldrh	r3, [r7, #26]
 8011d90:	4413      	add	r3, r2
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9a:	88db      	ldrh	r3, [r3, #6]
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	8afa      	ldrh	r2, [r7, #22]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d902      	bls.n	8011daa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011da4:	f04f 33ff 	mov.w	r3, #4294967295
 8011da8:	e106      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	627b      	str	r3, [r7, #36]	; 0x24
 8011db0:	e068      	b.n	8011e84 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	889b      	ldrh	r3, [r3, #4]
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	889b      	ldrh	r3, [r3, #4]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d235      	bcs.n	8011e34 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dcc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d020      	beq.n	8011e16 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	889b      	ldrh	r3, [r3, #4]
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ddc:	88db      	ldrh	r3, [r3, #6]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d307      	bcc.n	8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	88db      	ldrh	r3, [r3, #6]
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	889b      	ldrh	r3, [r3, #4]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d902      	bls.n	8011dfa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011df4:	f04f 33ff 	mov.w	r3, #4294967295
 8011df8:	e0de      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfc:	68ba      	ldr	r2, [r7, #8]
 8011dfe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e02:	88db      	ldrh	r3, [r3, #6]
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e08:	889b      	ldrh	r3, [r3, #4]
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d03d      	beq.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011e14:	e03a      	b.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	88db      	ldrh	r3, [r3, #6]
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	889b      	ldrh	r3, [r3, #4]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d902      	bls.n	8011e2c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e26:	f04f 33ff 	mov.w	r3, #4294967295
 8011e2a:	e0c5      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	605a      	str	r2, [r3, #4]
      break;
 8011e32:	e02b      	b.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e36:	889b      	ldrh	r3, [r3, #4]
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	889b      	ldrh	r3, [r3, #4]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d102      	bne.n	8011e4a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e44:	f04f 33ff 	mov.w	r3, #4294967295
 8011e48:	e0b6      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4c:	889b      	ldrh	r3, [r3, #4]
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	88db      	ldrh	r3, [r3, #6]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d202      	bcs.n	8011e60 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5e:	e0ab      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d009      	beq.n	8011e7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e68:	88db      	ldrh	r3, [r3, #6]
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	889b      	ldrh	r3, [r3, #4]
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d001      	beq.n	8011e7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d193      	bne.n	8011db2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011e8a:	e000      	b.n	8011e8e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011e8c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d12d      	bne.n	8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d01c      	beq.n	8011ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9c:	88db      	ldrh	r3, [r3, #6]
 8011e9e:	b29a      	uxth	r2, r3
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	889b      	ldrh	r3, [r3, #4]
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d906      	bls.n	8011eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011eaa:	4b45      	ldr	r3, [pc, #276]	; (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011eac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011eb0:	4944      	ldr	r1, [pc, #272]	; (8011fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011eb2:	4845      	ldr	r0, [pc, #276]	; (8011fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011eb4:	f000 fce2 	bl	801287c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eba:	68ba      	ldr	r2, [r7, #8]
 8011ebc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec0:	88db      	ldrh	r3, [r3, #6]
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec6:	889b      	ldrh	r3, [r3, #4]
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d010      	beq.n	8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	623b      	str	r3, [r7, #32]
 8011ed2:	e00d      	b.n	8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d006      	beq.n	8011eea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011edc:	4b38      	ldr	r3, [pc, #224]	; (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ede:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011ee2:	493a      	ldr	r1, [pc, #232]	; (8011fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011ee4:	4838      	ldr	r0, [pc, #224]	; (8011fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ee6:	f000 fcc9 	bl	801287c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d105      	bne.n	8011f02 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	7f9b      	ldrb	r3, [r3, #30]
 8011efa:	f003 0301 	and.w	r3, r3, #1
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d059      	beq.n	8011fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011f02:	6a3b      	ldr	r3, [r7, #32]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d04f      	beq.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d006      	beq.n	8011f1e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	889b      	ldrh	r3, [r3, #4]
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d002      	beq.n	8011f24 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	623b      	str	r3, [r7, #32]
 8011f22:	e041      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f26:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f2e:	e012      	b.n	8011f56 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	88db      	ldrh	r3, [r3, #6]
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	889b      	ldrh	r3, [r3, #4]
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d002      	beq.n	8011f4c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	623b      	str	r3, [r7, #32]
            break;
 8011f4a:	e007      	b.n	8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1e9      	bne.n	8011f30 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d022      	beq.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d106      	bne.n	8011f78 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011f6a:	4b15      	ldr	r3, [pc, #84]	; (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f6c:	f240 12df 	movw	r2, #479	; 0x1df
 8011f70:	4917      	ldr	r1, [pc, #92]	; (8011fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f72:	4815      	ldr	r0, [pc, #84]	; (8011fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f74:	f000 fc82 	bl	801287c <iprintf>
          LWIP_ASSERT("sanity check",
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d106      	bne.n	8011f92 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011f84:	4b0e      	ldr	r3, [pc, #56]	; (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011f8a:	4911      	ldr	r1, [pc, #68]	; (8011fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f8c:	480e      	ldr	r0, [pc, #56]	; (8011fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f8e:	f000 fc75 	bl	801287c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d006      	beq.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011f9a:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f9c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011fa0:	490c      	ldr	r1, [pc, #48]	; (8011fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011fa2:	4809      	ldr	r0, [pc, #36]	; (8011fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fa4:	f000 fc6a 	bl	801287c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011fa8:	6a3b      	ldr	r3, [r7, #32]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	bf14      	ite	ne
 8011fae:	2301      	movne	r3, #1
 8011fb0:	2300      	moveq	r3, #0
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	e000      	b.n	8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3730      	adds	r7, #48	; 0x30
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	08016180 	.word	0x08016180
 8011fc4:	08016264 	.word	0x08016264
 8011fc8:	080161c8 	.word	0x080161c8
 8011fcc:	08016284 	.word	0x08016284
 8011fd0:	080162bc 	.word	0x080162bc
 8011fd4:	080162cc 	.word	0x080162cc

08011fd8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08e      	sub	sp, #56	; 0x38
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	f003 030f 	and.w	r3, r3, #15
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	2b14      	cmp	r3, #20
 8011ff6:	f040 8167 	bne.w	80122c8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	88db      	ldrh	r3, [r3, #6]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	4618      	mov	r0, r3
 8012002:	f7f6 f809 	bl	8008018 <lwip_htons>
 8012006:	4603      	mov	r3, r0
 8012008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801200c:	b29b      	uxth	r3, r3
 801200e:	00db      	lsls	r3, r3, #3
 8012010:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	885b      	ldrh	r3, [r3, #2]
 8012016:	b29b      	uxth	r3, r3
 8012018:	4618      	mov	r0, r3
 801201a:	f7f5 fffd 	bl	8008018 <lwip_htons>
 801201e:	4603      	mov	r3, r0
 8012020:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	f003 030f 	and.w	r3, r3, #15
 801202a:	b2db      	uxtb	r3, r3
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012036:	b29b      	uxth	r3, r3
 8012038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801203a:	429a      	cmp	r2, r3
 801203c:	f0c0 8146 	bcc.w	80122cc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012044:	b29b      	uxth	r3, r3
 8012046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7f7 fb1f 	bl	8009690 <pbuf_clen>
 8012052:	4603      	mov	r3, r0
 8012054:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012056:	4b9f      	ldr	r3, [pc, #636]	; (80122d4 <ip4_reass+0x2fc>)
 8012058:	881b      	ldrh	r3, [r3, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	8c3b      	ldrh	r3, [r7, #32]
 801205e:	4413      	add	r3, r2
 8012060:	2b0a      	cmp	r3, #10
 8012062:	dd10      	ble.n	8012086 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012064:	8c3b      	ldrh	r3, [r7, #32]
 8012066:	4619      	mov	r1, r3
 8012068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801206a:	f7ff fd81 	bl	8011b70 <ip_reass_remove_oldest_datagram>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	f000 812d 	beq.w	80122d0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012076:	4b97      	ldr	r3, [pc, #604]	; (80122d4 <ip4_reass+0x2fc>)
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	461a      	mov	r2, r3
 801207c:	8c3b      	ldrh	r3, [r7, #32]
 801207e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012080:	2b0a      	cmp	r3, #10
 8012082:	f300 8125 	bgt.w	80122d0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012086:	4b94      	ldr	r3, [pc, #592]	; (80122d8 <ip4_reass+0x300>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	633b      	str	r3, [r7, #48]	; 0x30
 801208c:	e015      	b.n	80120ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	695a      	ldr	r2, [r3, #20]
 8012092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	429a      	cmp	r2, r3
 8012098:	d10c      	bne.n	80120b4 <ip4_reass+0xdc>
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	699a      	ldr	r2, [r3, #24]
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d106      	bne.n	80120b4 <ip4_reass+0xdc>
 80120a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a8:	899a      	ldrh	r2, [r3, #12]
 80120aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ac:	889b      	ldrh	r3, [r3, #4]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d006      	beq.n	80120c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	633b      	str	r3, [r7, #48]	; 0x30
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1e6      	bne.n	801208e <ip4_reass+0xb6>
 80120c0:	e000      	b.n	80120c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80120c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80120c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d109      	bne.n	80120de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80120ca:	8c3b      	ldrh	r3, [r7, #32]
 80120cc:	4619      	mov	r1, r3
 80120ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120d0:	f7ff fdb0 	bl	8011c34 <ip_reass_enqueue_new_datagram>
 80120d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d11c      	bne.n	8012116 <ip4_reass+0x13e>
      goto nullreturn;
 80120dc:	e109      	b.n	80122f2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80120de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e0:	88db      	ldrh	r3, [r3, #6]
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f5 ff97 	bl	8008018 <lwip_htons>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d110      	bne.n	8012116 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80120f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f6:	89db      	ldrh	r3, [r3, #14]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7f5 ff8d 	bl	8008018 <lwip_htons>
 80120fe:	4603      	mov	r3, r0
 8012100:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012104:	2b00      	cmp	r3, #0
 8012106:	d006      	beq.n	8012116 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210a:	3308      	adds	r3, #8
 801210c:	2214      	movs	r2, #20
 801210e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012110:	4618      	mov	r0, r3
 8012112:	f000 fb9d 	bl	8012850 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	88db      	ldrh	r3, [r3, #6]
 801211a:	b29b      	uxth	r3, r3
 801211c:	f003 0320 	and.w	r3, r3, #32
 8012120:	2b00      	cmp	r3, #0
 8012122:	bf0c      	ite	eq
 8012124:	2301      	moveq	r3, #1
 8012126:	2300      	movne	r3, #0
 8012128:	b2db      	uxtb	r3, r3
 801212a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d00e      	beq.n	8012150 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012136:	4413      	add	r3, r2
 8012138:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801213a:	8b7a      	ldrh	r2, [r7, #26]
 801213c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801213e:	429a      	cmp	r2, r3
 8012140:	f0c0 80a0 	bcc.w	8012284 <ip4_reass+0x2ac>
 8012144:	8b7b      	ldrh	r3, [r7, #26]
 8012146:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801214a:	4293      	cmp	r3, r2
 801214c:	f200 809a 	bhi.w	8012284 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012150:	69fa      	ldr	r2, [r7, #28]
 8012152:	6879      	ldr	r1, [r7, #4]
 8012154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012156:	f7ff fdd5 	bl	8011d04 <ip_reass_chain_frag_into_datagram_and_validate>
 801215a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012162:	f000 8091 	beq.w	8012288 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012166:	4b5b      	ldr	r3, [pc, #364]	; (80122d4 <ip4_reass+0x2fc>)
 8012168:	881a      	ldrh	r2, [r3, #0]
 801216a:	8c3b      	ldrh	r3, [r7, #32]
 801216c:	4413      	add	r3, r2
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b58      	ldr	r3, [pc, #352]	; (80122d4 <ip4_reass+0x2fc>)
 8012172:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00d      	beq.n	8012196 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801217a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801217c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801217e:	4413      	add	r3, r2
 8012180:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	8a7a      	ldrh	r2, [r7, #18]
 8012186:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218a:	7f9b      	ldrb	r3, [r3, #30]
 801218c:	f043 0301 	orr.w	r3, r3, #1
 8012190:	b2da      	uxtb	r2, r3
 8012192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012194:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	2b01      	cmp	r3, #1
 801219a:	d171      	bne.n	8012280 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219e:	8b9b      	ldrh	r3, [r3, #28]
 80121a0:	3314      	adds	r3, #20
 80121a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80121a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80121ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	685b      	ldr	r3, [r3, #4]
 80121b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	3308      	adds	r3, #8
 80121ba:	2214      	movs	r2, #20
 80121bc:	4619      	mov	r1, r3
 80121be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c0:	f000 fb46 	bl	8012850 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80121c4:	8a3b      	ldrh	r3, [r7, #16]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f5 ff26 	bl	8008018 <lwip_htons>
 80121cc:	4603      	mov	r3, r0
 80121ce:	461a      	mov	r2, r3
 80121d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	2200      	movs	r2, #0
 80121d8:	719a      	strb	r2, [r3, #6]
 80121da:	2200      	movs	r2, #0
 80121dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80121de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e0:	2200      	movs	r2, #0
 80121e2:	729a      	strb	r2, [r3, #10]
 80121e4:	2200      	movs	r2, #0
 80121e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80121e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80121ee:	e00d      	b.n	801220c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80121f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80121f6:	2114      	movs	r1, #20
 80121f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80121fa:	f7f7 f93b 	bl	8009474 <pbuf_remove_header>
      pbuf_cat(p, r);
 80121fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7f7 fa7f 	bl	8009704 <pbuf_cat>
      r = iprh->next_pbuf;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1ee      	bne.n	80121f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012212:	4b31      	ldr	r3, [pc, #196]	; (80122d8 <ip4_reass+0x300>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012218:	429a      	cmp	r2, r3
 801221a:	d102      	bne.n	8012222 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801221c:	2300      	movs	r3, #0
 801221e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012220:	e010      	b.n	8012244 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012222:	4b2d      	ldr	r3, [pc, #180]	; (80122d8 <ip4_reass+0x300>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012228:	e007      	b.n	801223a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012230:	429a      	cmp	r2, r3
 8012232:	d006      	beq.n	8012242 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1f4      	bne.n	801222a <ip4_reass+0x252>
 8012240:	e000      	b.n	8012244 <ip4_reass+0x26c>
          break;
 8012242:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012248:	f7ff fd2e 	bl	8011ca8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7f7 fa1f 	bl	8009690 <pbuf_clen>
 8012252:	4603      	mov	r3, r0
 8012254:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012256:	4b1f      	ldr	r3, [pc, #124]	; (80122d4 <ip4_reass+0x2fc>)
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	8c3a      	ldrh	r2, [r7, #32]
 801225c:	429a      	cmp	r2, r3
 801225e:	d906      	bls.n	801226e <ip4_reass+0x296>
 8012260:	4b1e      	ldr	r3, [pc, #120]	; (80122dc <ip4_reass+0x304>)
 8012262:	f240 229b 	movw	r2, #667	; 0x29b
 8012266:	491e      	ldr	r1, [pc, #120]	; (80122e0 <ip4_reass+0x308>)
 8012268:	481e      	ldr	r0, [pc, #120]	; (80122e4 <ip4_reass+0x30c>)
 801226a:	f000 fb07 	bl	801287c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801226e:	4b19      	ldr	r3, [pc, #100]	; (80122d4 <ip4_reass+0x2fc>)
 8012270:	881a      	ldrh	r2, [r3, #0]
 8012272:	8c3b      	ldrh	r3, [r7, #32]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	b29a      	uxth	r2, r3
 8012278:	4b16      	ldr	r3, [pc, #88]	; (80122d4 <ip4_reass+0x2fc>)
 801227a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	e03c      	b.n	80122fa <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012280:	2300      	movs	r3, #0
 8012282:	e03a      	b.n	80122fa <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012284:	bf00      	nop
 8012286:	e000      	b.n	801228a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012288:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228c:	2b00      	cmp	r3, #0
 801228e:	d106      	bne.n	801229e <ip4_reass+0x2c6>
 8012290:	4b12      	ldr	r3, [pc, #72]	; (80122dc <ip4_reass+0x304>)
 8012292:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012296:	4914      	ldr	r1, [pc, #80]	; (80122e8 <ip4_reass+0x310>)
 8012298:	4812      	ldr	r0, [pc, #72]	; (80122e4 <ip4_reass+0x30c>)
 801229a:	f000 faef 	bl	801287c <iprintf>
  if (ipr->p == NULL) {
 801229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d124      	bne.n	80122f0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80122a6:	4b0c      	ldr	r3, [pc, #48]	; (80122d8 <ip4_reass+0x300>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d006      	beq.n	80122be <ip4_reass+0x2e6>
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <ip4_reass+0x304>)
 80122b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80122b6:	490d      	ldr	r1, [pc, #52]	; (80122ec <ip4_reass+0x314>)
 80122b8:	480a      	ldr	r0, [pc, #40]	; (80122e4 <ip4_reass+0x30c>)
 80122ba:	f000 fadf 	bl	801287c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80122be:	2100      	movs	r1, #0
 80122c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122c2:	f7ff fcf1 	bl	8011ca8 <ip_reass_dequeue_datagram>
 80122c6:	e014      	b.n	80122f2 <ip4_reass+0x31a>
    goto nullreturn;
 80122c8:	bf00      	nop
 80122ca:	e012      	b.n	80122f2 <ip4_reass+0x31a>
    goto nullreturn;
 80122cc:	bf00      	nop
 80122ce:	e010      	b.n	80122f2 <ip4_reass+0x31a>
      goto nullreturn;
 80122d0:	bf00      	nop
 80122d2:	e00e      	b.n	80122f2 <ip4_reass+0x31a>
 80122d4:	200009cc 	.word	0x200009cc
 80122d8:	200009c8 	.word	0x200009c8
 80122dc:	08016180 	.word	0x08016180
 80122e0:	080162f0 	.word	0x080162f0
 80122e4:	080161c8 	.word	0x080161c8
 80122e8:	0801630c 	.word	0x0801630c
 80122ec:	08016318 	.word	0x08016318
  }

nullreturn:
 80122f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7f7 f944 	bl	8009580 <pbuf_free>
  return NULL;
 80122f8:	2300      	movs	r3, #0
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3738      	adds	r7, #56	; 0x38
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop

08012304 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012308:	2005      	movs	r0, #5
 801230a:	f7f6 fadb 	bl	80088c4 <memp_malloc>
 801230e:	4603      	mov	r3, r0
}
 8012310:	4618      	mov	r0, r3
 8012312:	bd80      	pop	{r7, pc}

08012314 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012322:	4b07      	ldr	r3, [pc, #28]	; (8012340 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012324:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012328:	4906      	ldr	r1, [pc, #24]	; (8012344 <ip_frag_free_pbuf_custom_ref+0x30>)
 801232a:	4807      	ldr	r0, [pc, #28]	; (8012348 <ip_frag_free_pbuf_custom_ref+0x34>)
 801232c:	f000 faa6 	bl	801287c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012330:	6879      	ldr	r1, [r7, #4]
 8012332:	2005      	movs	r0, #5
 8012334:	f7f6 fb12 	bl	800895c <memp_free>
}
 8012338:	bf00      	nop
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	08016180 	.word	0x08016180
 8012344:	08016338 	.word	0x08016338
 8012348:	080161c8 	.word	0x080161c8

0801234c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d106      	bne.n	801236c <ipfrag_free_pbuf_custom+0x20>
 801235e:	4b11      	ldr	r3, [pc, #68]	; (80123a4 <ipfrag_free_pbuf_custom+0x58>)
 8012360:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012364:	4910      	ldr	r1, [pc, #64]	; (80123a8 <ipfrag_free_pbuf_custom+0x5c>)
 8012366:	4811      	ldr	r0, [pc, #68]	; (80123ac <ipfrag_free_pbuf_custom+0x60>)
 8012368:	f000 fa88 	bl	801287c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	429a      	cmp	r2, r3
 8012372:	d006      	beq.n	8012382 <ipfrag_free_pbuf_custom+0x36>
 8012374:	4b0b      	ldr	r3, [pc, #44]	; (80123a4 <ipfrag_free_pbuf_custom+0x58>)
 8012376:	f240 22cf 	movw	r2, #719	; 0x2cf
 801237a:	490d      	ldr	r1, [pc, #52]	; (80123b0 <ipfrag_free_pbuf_custom+0x64>)
 801237c:	480b      	ldr	r0, [pc, #44]	; (80123ac <ipfrag_free_pbuf_custom+0x60>)
 801237e:	f000 fa7d 	bl	801287c <iprintf>
  if (pcr->original != NULL) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d004      	beq.n	8012394 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	695b      	ldr	r3, [r3, #20]
 801238e:	4618      	mov	r0, r3
 8012390:	f7f7 f8f6 	bl	8009580 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7ff ffbd 	bl	8012314 <ip_frag_free_pbuf_custom_ref>
}
 801239a:	bf00      	nop
 801239c:	3710      	adds	r7, #16
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	08016180 	.word	0x08016180
 80123a8:	08016344 	.word	0x08016344
 80123ac:	080161c8 	.word	0x080161c8
 80123b0:	08016350 	.word	0x08016350

080123b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b094      	sub	sp, #80	; 0x50
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80123c0:	2300      	movs	r3, #0
 80123c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123ca:	3b14      	subs	r3, #20
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	da00      	bge.n	80123d2 <ip4_frag+0x1e>
 80123d0:	3307      	adds	r3, #7
 80123d2:	10db      	asrs	r3, r3, #3
 80123d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80123d6:	2314      	movs	r3, #20
 80123d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80123e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 030f 	and.w	r3, r3, #15
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b14      	cmp	r3, #20
 80123f4:	d002      	beq.n	80123fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80123f6:	f06f 0305 	mvn.w	r3, #5
 80123fa:	e110      	b.n	801261e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	895b      	ldrh	r3, [r3, #10]
 8012400:	2b13      	cmp	r3, #19
 8012402:	d809      	bhi.n	8012418 <ip4_frag+0x64>
 8012404:	4b88      	ldr	r3, [pc, #544]	; (8012628 <ip4_frag+0x274>)
 8012406:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801240a:	4988      	ldr	r1, [pc, #544]	; (801262c <ip4_frag+0x278>)
 801240c:	4888      	ldr	r0, [pc, #544]	; (8012630 <ip4_frag+0x27c>)
 801240e:	f000 fa35 	bl	801287c <iprintf>
 8012412:	f06f 0305 	mvn.w	r3, #5
 8012416:	e102      	b.n	801261e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	88db      	ldrh	r3, [r3, #6]
 801241c:	b29b      	uxth	r3, r3
 801241e:	4618      	mov	r0, r3
 8012420:	f7f5 fdfa 	bl	8008018 <lwip_htons>
 8012424:	4603      	mov	r3, r0
 8012426:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012428:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801242a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801242e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012432:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012438:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	891b      	ldrh	r3, [r3, #8]
 801243e:	3b14      	subs	r3, #20
 8012440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012444:	e0e1      	b.n	801260a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012446:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	b29b      	uxth	r3, r3
 801244c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012450:	4293      	cmp	r3, r2
 8012452:	bf28      	it	cs
 8012454:	4613      	movcs	r3, r2
 8012456:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012458:	f44f 7220 	mov.w	r2, #640	; 0x280
 801245c:	2114      	movs	r1, #20
 801245e:	200e      	movs	r0, #14
 8012460:	f7f6 fdaa 	bl	8008fb8 <pbuf_alloc>
 8012464:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	2b00      	cmp	r3, #0
 801246a:	f000 80d5 	beq.w	8012618 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012470:	895b      	ldrh	r3, [r3, #10]
 8012472:	2b13      	cmp	r3, #19
 8012474:	d806      	bhi.n	8012484 <ip4_frag+0xd0>
 8012476:	4b6c      	ldr	r3, [pc, #432]	; (8012628 <ip4_frag+0x274>)
 8012478:	f44f 7249 	mov.w	r2, #804	; 0x324
 801247c:	496d      	ldr	r1, [pc, #436]	; (8012634 <ip4_frag+0x280>)
 801247e:	486c      	ldr	r0, [pc, #432]	; (8012630 <ip4_frag+0x27c>)
 8012480:	f000 f9fc 	bl	801287c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	2214      	movs	r2, #20
 801248a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801248c:	4618      	mov	r0, r3
 801248e:	f000 f9df 	bl	8012850 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801249a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801249e:	e064      	b.n	801256a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	895a      	ldrh	r2, [r3, #10]
 80124a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	895b      	ldrh	r3, [r3, #10]
 80124ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d906      	bls.n	80124c2 <ip4_frag+0x10e>
 80124b4:	4b5c      	ldr	r3, [pc, #368]	; (8012628 <ip4_frag+0x274>)
 80124b6:	f240 322d 	movw	r2, #813	; 0x32d
 80124ba:	495f      	ldr	r1, [pc, #380]	; (8012638 <ip4_frag+0x284>)
 80124bc:	485c      	ldr	r0, [pc, #368]	; (8012630 <ip4_frag+0x27c>)
 80124be:	f000 f9dd 	bl	801287c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80124c2:	8bfa      	ldrh	r2, [r7, #30]
 80124c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80124c8:	4293      	cmp	r3, r2
 80124ca:	bf28      	it	cs
 80124cc:	4613      	movcs	r3, r2
 80124ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80124d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d105      	bne.n	80124e6 <ip4_frag+0x132>
        poff = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	60fb      	str	r3, [r7, #12]
        continue;
 80124e4:	e041      	b.n	801256a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80124e6:	f7ff ff0d 	bl	8012304 <ip_frag_alloc_pbuf_custom_ref>
 80124ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d103      	bne.n	80124fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80124f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124f4:	f7f7 f844 	bl	8009580 <pbuf_free>
        goto memerr;
 80124f8:	e08f      	b.n	801261a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012502:	4413      	add	r3, r2
 8012504:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012508:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801250c:	9201      	str	r2, [sp, #4]
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	4603      	mov	r3, r0
 8012512:	2241      	movs	r2, #65	; 0x41
 8012514:	2000      	movs	r0, #0
 8012516:	f7f6 fe79 	bl	800920c <pbuf_alloced_custom>
 801251a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d106      	bne.n	8012530 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012522:	69b8      	ldr	r0, [r7, #24]
 8012524:	f7ff fef6 	bl	8012314 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801252a:	f7f7 f829 	bl	8009580 <pbuf_free>
        goto memerr;
 801252e:	e074      	b.n	801261a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7f7 f8c5 	bl	80096c0 <pbuf_ref>
      pcr->original = p;
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	68fa      	ldr	r2, [r7, #12]
 801253a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	4a3f      	ldr	r2, [pc, #252]	; (801263c <ip4_frag+0x288>)
 8012540:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012542:	6979      	ldr	r1, [r7, #20]
 8012544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012546:	f7f7 f8dd 	bl	8009704 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801254a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801254e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801255c:	2b00      	cmp	r3, #0
 801255e:	d004      	beq.n	801256a <ip4_frag+0x1b6>
        poff = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801256a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801256e:	2b00      	cmp	r3, #0
 8012570:	d196      	bne.n	80124a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012572:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012574:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012578:	4413      	add	r3, r2
 801257a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012580:	f1a3 0213 	sub.w	r2, r3, #19
 8012584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012588:	429a      	cmp	r2, r3
 801258a:	bfcc      	ite	gt
 801258c:	2301      	movgt	r3, #1
 801258e:	2300      	movle	r3, #0
 8012590:	b2db      	uxtb	r3, r3
 8012592:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801259c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d002      	beq.n	80125aa <ip4_frag+0x1f6>
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d003      	beq.n	80125b2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80125aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80125b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80125b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7f5 fd2f 	bl	8008018 <lwip_htons>
 80125ba:	4603      	mov	r3, r0
 80125bc:	461a      	mov	r2, r3
 80125be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80125c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80125c4:	3314      	adds	r3, #20
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7f5 fd25 	bl	8008018 <lwip_htons>
 80125ce:	4603      	mov	r3, r0
 80125d0:	461a      	mov	r2, r3
 80125d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80125d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d8:	2200      	movs	r2, #0
 80125da:	729a      	strb	r2, [r3, #10]
 80125dc:	2200      	movs	r2, #0
 80125de:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125e8:	68b8      	ldr	r0, [r7, #8]
 80125ea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80125ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125ee:	f7f6 ffc7 	bl	8009580 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80125f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80125fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012602:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012604:	4413      	add	r3, r2
 8012606:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801260a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801260e:	2b00      	cmp	r3, #0
 8012610:	f47f af19 	bne.w	8012446 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012614:	2300      	movs	r3, #0
 8012616:	e002      	b.n	801261e <ip4_frag+0x26a>
      goto memerr;
 8012618:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801261a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801261e:	4618      	mov	r0, r3
 8012620:	3748      	adds	r7, #72	; 0x48
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	08016180 	.word	0x08016180
 801262c:	0801635c 	.word	0x0801635c
 8012630:	080161c8 	.word	0x080161c8
 8012634:	08016378 	.word	0x08016378
 8012638:	08016398 	.word	0x08016398
 801263c:	0801234d 	.word	0x0801234d

08012640 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b086      	sub	sp, #24
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801264a:	230e      	movs	r3, #14
 801264c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	895b      	ldrh	r3, [r3, #10]
 8012652:	2b0e      	cmp	r3, #14
 8012654:	d96e      	bls.n	8012734 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	7bdb      	ldrb	r3, [r3, #15]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d106      	bne.n	801266c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012664:	3301      	adds	r3, #1
 8012666:	b2da      	uxtb	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	7b1a      	ldrb	r2, [r3, #12]
 8012676:	7b5b      	ldrb	r3, [r3, #13]
 8012678:	021b      	lsls	r3, r3, #8
 801267a:	4313      	orrs	r3, r2
 801267c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	f003 0301 	and.w	r3, r3, #1
 8012686:	2b00      	cmp	r3, #0
 8012688:	d023      	beq.n	80126d2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	2b01      	cmp	r3, #1
 8012690:	d10f      	bne.n	80126b2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	785b      	ldrb	r3, [r3, #1]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d11b      	bne.n	80126d2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801269e:	2b5e      	cmp	r3, #94	; 0x5e
 80126a0:	d117      	bne.n	80126d2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	7b5b      	ldrb	r3, [r3, #13]
 80126a6:	f043 0310 	orr.w	r3, r3, #16
 80126aa:	b2da      	uxtb	r2, r3
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	735a      	strb	r2, [r3, #13]
 80126b0:	e00f      	b.n	80126d2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	2206      	movs	r2, #6
 80126b6:	4928      	ldr	r1, [pc, #160]	; (8012758 <ethernet_input+0x118>)
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 f8bb 	bl	8012834 <memcmp>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d106      	bne.n	80126d2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	7b5b      	ldrb	r3, [r3, #13]
 80126c8:	f043 0308 	orr.w	r3, r3, #8
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80126d2:	89fb      	ldrh	r3, [r7, #14]
 80126d4:	2b08      	cmp	r3, #8
 80126d6:	d003      	beq.n	80126e0 <ethernet_input+0xa0>
 80126d8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80126dc:	d014      	beq.n	8012708 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80126de:	e032      	b.n	8012746 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126e6:	f003 0308 	and.w	r3, r3, #8
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d024      	beq.n	8012738 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80126ee:	8afb      	ldrh	r3, [r7, #22]
 80126f0:	4619      	mov	r1, r3
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7f6 febe 	bl	8009474 <pbuf_remove_header>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d11e      	bne.n	801273c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80126fe:	6839      	ldr	r1, [r7, #0]
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7fe ff27 	bl	8011554 <ip4_input>
      break;
 8012706:	e013      	b.n	8012730 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801270e:	f003 0308 	and.w	r3, r3, #8
 8012712:	2b00      	cmp	r3, #0
 8012714:	d014      	beq.n	8012740 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012716:	8afb      	ldrh	r3, [r7, #22]
 8012718:	4619      	mov	r1, r3
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7f6 feaa 	bl	8009474 <pbuf_remove_header>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	d10e      	bne.n	8012744 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7fe f8c7 	bl	80108bc <etharp_input>
      break;
 801272e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	e00c      	b.n	801274e <ethernet_input+0x10e>
    goto free_and_return;
 8012734:	bf00      	nop
 8012736:	e006      	b.n	8012746 <ethernet_input+0x106>
        goto free_and_return;
 8012738:	bf00      	nop
 801273a:	e004      	b.n	8012746 <ethernet_input+0x106>
        goto free_and_return;
 801273c:	bf00      	nop
 801273e:	e002      	b.n	8012746 <ethernet_input+0x106>
        goto free_and_return;
 8012740:	bf00      	nop
 8012742:	e000      	b.n	8012746 <ethernet_input+0x106>
        goto free_and_return;
 8012744:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7f6 ff1a 	bl	8009580 <pbuf_free>
  return ERR_OK;
 801274c:	2300      	movs	r3, #0
}
 801274e:	4618      	mov	r0, r3
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
 8012756:	bf00      	nop
 8012758:	08016530 	.word	0x08016530

0801275c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801275c:	b580      	push	{r7, lr}
 801275e:	b086      	sub	sp, #24
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801276a:	8c3b      	ldrh	r3, [r7, #32]
 801276c:	4618      	mov	r0, r3
 801276e:	f7f5 fc53 	bl	8008018 <lwip_htons>
 8012772:	4603      	mov	r3, r0
 8012774:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012776:	210e      	movs	r1, #14
 8012778:	68b8      	ldr	r0, [r7, #8]
 801277a:	f7f6 fe6b 	bl	8009454 <pbuf_add_header>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d125      	bne.n	80127d0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	8afa      	ldrh	r2, [r7, #22]
 801278e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2206      	movs	r2, #6
 8012794:	6839      	ldr	r1, [r7, #0]
 8012796:	4618      	mov	r0, r3
 8012798:	f000 f85a 	bl	8012850 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	3306      	adds	r3, #6
 80127a0:	2206      	movs	r2, #6
 80127a2:	6879      	ldr	r1, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f000 f853 	bl	8012850 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80127b0:	2b06      	cmp	r3, #6
 80127b2:	d006      	beq.n	80127c2 <ethernet_output+0x66>
 80127b4:	4b0a      	ldr	r3, [pc, #40]	; (80127e0 <ethernet_output+0x84>)
 80127b6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80127ba:	490a      	ldr	r1, [pc, #40]	; (80127e4 <ethernet_output+0x88>)
 80127bc:	480a      	ldr	r0, [pc, #40]	; (80127e8 <ethernet_output+0x8c>)
 80127be:	f000 f85d 	bl	801287c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	68b9      	ldr	r1, [r7, #8]
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	4798      	blx	r3
 80127cc:	4603      	mov	r3, r0
 80127ce:	e002      	b.n	80127d6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80127d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80127d2:	f06f 0301 	mvn.w	r3, #1
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3718      	adds	r7, #24
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	080163a8 	.word	0x080163a8
 80127e4:	080163e0 	.word	0x080163e0
 80127e8:	08016414 	.word	0x08016414

080127ec <__libc_init_array>:
 80127ec:	b570      	push	{r4, r5, r6, lr}
 80127ee:	4d0d      	ldr	r5, [pc, #52]	; (8012824 <__libc_init_array+0x38>)
 80127f0:	4c0d      	ldr	r4, [pc, #52]	; (8012828 <__libc_init_array+0x3c>)
 80127f2:	1b64      	subs	r4, r4, r5
 80127f4:	10a4      	asrs	r4, r4, #2
 80127f6:	2600      	movs	r6, #0
 80127f8:	42a6      	cmp	r6, r4
 80127fa:	d109      	bne.n	8012810 <__libc_init_array+0x24>
 80127fc:	4d0b      	ldr	r5, [pc, #44]	; (801282c <__libc_init_array+0x40>)
 80127fe:	4c0c      	ldr	r4, [pc, #48]	; (8012830 <__libc_init_array+0x44>)
 8012800:	f001 f8cc 	bl	801399c <_init>
 8012804:	1b64      	subs	r4, r4, r5
 8012806:	10a4      	asrs	r4, r4, #2
 8012808:	2600      	movs	r6, #0
 801280a:	42a6      	cmp	r6, r4
 801280c:	d105      	bne.n	801281a <__libc_init_array+0x2e>
 801280e:	bd70      	pop	{r4, r5, r6, pc}
 8012810:	f855 3b04 	ldr.w	r3, [r5], #4
 8012814:	4798      	blx	r3
 8012816:	3601      	adds	r6, #1
 8012818:	e7ee      	b.n	80127f8 <__libc_init_array+0xc>
 801281a:	f855 3b04 	ldr.w	r3, [r5], #4
 801281e:	4798      	blx	r3
 8012820:	3601      	adds	r6, #1
 8012822:	e7f2      	b.n	801280a <__libc_init_array+0x1e>
 8012824:	08016694 	.word	0x08016694
 8012828:	08016694 	.word	0x08016694
 801282c:	08016694 	.word	0x08016694
 8012830:	08016698 	.word	0x08016698

08012834 <memcmp>:
 8012834:	b530      	push	{r4, r5, lr}
 8012836:	3901      	subs	r1, #1
 8012838:	2400      	movs	r4, #0
 801283a:	42a2      	cmp	r2, r4
 801283c:	d101      	bne.n	8012842 <memcmp+0xe>
 801283e:	2000      	movs	r0, #0
 8012840:	e005      	b.n	801284e <memcmp+0x1a>
 8012842:	5d03      	ldrb	r3, [r0, r4]
 8012844:	3401      	adds	r4, #1
 8012846:	5d0d      	ldrb	r5, [r1, r4]
 8012848:	42ab      	cmp	r3, r5
 801284a:	d0f6      	beq.n	801283a <memcmp+0x6>
 801284c:	1b58      	subs	r0, r3, r5
 801284e:	bd30      	pop	{r4, r5, pc}

08012850 <memcpy>:
 8012850:	440a      	add	r2, r1
 8012852:	4291      	cmp	r1, r2
 8012854:	f100 33ff 	add.w	r3, r0, #4294967295
 8012858:	d100      	bne.n	801285c <memcpy+0xc>
 801285a:	4770      	bx	lr
 801285c:	b510      	push	{r4, lr}
 801285e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012866:	4291      	cmp	r1, r2
 8012868:	d1f9      	bne.n	801285e <memcpy+0xe>
 801286a:	bd10      	pop	{r4, pc}

0801286c <memset>:
 801286c:	4402      	add	r2, r0
 801286e:	4603      	mov	r3, r0
 8012870:	4293      	cmp	r3, r2
 8012872:	d100      	bne.n	8012876 <memset+0xa>
 8012874:	4770      	bx	lr
 8012876:	f803 1b01 	strb.w	r1, [r3], #1
 801287a:	e7f9      	b.n	8012870 <memset+0x4>

0801287c <iprintf>:
 801287c:	b40f      	push	{r0, r1, r2, r3}
 801287e:	4b0a      	ldr	r3, [pc, #40]	; (80128a8 <iprintf+0x2c>)
 8012880:	b513      	push	{r0, r1, r4, lr}
 8012882:	681c      	ldr	r4, [r3, #0]
 8012884:	b124      	cbz	r4, 8012890 <iprintf+0x14>
 8012886:	69a3      	ldr	r3, [r4, #24]
 8012888:	b913      	cbnz	r3, 8012890 <iprintf+0x14>
 801288a:	4620      	mov	r0, r4
 801288c:	f000 fabc 	bl	8012e08 <__sinit>
 8012890:	ab05      	add	r3, sp, #20
 8012892:	9a04      	ldr	r2, [sp, #16]
 8012894:	68a1      	ldr	r1, [r4, #8]
 8012896:	9301      	str	r3, [sp, #4]
 8012898:	4620      	mov	r0, r4
 801289a:	f000 fca7 	bl	80131ec <_vfiprintf_r>
 801289e:	b002      	add	sp, #8
 80128a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128a4:	b004      	add	sp, #16
 80128a6:	4770      	bx	lr
 80128a8:	20000024 	.word	0x20000024

080128ac <_puts_r>:
 80128ac:	b570      	push	{r4, r5, r6, lr}
 80128ae:	460e      	mov	r6, r1
 80128b0:	4605      	mov	r5, r0
 80128b2:	b118      	cbz	r0, 80128bc <_puts_r+0x10>
 80128b4:	6983      	ldr	r3, [r0, #24]
 80128b6:	b90b      	cbnz	r3, 80128bc <_puts_r+0x10>
 80128b8:	f000 faa6 	bl	8012e08 <__sinit>
 80128bc:	69ab      	ldr	r3, [r5, #24]
 80128be:	68ac      	ldr	r4, [r5, #8]
 80128c0:	b913      	cbnz	r3, 80128c8 <_puts_r+0x1c>
 80128c2:	4628      	mov	r0, r5
 80128c4:	f000 faa0 	bl	8012e08 <__sinit>
 80128c8:	4b2c      	ldr	r3, [pc, #176]	; (801297c <_puts_r+0xd0>)
 80128ca:	429c      	cmp	r4, r3
 80128cc:	d120      	bne.n	8012910 <_puts_r+0x64>
 80128ce:	686c      	ldr	r4, [r5, #4]
 80128d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128d2:	07db      	lsls	r3, r3, #31
 80128d4:	d405      	bmi.n	80128e2 <_puts_r+0x36>
 80128d6:	89a3      	ldrh	r3, [r4, #12]
 80128d8:	0598      	lsls	r0, r3, #22
 80128da:	d402      	bmi.n	80128e2 <_puts_r+0x36>
 80128dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128de:	f000 fb43 	bl	8012f68 <__retarget_lock_acquire_recursive>
 80128e2:	89a3      	ldrh	r3, [r4, #12]
 80128e4:	0719      	lsls	r1, r3, #28
 80128e6:	d51d      	bpl.n	8012924 <_puts_r+0x78>
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	b1db      	cbz	r3, 8012924 <_puts_r+0x78>
 80128ec:	3e01      	subs	r6, #1
 80128ee:	68a3      	ldr	r3, [r4, #8]
 80128f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80128f4:	3b01      	subs	r3, #1
 80128f6:	60a3      	str	r3, [r4, #8]
 80128f8:	bb39      	cbnz	r1, 801294a <_puts_r+0x9e>
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da38      	bge.n	8012970 <_puts_r+0xc4>
 80128fe:	4622      	mov	r2, r4
 8012900:	210a      	movs	r1, #10
 8012902:	4628      	mov	r0, r5
 8012904:	f000 f888 	bl	8012a18 <__swbuf_r>
 8012908:	3001      	adds	r0, #1
 801290a:	d011      	beq.n	8012930 <_puts_r+0x84>
 801290c:	250a      	movs	r5, #10
 801290e:	e011      	b.n	8012934 <_puts_r+0x88>
 8012910:	4b1b      	ldr	r3, [pc, #108]	; (8012980 <_puts_r+0xd4>)
 8012912:	429c      	cmp	r4, r3
 8012914:	d101      	bne.n	801291a <_puts_r+0x6e>
 8012916:	68ac      	ldr	r4, [r5, #8]
 8012918:	e7da      	b.n	80128d0 <_puts_r+0x24>
 801291a:	4b1a      	ldr	r3, [pc, #104]	; (8012984 <_puts_r+0xd8>)
 801291c:	429c      	cmp	r4, r3
 801291e:	bf08      	it	eq
 8012920:	68ec      	ldreq	r4, [r5, #12]
 8012922:	e7d5      	b.n	80128d0 <_puts_r+0x24>
 8012924:	4621      	mov	r1, r4
 8012926:	4628      	mov	r0, r5
 8012928:	f000 f8c8 	bl	8012abc <__swsetup_r>
 801292c:	2800      	cmp	r0, #0
 801292e:	d0dd      	beq.n	80128ec <_puts_r+0x40>
 8012930:	f04f 35ff 	mov.w	r5, #4294967295
 8012934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012936:	07da      	lsls	r2, r3, #31
 8012938:	d405      	bmi.n	8012946 <_puts_r+0x9a>
 801293a:	89a3      	ldrh	r3, [r4, #12]
 801293c:	059b      	lsls	r3, r3, #22
 801293e:	d402      	bmi.n	8012946 <_puts_r+0x9a>
 8012940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012942:	f000 fb12 	bl	8012f6a <__retarget_lock_release_recursive>
 8012946:	4628      	mov	r0, r5
 8012948:	bd70      	pop	{r4, r5, r6, pc}
 801294a:	2b00      	cmp	r3, #0
 801294c:	da04      	bge.n	8012958 <_puts_r+0xac>
 801294e:	69a2      	ldr	r2, [r4, #24]
 8012950:	429a      	cmp	r2, r3
 8012952:	dc06      	bgt.n	8012962 <_puts_r+0xb6>
 8012954:	290a      	cmp	r1, #10
 8012956:	d004      	beq.n	8012962 <_puts_r+0xb6>
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	1c5a      	adds	r2, r3, #1
 801295c:	6022      	str	r2, [r4, #0]
 801295e:	7019      	strb	r1, [r3, #0]
 8012960:	e7c5      	b.n	80128ee <_puts_r+0x42>
 8012962:	4622      	mov	r2, r4
 8012964:	4628      	mov	r0, r5
 8012966:	f000 f857 	bl	8012a18 <__swbuf_r>
 801296a:	3001      	adds	r0, #1
 801296c:	d1bf      	bne.n	80128ee <_puts_r+0x42>
 801296e:	e7df      	b.n	8012930 <_puts_r+0x84>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	250a      	movs	r5, #10
 8012974:	1c5a      	adds	r2, r3, #1
 8012976:	6022      	str	r2, [r4, #0]
 8012978:	701d      	strb	r5, [r3, #0]
 801297a:	e7db      	b.n	8012934 <_puts_r+0x88>
 801297c:	08016618 	.word	0x08016618
 8012980:	08016638 	.word	0x08016638
 8012984:	080165f8 	.word	0x080165f8

08012988 <puts>:
 8012988:	4b02      	ldr	r3, [pc, #8]	; (8012994 <puts+0xc>)
 801298a:	4601      	mov	r1, r0
 801298c:	6818      	ldr	r0, [r3, #0]
 801298e:	f7ff bf8d 	b.w	80128ac <_puts_r>
 8012992:	bf00      	nop
 8012994:	20000024 	.word	0x20000024

08012998 <rand>:
 8012998:	4b17      	ldr	r3, [pc, #92]	; (80129f8 <rand+0x60>)
 801299a:	b510      	push	{r4, lr}
 801299c:	681c      	ldr	r4, [r3, #0]
 801299e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80129a0:	b9b3      	cbnz	r3, 80129d0 <rand+0x38>
 80129a2:	2018      	movs	r0, #24
 80129a4:	f000 fb46 	bl	8013034 <malloc>
 80129a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80129aa:	b928      	cbnz	r0, 80129b8 <rand+0x20>
 80129ac:	4602      	mov	r2, r0
 80129ae:	4b13      	ldr	r3, [pc, #76]	; (80129fc <rand+0x64>)
 80129b0:	4813      	ldr	r0, [pc, #76]	; (8012a00 <rand+0x68>)
 80129b2:	214e      	movs	r1, #78	; 0x4e
 80129b4:	f000 f8f0 	bl	8012b98 <__assert_func>
 80129b8:	4a12      	ldr	r2, [pc, #72]	; (8012a04 <rand+0x6c>)
 80129ba:	4b13      	ldr	r3, [pc, #76]	; (8012a08 <rand+0x70>)
 80129bc:	e9c0 2300 	strd	r2, r3, [r0]
 80129c0:	4b12      	ldr	r3, [pc, #72]	; (8012a0c <rand+0x74>)
 80129c2:	6083      	str	r3, [r0, #8]
 80129c4:	230b      	movs	r3, #11
 80129c6:	8183      	strh	r3, [r0, #12]
 80129c8:	2201      	movs	r2, #1
 80129ca:	2300      	movs	r3, #0
 80129cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80129d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80129d2:	480f      	ldr	r0, [pc, #60]	; (8012a10 <rand+0x78>)
 80129d4:	690a      	ldr	r2, [r1, #16]
 80129d6:	694b      	ldr	r3, [r1, #20]
 80129d8:	4c0e      	ldr	r4, [pc, #56]	; (8012a14 <rand+0x7c>)
 80129da:	4350      	muls	r0, r2
 80129dc:	fb04 0003 	mla	r0, r4, r3, r0
 80129e0:	fba2 3404 	umull	r3, r4, r2, r4
 80129e4:	1c5a      	adds	r2, r3, #1
 80129e6:	4404      	add	r4, r0
 80129e8:	f144 0000 	adc.w	r0, r4, #0
 80129ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80129f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80129f4:	bd10      	pop	{r4, pc}
 80129f6:	bf00      	nop
 80129f8:	20000024 	.word	0x20000024
 80129fc:	08016544 	.word	0x08016544
 8012a00:	0801655b 	.word	0x0801655b
 8012a04:	abcd330e 	.word	0xabcd330e
 8012a08:	e66d1234 	.word	0xe66d1234
 8012a0c:	0005deec 	.word	0x0005deec
 8012a10:	5851f42d 	.word	0x5851f42d
 8012a14:	4c957f2d 	.word	0x4c957f2d

08012a18 <__swbuf_r>:
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1a:	460e      	mov	r6, r1
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	4605      	mov	r5, r0
 8012a20:	b118      	cbz	r0, 8012a2a <__swbuf_r+0x12>
 8012a22:	6983      	ldr	r3, [r0, #24]
 8012a24:	b90b      	cbnz	r3, 8012a2a <__swbuf_r+0x12>
 8012a26:	f000 f9ef 	bl	8012e08 <__sinit>
 8012a2a:	4b21      	ldr	r3, [pc, #132]	; (8012ab0 <__swbuf_r+0x98>)
 8012a2c:	429c      	cmp	r4, r3
 8012a2e:	d12b      	bne.n	8012a88 <__swbuf_r+0x70>
 8012a30:	686c      	ldr	r4, [r5, #4]
 8012a32:	69a3      	ldr	r3, [r4, #24]
 8012a34:	60a3      	str	r3, [r4, #8]
 8012a36:	89a3      	ldrh	r3, [r4, #12]
 8012a38:	071a      	lsls	r2, r3, #28
 8012a3a:	d52f      	bpl.n	8012a9c <__swbuf_r+0x84>
 8012a3c:	6923      	ldr	r3, [r4, #16]
 8012a3e:	b36b      	cbz	r3, 8012a9c <__swbuf_r+0x84>
 8012a40:	6923      	ldr	r3, [r4, #16]
 8012a42:	6820      	ldr	r0, [r4, #0]
 8012a44:	1ac0      	subs	r0, r0, r3
 8012a46:	6963      	ldr	r3, [r4, #20]
 8012a48:	b2f6      	uxtb	r6, r6
 8012a4a:	4283      	cmp	r3, r0
 8012a4c:	4637      	mov	r7, r6
 8012a4e:	dc04      	bgt.n	8012a5a <__swbuf_r+0x42>
 8012a50:	4621      	mov	r1, r4
 8012a52:	4628      	mov	r0, r5
 8012a54:	f000 f944 	bl	8012ce0 <_fflush_r>
 8012a58:	bb30      	cbnz	r0, 8012aa8 <__swbuf_r+0x90>
 8012a5a:	68a3      	ldr	r3, [r4, #8]
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	60a3      	str	r3, [r4, #8]
 8012a60:	6823      	ldr	r3, [r4, #0]
 8012a62:	1c5a      	adds	r2, r3, #1
 8012a64:	6022      	str	r2, [r4, #0]
 8012a66:	701e      	strb	r6, [r3, #0]
 8012a68:	6963      	ldr	r3, [r4, #20]
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	4283      	cmp	r3, r0
 8012a6e:	d004      	beq.n	8012a7a <__swbuf_r+0x62>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	07db      	lsls	r3, r3, #31
 8012a74:	d506      	bpl.n	8012a84 <__swbuf_r+0x6c>
 8012a76:	2e0a      	cmp	r6, #10
 8012a78:	d104      	bne.n	8012a84 <__swbuf_r+0x6c>
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f000 f92f 	bl	8012ce0 <_fflush_r>
 8012a82:	b988      	cbnz	r0, 8012aa8 <__swbuf_r+0x90>
 8012a84:	4638      	mov	r0, r7
 8012a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a88:	4b0a      	ldr	r3, [pc, #40]	; (8012ab4 <__swbuf_r+0x9c>)
 8012a8a:	429c      	cmp	r4, r3
 8012a8c:	d101      	bne.n	8012a92 <__swbuf_r+0x7a>
 8012a8e:	68ac      	ldr	r4, [r5, #8]
 8012a90:	e7cf      	b.n	8012a32 <__swbuf_r+0x1a>
 8012a92:	4b09      	ldr	r3, [pc, #36]	; (8012ab8 <__swbuf_r+0xa0>)
 8012a94:	429c      	cmp	r4, r3
 8012a96:	bf08      	it	eq
 8012a98:	68ec      	ldreq	r4, [r5, #12]
 8012a9a:	e7ca      	b.n	8012a32 <__swbuf_r+0x1a>
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	f000 f80c 	bl	8012abc <__swsetup_r>
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d0cb      	beq.n	8012a40 <__swbuf_r+0x28>
 8012aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8012aac:	e7ea      	b.n	8012a84 <__swbuf_r+0x6c>
 8012aae:	bf00      	nop
 8012ab0:	08016618 	.word	0x08016618
 8012ab4:	08016638 	.word	0x08016638
 8012ab8:	080165f8 	.word	0x080165f8

08012abc <__swsetup_r>:
 8012abc:	4b32      	ldr	r3, [pc, #200]	; (8012b88 <__swsetup_r+0xcc>)
 8012abe:	b570      	push	{r4, r5, r6, lr}
 8012ac0:	681d      	ldr	r5, [r3, #0]
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	b125      	cbz	r5, 8012ad2 <__swsetup_r+0x16>
 8012ac8:	69ab      	ldr	r3, [r5, #24]
 8012aca:	b913      	cbnz	r3, 8012ad2 <__swsetup_r+0x16>
 8012acc:	4628      	mov	r0, r5
 8012ace:	f000 f99b 	bl	8012e08 <__sinit>
 8012ad2:	4b2e      	ldr	r3, [pc, #184]	; (8012b8c <__swsetup_r+0xd0>)
 8012ad4:	429c      	cmp	r4, r3
 8012ad6:	d10f      	bne.n	8012af8 <__swsetup_r+0x3c>
 8012ad8:	686c      	ldr	r4, [r5, #4]
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ae0:	0719      	lsls	r1, r3, #28
 8012ae2:	d42c      	bmi.n	8012b3e <__swsetup_r+0x82>
 8012ae4:	06dd      	lsls	r5, r3, #27
 8012ae6:	d411      	bmi.n	8012b0c <__swsetup_r+0x50>
 8012ae8:	2309      	movs	r3, #9
 8012aea:	6033      	str	r3, [r6, #0]
 8012aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012af0:	81a3      	strh	r3, [r4, #12]
 8012af2:	f04f 30ff 	mov.w	r0, #4294967295
 8012af6:	e03e      	b.n	8012b76 <__swsetup_r+0xba>
 8012af8:	4b25      	ldr	r3, [pc, #148]	; (8012b90 <__swsetup_r+0xd4>)
 8012afa:	429c      	cmp	r4, r3
 8012afc:	d101      	bne.n	8012b02 <__swsetup_r+0x46>
 8012afe:	68ac      	ldr	r4, [r5, #8]
 8012b00:	e7eb      	b.n	8012ada <__swsetup_r+0x1e>
 8012b02:	4b24      	ldr	r3, [pc, #144]	; (8012b94 <__swsetup_r+0xd8>)
 8012b04:	429c      	cmp	r4, r3
 8012b06:	bf08      	it	eq
 8012b08:	68ec      	ldreq	r4, [r5, #12]
 8012b0a:	e7e6      	b.n	8012ada <__swsetup_r+0x1e>
 8012b0c:	0758      	lsls	r0, r3, #29
 8012b0e:	d512      	bpl.n	8012b36 <__swsetup_r+0x7a>
 8012b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b12:	b141      	cbz	r1, 8012b26 <__swsetup_r+0x6a>
 8012b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b18:	4299      	cmp	r1, r3
 8012b1a:	d002      	beq.n	8012b22 <__swsetup_r+0x66>
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f000 fa91 	bl	8013044 <_free_r>
 8012b22:	2300      	movs	r3, #0
 8012b24:	6363      	str	r3, [r4, #52]	; 0x34
 8012b26:	89a3      	ldrh	r3, [r4, #12]
 8012b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b2c:	81a3      	strh	r3, [r4, #12]
 8012b2e:	2300      	movs	r3, #0
 8012b30:	6063      	str	r3, [r4, #4]
 8012b32:	6923      	ldr	r3, [r4, #16]
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	89a3      	ldrh	r3, [r4, #12]
 8012b38:	f043 0308 	orr.w	r3, r3, #8
 8012b3c:	81a3      	strh	r3, [r4, #12]
 8012b3e:	6923      	ldr	r3, [r4, #16]
 8012b40:	b94b      	cbnz	r3, 8012b56 <__swsetup_r+0x9a>
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b4c:	d003      	beq.n	8012b56 <__swsetup_r+0x9a>
 8012b4e:	4621      	mov	r1, r4
 8012b50:	4630      	mov	r0, r6
 8012b52:	f000 fa2f 	bl	8012fb4 <__smakebuf_r>
 8012b56:	89a0      	ldrh	r0, [r4, #12]
 8012b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b5c:	f010 0301 	ands.w	r3, r0, #1
 8012b60:	d00a      	beq.n	8012b78 <__swsetup_r+0xbc>
 8012b62:	2300      	movs	r3, #0
 8012b64:	60a3      	str	r3, [r4, #8]
 8012b66:	6963      	ldr	r3, [r4, #20]
 8012b68:	425b      	negs	r3, r3
 8012b6a:	61a3      	str	r3, [r4, #24]
 8012b6c:	6923      	ldr	r3, [r4, #16]
 8012b6e:	b943      	cbnz	r3, 8012b82 <__swsetup_r+0xc6>
 8012b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b74:	d1ba      	bne.n	8012aec <__swsetup_r+0x30>
 8012b76:	bd70      	pop	{r4, r5, r6, pc}
 8012b78:	0781      	lsls	r1, r0, #30
 8012b7a:	bf58      	it	pl
 8012b7c:	6963      	ldrpl	r3, [r4, #20]
 8012b7e:	60a3      	str	r3, [r4, #8]
 8012b80:	e7f4      	b.n	8012b6c <__swsetup_r+0xb0>
 8012b82:	2000      	movs	r0, #0
 8012b84:	e7f7      	b.n	8012b76 <__swsetup_r+0xba>
 8012b86:	bf00      	nop
 8012b88:	20000024 	.word	0x20000024
 8012b8c:	08016618 	.word	0x08016618
 8012b90:	08016638 	.word	0x08016638
 8012b94:	080165f8 	.word	0x080165f8

08012b98 <__assert_func>:
 8012b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b9a:	4614      	mov	r4, r2
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	4b09      	ldr	r3, [pc, #36]	; (8012bc4 <__assert_func+0x2c>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	68d8      	ldr	r0, [r3, #12]
 8012ba6:	b14c      	cbz	r4, 8012bbc <__assert_func+0x24>
 8012ba8:	4b07      	ldr	r3, [pc, #28]	; (8012bc8 <__assert_func+0x30>)
 8012baa:	9100      	str	r1, [sp, #0]
 8012bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012bb0:	4906      	ldr	r1, [pc, #24]	; (8012bcc <__assert_func+0x34>)
 8012bb2:	462b      	mov	r3, r5
 8012bb4:	f000 f9a6 	bl	8012f04 <fiprintf>
 8012bb8:	f000 fe42 	bl	8013840 <abort>
 8012bbc:	4b04      	ldr	r3, [pc, #16]	; (8012bd0 <__assert_func+0x38>)
 8012bbe:	461c      	mov	r4, r3
 8012bc0:	e7f3      	b.n	8012baa <__assert_func+0x12>
 8012bc2:	bf00      	nop
 8012bc4:	20000024 	.word	0x20000024
 8012bc8:	080165ba 	.word	0x080165ba
 8012bcc:	080165c7 	.word	0x080165c7
 8012bd0:	080165f5 	.word	0x080165f5

08012bd4 <__sflush_r>:
 8012bd4:	898a      	ldrh	r2, [r1, #12]
 8012bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bda:	4605      	mov	r5, r0
 8012bdc:	0710      	lsls	r0, r2, #28
 8012bde:	460c      	mov	r4, r1
 8012be0:	d458      	bmi.n	8012c94 <__sflush_r+0xc0>
 8012be2:	684b      	ldr	r3, [r1, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dc05      	bgt.n	8012bf4 <__sflush_r+0x20>
 8012be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	dc02      	bgt.n	8012bf4 <__sflush_r+0x20>
 8012bee:	2000      	movs	r0, #0
 8012bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bf6:	2e00      	cmp	r6, #0
 8012bf8:	d0f9      	beq.n	8012bee <__sflush_r+0x1a>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c00:	682f      	ldr	r7, [r5, #0]
 8012c02:	602b      	str	r3, [r5, #0]
 8012c04:	d032      	beq.n	8012c6c <__sflush_r+0x98>
 8012c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c08:	89a3      	ldrh	r3, [r4, #12]
 8012c0a:	075a      	lsls	r2, r3, #29
 8012c0c:	d505      	bpl.n	8012c1a <__sflush_r+0x46>
 8012c0e:	6863      	ldr	r3, [r4, #4]
 8012c10:	1ac0      	subs	r0, r0, r3
 8012c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c14:	b10b      	cbz	r3, 8012c1a <__sflush_r+0x46>
 8012c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c18:	1ac0      	subs	r0, r0, r3
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c20:	6a21      	ldr	r1, [r4, #32]
 8012c22:	4628      	mov	r0, r5
 8012c24:	47b0      	blx	r6
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	d106      	bne.n	8012c3a <__sflush_r+0x66>
 8012c2c:	6829      	ldr	r1, [r5, #0]
 8012c2e:	291d      	cmp	r1, #29
 8012c30:	d82c      	bhi.n	8012c8c <__sflush_r+0xb8>
 8012c32:	4a2a      	ldr	r2, [pc, #168]	; (8012cdc <__sflush_r+0x108>)
 8012c34:	40ca      	lsrs	r2, r1
 8012c36:	07d6      	lsls	r6, r2, #31
 8012c38:	d528      	bpl.n	8012c8c <__sflush_r+0xb8>
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	6062      	str	r2, [r4, #4]
 8012c3e:	04d9      	lsls	r1, r3, #19
 8012c40:	6922      	ldr	r2, [r4, #16]
 8012c42:	6022      	str	r2, [r4, #0]
 8012c44:	d504      	bpl.n	8012c50 <__sflush_r+0x7c>
 8012c46:	1c42      	adds	r2, r0, #1
 8012c48:	d101      	bne.n	8012c4e <__sflush_r+0x7a>
 8012c4a:	682b      	ldr	r3, [r5, #0]
 8012c4c:	b903      	cbnz	r3, 8012c50 <__sflush_r+0x7c>
 8012c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8012c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c52:	602f      	str	r7, [r5, #0]
 8012c54:	2900      	cmp	r1, #0
 8012c56:	d0ca      	beq.n	8012bee <__sflush_r+0x1a>
 8012c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c5c:	4299      	cmp	r1, r3
 8012c5e:	d002      	beq.n	8012c66 <__sflush_r+0x92>
 8012c60:	4628      	mov	r0, r5
 8012c62:	f000 f9ef 	bl	8013044 <_free_r>
 8012c66:	2000      	movs	r0, #0
 8012c68:	6360      	str	r0, [r4, #52]	; 0x34
 8012c6a:	e7c1      	b.n	8012bf0 <__sflush_r+0x1c>
 8012c6c:	6a21      	ldr	r1, [r4, #32]
 8012c6e:	2301      	movs	r3, #1
 8012c70:	4628      	mov	r0, r5
 8012c72:	47b0      	blx	r6
 8012c74:	1c41      	adds	r1, r0, #1
 8012c76:	d1c7      	bne.n	8012c08 <__sflush_r+0x34>
 8012c78:	682b      	ldr	r3, [r5, #0]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d0c4      	beq.n	8012c08 <__sflush_r+0x34>
 8012c7e:	2b1d      	cmp	r3, #29
 8012c80:	d001      	beq.n	8012c86 <__sflush_r+0xb2>
 8012c82:	2b16      	cmp	r3, #22
 8012c84:	d101      	bne.n	8012c8a <__sflush_r+0xb6>
 8012c86:	602f      	str	r7, [r5, #0]
 8012c88:	e7b1      	b.n	8012bee <__sflush_r+0x1a>
 8012c8a:	89a3      	ldrh	r3, [r4, #12]
 8012c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c90:	81a3      	strh	r3, [r4, #12]
 8012c92:	e7ad      	b.n	8012bf0 <__sflush_r+0x1c>
 8012c94:	690f      	ldr	r7, [r1, #16]
 8012c96:	2f00      	cmp	r7, #0
 8012c98:	d0a9      	beq.n	8012bee <__sflush_r+0x1a>
 8012c9a:	0793      	lsls	r3, r2, #30
 8012c9c:	680e      	ldr	r6, [r1, #0]
 8012c9e:	bf08      	it	eq
 8012ca0:	694b      	ldreq	r3, [r1, #20]
 8012ca2:	600f      	str	r7, [r1, #0]
 8012ca4:	bf18      	it	ne
 8012ca6:	2300      	movne	r3, #0
 8012ca8:	eba6 0807 	sub.w	r8, r6, r7
 8012cac:	608b      	str	r3, [r1, #8]
 8012cae:	f1b8 0f00 	cmp.w	r8, #0
 8012cb2:	dd9c      	ble.n	8012bee <__sflush_r+0x1a>
 8012cb4:	6a21      	ldr	r1, [r4, #32]
 8012cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cb8:	4643      	mov	r3, r8
 8012cba:	463a      	mov	r2, r7
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	47b0      	blx	r6
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	dc06      	bgt.n	8012cd2 <__sflush_r+0xfe>
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd0:	e78e      	b.n	8012bf0 <__sflush_r+0x1c>
 8012cd2:	4407      	add	r7, r0
 8012cd4:	eba8 0800 	sub.w	r8, r8, r0
 8012cd8:	e7e9      	b.n	8012cae <__sflush_r+0xda>
 8012cda:	bf00      	nop
 8012cdc:	20400001 	.word	0x20400001

08012ce0 <_fflush_r>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	690b      	ldr	r3, [r1, #16]
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	b913      	cbnz	r3, 8012cf0 <_fflush_r+0x10>
 8012cea:	2500      	movs	r5, #0
 8012cec:	4628      	mov	r0, r5
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	b118      	cbz	r0, 8012cfa <_fflush_r+0x1a>
 8012cf2:	6983      	ldr	r3, [r0, #24]
 8012cf4:	b90b      	cbnz	r3, 8012cfa <_fflush_r+0x1a>
 8012cf6:	f000 f887 	bl	8012e08 <__sinit>
 8012cfa:	4b14      	ldr	r3, [pc, #80]	; (8012d4c <_fflush_r+0x6c>)
 8012cfc:	429c      	cmp	r4, r3
 8012cfe:	d11b      	bne.n	8012d38 <_fflush_r+0x58>
 8012d00:	686c      	ldr	r4, [r5, #4]
 8012d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d0ef      	beq.n	8012cea <_fflush_r+0xa>
 8012d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d0c:	07d0      	lsls	r0, r2, #31
 8012d0e:	d404      	bmi.n	8012d1a <_fflush_r+0x3a>
 8012d10:	0599      	lsls	r1, r3, #22
 8012d12:	d402      	bmi.n	8012d1a <_fflush_r+0x3a>
 8012d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d16:	f000 f927 	bl	8012f68 <__retarget_lock_acquire_recursive>
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	4621      	mov	r1, r4
 8012d1e:	f7ff ff59 	bl	8012bd4 <__sflush_r>
 8012d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d24:	07da      	lsls	r2, r3, #31
 8012d26:	4605      	mov	r5, r0
 8012d28:	d4e0      	bmi.n	8012cec <_fflush_r+0xc>
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	059b      	lsls	r3, r3, #22
 8012d2e:	d4dd      	bmi.n	8012cec <_fflush_r+0xc>
 8012d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d32:	f000 f91a 	bl	8012f6a <__retarget_lock_release_recursive>
 8012d36:	e7d9      	b.n	8012cec <_fflush_r+0xc>
 8012d38:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <_fflush_r+0x70>)
 8012d3a:	429c      	cmp	r4, r3
 8012d3c:	d101      	bne.n	8012d42 <_fflush_r+0x62>
 8012d3e:	68ac      	ldr	r4, [r5, #8]
 8012d40:	e7df      	b.n	8012d02 <_fflush_r+0x22>
 8012d42:	4b04      	ldr	r3, [pc, #16]	; (8012d54 <_fflush_r+0x74>)
 8012d44:	429c      	cmp	r4, r3
 8012d46:	bf08      	it	eq
 8012d48:	68ec      	ldreq	r4, [r5, #12]
 8012d4a:	e7da      	b.n	8012d02 <_fflush_r+0x22>
 8012d4c:	08016618 	.word	0x08016618
 8012d50:	08016638 	.word	0x08016638
 8012d54:	080165f8 	.word	0x080165f8

08012d58 <std>:
 8012d58:	2300      	movs	r3, #0
 8012d5a:	b510      	push	{r4, lr}
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8012d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d66:	6083      	str	r3, [r0, #8]
 8012d68:	8181      	strh	r1, [r0, #12]
 8012d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8012d6c:	81c2      	strh	r2, [r0, #14]
 8012d6e:	6183      	str	r3, [r0, #24]
 8012d70:	4619      	mov	r1, r3
 8012d72:	2208      	movs	r2, #8
 8012d74:	305c      	adds	r0, #92	; 0x5c
 8012d76:	f7ff fd79 	bl	801286c <memset>
 8012d7a:	4b05      	ldr	r3, [pc, #20]	; (8012d90 <std+0x38>)
 8012d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8012d7e:	4b05      	ldr	r3, [pc, #20]	; (8012d94 <std+0x3c>)
 8012d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d82:	4b05      	ldr	r3, [pc, #20]	; (8012d98 <std+0x40>)
 8012d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d86:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <std+0x44>)
 8012d88:	6224      	str	r4, [r4, #32]
 8012d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8012d8c:	bd10      	pop	{r4, pc}
 8012d8e:	bf00      	nop
 8012d90:	08013795 	.word	0x08013795
 8012d94:	080137b7 	.word	0x080137b7
 8012d98:	080137ef 	.word	0x080137ef
 8012d9c:	08013813 	.word	0x08013813

08012da0 <_cleanup_r>:
 8012da0:	4901      	ldr	r1, [pc, #4]	; (8012da8 <_cleanup_r+0x8>)
 8012da2:	f000 b8c1 	b.w	8012f28 <_fwalk_reent>
 8012da6:	bf00      	nop
 8012da8:	08012ce1 	.word	0x08012ce1

08012dac <__sfmoreglue>:
 8012dac:	b570      	push	{r4, r5, r6, lr}
 8012dae:	1e4a      	subs	r2, r1, #1
 8012db0:	2568      	movs	r5, #104	; 0x68
 8012db2:	4355      	muls	r5, r2
 8012db4:	460e      	mov	r6, r1
 8012db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012dba:	f000 f993 	bl	80130e4 <_malloc_r>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	b140      	cbz	r0, 8012dd4 <__sfmoreglue+0x28>
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8012dc8:	300c      	adds	r0, #12
 8012dca:	60a0      	str	r0, [r4, #8]
 8012dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dd0:	f7ff fd4c 	bl	801286c <memset>
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}

08012dd8 <__sfp_lock_acquire>:
 8012dd8:	4801      	ldr	r0, [pc, #4]	; (8012de0 <__sfp_lock_acquire+0x8>)
 8012dda:	f000 b8c5 	b.w	8012f68 <__retarget_lock_acquire_recursive>
 8012dde:	bf00      	nop
 8012de0:	2001166c 	.word	0x2001166c

08012de4 <__sfp_lock_release>:
 8012de4:	4801      	ldr	r0, [pc, #4]	; (8012dec <__sfp_lock_release+0x8>)
 8012de6:	f000 b8c0 	b.w	8012f6a <__retarget_lock_release_recursive>
 8012dea:	bf00      	nop
 8012dec:	2001166c 	.word	0x2001166c

08012df0 <__sinit_lock_acquire>:
 8012df0:	4801      	ldr	r0, [pc, #4]	; (8012df8 <__sinit_lock_acquire+0x8>)
 8012df2:	f000 b8b9 	b.w	8012f68 <__retarget_lock_acquire_recursive>
 8012df6:	bf00      	nop
 8012df8:	20011667 	.word	0x20011667

08012dfc <__sinit_lock_release>:
 8012dfc:	4801      	ldr	r0, [pc, #4]	; (8012e04 <__sinit_lock_release+0x8>)
 8012dfe:	f000 b8b4 	b.w	8012f6a <__retarget_lock_release_recursive>
 8012e02:	bf00      	nop
 8012e04:	20011667 	.word	0x20011667

08012e08 <__sinit>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	f7ff fff0 	bl	8012df0 <__sinit_lock_acquire>
 8012e10:	69a3      	ldr	r3, [r4, #24]
 8012e12:	b11b      	cbz	r3, 8012e1c <__sinit+0x14>
 8012e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e18:	f7ff bff0 	b.w	8012dfc <__sinit_lock_release>
 8012e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e20:	6523      	str	r3, [r4, #80]	; 0x50
 8012e22:	4b13      	ldr	r3, [pc, #76]	; (8012e70 <__sinit+0x68>)
 8012e24:	4a13      	ldr	r2, [pc, #76]	; (8012e74 <__sinit+0x6c>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e2a:	42a3      	cmp	r3, r4
 8012e2c:	bf04      	itt	eq
 8012e2e:	2301      	moveq	r3, #1
 8012e30:	61a3      	streq	r3, [r4, #24]
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 f820 	bl	8012e78 <__sfp>
 8012e38:	6060      	str	r0, [r4, #4]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f81c 	bl	8012e78 <__sfp>
 8012e40:	60a0      	str	r0, [r4, #8]
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 f818 	bl	8012e78 <__sfp>
 8012e48:	2200      	movs	r2, #0
 8012e4a:	60e0      	str	r0, [r4, #12]
 8012e4c:	2104      	movs	r1, #4
 8012e4e:	6860      	ldr	r0, [r4, #4]
 8012e50:	f7ff ff82 	bl	8012d58 <std>
 8012e54:	68a0      	ldr	r0, [r4, #8]
 8012e56:	2201      	movs	r2, #1
 8012e58:	2109      	movs	r1, #9
 8012e5a:	f7ff ff7d 	bl	8012d58 <std>
 8012e5e:	68e0      	ldr	r0, [r4, #12]
 8012e60:	2202      	movs	r2, #2
 8012e62:	2112      	movs	r1, #18
 8012e64:	f7ff ff78 	bl	8012d58 <std>
 8012e68:	2301      	movs	r3, #1
 8012e6a:	61a3      	str	r3, [r4, #24]
 8012e6c:	e7d2      	b.n	8012e14 <__sinit+0xc>
 8012e6e:	bf00      	nop
 8012e70:	08016540 	.word	0x08016540
 8012e74:	08012da1 	.word	0x08012da1

08012e78 <__sfp>:
 8012e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7a:	4607      	mov	r7, r0
 8012e7c:	f7ff ffac 	bl	8012dd8 <__sfp_lock_acquire>
 8012e80:	4b1e      	ldr	r3, [pc, #120]	; (8012efc <__sfp+0x84>)
 8012e82:	681e      	ldr	r6, [r3, #0]
 8012e84:	69b3      	ldr	r3, [r6, #24]
 8012e86:	b913      	cbnz	r3, 8012e8e <__sfp+0x16>
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f7ff ffbd 	bl	8012e08 <__sinit>
 8012e8e:	3648      	adds	r6, #72	; 0x48
 8012e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e94:	3b01      	subs	r3, #1
 8012e96:	d503      	bpl.n	8012ea0 <__sfp+0x28>
 8012e98:	6833      	ldr	r3, [r6, #0]
 8012e9a:	b30b      	cbz	r3, 8012ee0 <__sfp+0x68>
 8012e9c:	6836      	ldr	r6, [r6, #0]
 8012e9e:	e7f7      	b.n	8012e90 <__sfp+0x18>
 8012ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ea4:	b9d5      	cbnz	r5, 8012edc <__sfp+0x64>
 8012ea6:	4b16      	ldr	r3, [pc, #88]	; (8012f00 <__sfp+0x88>)
 8012ea8:	60e3      	str	r3, [r4, #12]
 8012eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012eae:	6665      	str	r5, [r4, #100]	; 0x64
 8012eb0:	f000 f859 	bl	8012f66 <__retarget_lock_init_recursive>
 8012eb4:	f7ff ff96 	bl	8012de4 <__sfp_lock_release>
 8012eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ec0:	6025      	str	r5, [r4, #0]
 8012ec2:	61a5      	str	r5, [r4, #24]
 8012ec4:	2208      	movs	r2, #8
 8012ec6:	4629      	mov	r1, r5
 8012ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ecc:	f7ff fcce 	bl	801286c <memset>
 8012ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ed8:	4620      	mov	r0, r4
 8012eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012edc:	3468      	adds	r4, #104	; 0x68
 8012ede:	e7d9      	b.n	8012e94 <__sfp+0x1c>
 8012ee0:	2104      	movs	r1, #4
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	f7ff ff62 	bl	8012dac <__sfmoreglue>
 8012ee8:	4604      	mov	r4, r0
 8012eea:	6030      	str	r0, [r6, #0]
 8012eec:	2800      	cmp	r0, #0
 8012eee:	d1d5      	bne.n	8012e9c <__sfp+0x24>
 8012ef0:	f7ff ff78 	bl	8012de4 <__sfp_lock_release>
 8012ef4:	230c      	movs	r3, #12
 8012ef6:	603b      	str	r3, [r7, #0]
 8012ef8:	e7ee      	b.n	8012ed8 <__sfp+0x60>
 8012efa:	bf00      	nop
 8012efc:	08016540 	.word	0x08016540
 8012f00:	ffff0001 	.word	0xffff0001

08012f04 <fiprintf>:
 8012f04:	b40e      	push	{r1, r2, r3}
 8012f06:	b503      	push	{r0, r1, lr}
 8012f08:	4601      	mov	r1, r0
 8012f0a:	ab03      	add	r3, sp, #12
 8012f0c:	4805      	ldr	r0, [pc, #20]	; (8012f24 <fiprintf+0x20>)
 8012f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f12:	6800      	ldr	r0, [r0, #0]
 8012f14:	9301      	str	r3, [sp, #4]
 8012f16:	f000 f969 	bl	80131ec <_vfiprintf_r>
 8012f1a:	b002      	add	sp, #8
 8012f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f20:	b003      	add	sp, #12
 8012f22:	4770      	bx	lr
 8012f24:	20000024 	.word	0x20000024

08012f28 <_fwalk_reent>:
 8012f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	4688      	mov	r8, r1
 8012f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f34:	2700      	movs	r7, #0
 8012f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8012f3e:	d505      	bpl.n	8012f4c <_fwalk_reent+0x24>
 8012f40:	6824      	ldr	r4, [r4, #0]
 8012f42:	2c00      	cmp	r4, #0
 8012f44:	d1f7      	bne.n	8012f36 <_fwalk_reent+0xe>
 8012f46:	4638      	mov	r0, r7
 8012f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f4c:	89ab      	ldrh	r3, [r5, #12]
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d907      	bls.n	8012f62 <_fwalk_reent+0x3a>
 8012f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f56:	3301      	adds	r3, #1
 8012f58:	d003      	beq.n	8012f62 <_fwalk_reent+0x3a>
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	47c0      	blx	r8
 8012f60:	4307      	orrs	r7, r0
 8012f62:	3568      	adds	r5, #104	; 0x68
 8012f64:	e7e9      	b.n	8012f3a <_fwalk_reent+0x12>

08012f66 <__retarget_lock_init_recursive>:
 8012f66:	4770      	bx	lr

08012f68 <__retarget_lock_acquire_recursive>:
 8012f68:	4770      	bx	lr

08012f6a <__retarget_lock_release_recursive>:
 8012f6a:	4770      	bx	lr

08012f6c <__swhatbuf_r>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	460e      	mov	r6, r1
 8012f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f74:	2900      	cmp	r1, #0
 8012f76:	b096      	sub	sp, #88	; 0x58
 8012f78:	4614      	mov	r4, r2
 8012f7a:	461d      	mov	r5, r3
 8012f7c:	da07      	bge.n	8012f8e <__swhatbuf_r+0x22>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	602b      	str	r3, [r5, #0]
 8012f82:	89b3      	ldrh	r3, [r6, #12]
 8012f84:	061a      	lsls	r2, r3, #24
 8012f86:	d410      	bmi.n	8012faa <__swhatbuf_r+0x3e>
 8012f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f8c:	e00e      	b.n	8012fac <__swhatbuf_r+0x40>
 8012f8e:	466a      	mov	r2, sp
 8012f90:	f000 fc6e 	bl	8013870 <_fstat_r>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	dbf2      	blt.n	8012f7e <__swhatbuf_r+0x12>
 8012f98:	9a01      	ldr	r2, [sp, #4]
 8012f9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012fa2:	425a      	negs	r2, r3
 8012fa4:	415a      	adcs	r2, r3
 8012fa6:	602a      	str	r2, [r5, #0]
 8012fa8:	e7ee      	b.n	8012f88 <__swhatbuf_r+0x1c>
 8012faa:	2340      	movs	r3, #64	; 0x40
 8012fac:	2000      	movs	r0, #0
 8012fae:	6023      	str	r3, [r4, #0]
 8012fb0:	b016      	add	sp, #88	; 0x58
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}

08012fb4 <__smakebuf_r>:
 8012fb4:	898b      	ldrh	r3, [r1, #12]
 8012fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fb8:	079d      	lsls	r5, r3, #30
 8012fba:	4606      	mov	r6, r0
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	d507      	bpl.n	8012fd0 <__smakebuf_r+0x1c>
 8012fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	6123      	str	r3, [r4, #16]
 8012fc8:	2301      	movs	r3, #1
 8012fca:	6163      	str	r3, [r4, #20]
 8012fcc:	b002      	add	sp, #8
 8012fce:	bd70      	pop	{r4, r5, r6, pc}
 8012fd0:	ab01      	add	r3, sp, #4
 8012fd2:	466a      	mov	r2, sp
 8012fd4:	f7ff ffca 	bl	8012f6c <__swhatbuf_r>
 8012fd8:	9900      	ldr	r1, [sp, #0]
 8012fda:	4605      	mov	r5, r0
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f000 f881 	bl	80130e4 <_malloc_r>
 8012fe2:	b948      	cbnz	r0, 8012ff8 <__smakebuf_r+0x44>
 8012fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fe8:	059a      	lsls	r2, r3, #22
 8012fea:	d4ef      	bmi.n	8012fcc <__smakebuf_r+0x18>
 8012fec:	f023 0303 	bic.w	r3, r3, #3
 8012ff0:	f043 0302 	orr.w	r3, r3, #2
 8012ff4:	81a3      	strh	r3, [r4, #12]
 8012ff6:	e7e3      	b.n	8012fc0 <__smakebuf_r+0xc>
 8012ff8:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <__smakebuf_r+0x7c>)
 8012ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ffc:	89a3      	ldrh	r3, [r4, #12]
 8012ffe:	6020      	str	r0, [r4, #0]
 8013000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013004:	81a3      	strh	r3, [r4, #12]
 8013006:	9b00      	ldr	r3, [sp, #0]
 8013008:	6163      	str	r3, [r4, #20]
 801300a:	9b01      	ldr	r3, [sp, #4]
 801300c:	6120      	str	r0, [r4, #16]
 801300e:	b15b      	cbz	r3, 8013028 <__smakebuf_r+0x74>
 8013010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013014:	4630      	mov	r0, r6
 8013016:	f000 fc3d 	bl	8013894 <_isatty_r>
 801301a:	b128      	cbz	r0, 8013028 <__smakebuf_r+0x74>
 801301c:	89a3      	ldrh	r3, [r4, #12]
 801301e:	f023 0303 	bic.w	r3, r3, #3
 8013022:	f043 0301 	orr.w	r3, r3, #1
 8013026:	81a3      	strh	r3, [r4, #12]
 8013028:	89a0      	ldrh	r0, [r4, #12]
 801302a:	4305      	orrs	r5, r0
 801302c:	81a5      	strh	r5, [r4, #12]
 801302e:	e7cd      	b.n	8012fcc <__smakebuf_r+0x18>
 8013030:	08012da1 	.word	0x08012da1

08013034 <malloc>:
 8013034:	4b02      	ldr	r3, [pc, #8]	; (8013040 <malloc+0xc>)
 8013036:	4601      	mov	r1, r0
 8013038:	6818      	ldr	r0, [r3, #0]
 801303a:	f000 b853 	b.w	80130e4 <_malloc_r>
 801303e:	bf00      	nop
 8013040:	20000024 	.word	0x20000024

08013044 <_free_r>:
 8013044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013046:	2900      	cmp	r1, #0
 8013048:	d048      	beq.n	80130dc <_free_r+0x98>
 801304a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801304e:	9001      	str	r0, [sp, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	f1a1 0404 	sub.w	r4, r1, #4
 8013056:	bfb8      	it	lt
 8013058:	18e4      	addlt	r4, r4, r3
 801305a:	f000 fc3d 	bl	80138d8 <__malloc_lock>
 801305e:	4a20      	ldr	r2, [pc, #128]	; (80130e0 <_free_r+0x9c>)
 8013060:	9801      	ldr	r0, [sp, #4]
 8013062:	6813      	ldr	r3, [r2, #0]
 8013064:	4615      	mov	r5, r2
 8013066:	b933      	cbnz	r3, 8013076 <_free_r+0x32>
 8013068:	6063      	str	r3, [r4, #4]
 801306a:	6014      	str	r4, [r2, #0]
 801306c:	b003      	add	sp, #12
 801306e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013072:	f000 bc37 	b.w	80138e4 <__malloc_unlock>
 8013076:	42a3      	cmp	r3, r4
 8013078:	d90b      	bls.n	8013092 <_free_r+0x4e>
 801307a:	6821      	ldr	r1, [r4, #0]
 801307c:	1862      	adds	r2, r4, r1
 801307e:	4293      	cmp	r3, r2
 8013080:	bf04      	itt	eq
 8013082:	681a      	ldreq	r2, [r3, #0]
 8013084:	685b      	ldreq	r3, [r3, #4]
 8013086:	6063      	str	r3, [r4, #4]
 8013088:	bf04      	itt	eq
 801308a:	1852      	addeq	r2, r2, r1
 801308c:	6022      	streq	r2, [r4, #0]
 801308e:	602c      	str	r4, [r5, #0]
 8013090:	e7ec      	b.n	801306c <_free_r+0x28>
 8013092:	461a      	mov	r2, r3
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	b10b      	cbz	r3, 801309c <_free_r+0x58>
 8013098:	42a3      	cmp	r3, r4
 801309a:	d9fa      	bls.n	8013092 <_free_r+0x4e>
 801309c:	6811      	ldr	r1, [r2, #0]
 801309e:	1855      	adds	r5, r2, r1
 80130a0:	42a5      	cmp	r5, r4
 80130a2:	d10b      	bne.n	80130bc <_free_r+0x78>
 80130a4:	6824      	ldr	r4, [r4, #0]
 80130a6:	4421      	add	r1, r4
 80130a8:	1854      	adds	r4, r2, r1
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	6011      	str	r1, [r2, #0]
 80130ae:	d1dd      	bne.n	801306c <_free_r+0x28>
 80130b0:	681c      	ldr	r4, [r3, #0]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	6053      	str	r3, [r2, #4]
 80130b6:	4421      	add	r1, r4
 80130b8:	6011      	str	r1, [r2, #0]
 80130ba:	e7d7      	b.n	801306c <_free_r+0x28>
 80130bc:	d902      	bls.n	80130c4 <_free_r+0x80>
 80130be:	230c      	movs	r3, #12
 80130c0:	6003      	str	r3, [r0, #0]
 80130c2:	e7d3      	b.n	801306c <_free_r+0x28>
 80130c4:	6825      	ldr	r5, [r4, #0]
 80130c6:	1961      	adds	r1, r4, r5
 80130c8:	428b      	cmp	r3, r1
 80130ca:	bf04      	itt	eq
 80130cc:	6819      	ldreq	r1, [r3, #0]
 80130ce:	685b      	ldreq	r3, [r3, #4]
 80130d0:	6063      	str	r3, [r4, #4]
 80130d2:	bf04      	itt	eq
 80130d4:	1949      	addeq	r1, r1, r5
 80130d6:	6021      	streq	r1, [r4, #0]
 80130d8:	6054      	str	r4, [r2, #4]
 80130da:	e7c7      	b.n	801306c <_free_r+0x28>
 80130dc:	b003      	add	sp, #12
 80130de:	bd30      	pop	{r4, r5, pc}
 80130e0:	200009d0 	.word	0x200009d0

080130e4 <_malloc_r>:
 80130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e6:	1ccd      	adds	r5, r1, #3
 80130e8:	f025 0503 	bic.w	r5, r5, #3
 80130ec:	3508      	adds	r5, #8
 80130ee:	2d0c      	cmp	r5, #12
 80130f0:	bf38      	it	cc
 80130f2:	250c      	movcc	r5, #12
 80130f4:	2d00      	cmp	r5, #0
 80130f6:	4606      	mov	r6, r0
 80130f8:	db01      	blt.n	80130fe <_malloc_r+0x1a>
 80130fa:	42a9      	cmp	r1, r5
 80130fc:	d903      	bls.n	8013106 <_malloc_r+0x22>
 80130fe:	230c      	movs	r3, #12
 8013100:	6033      	str	r3, [r6, #0]
 8013102:	2000      	movs	r0, #0
 8013104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013106:	f000 fbe7 	bl	80138d8 <__malloc_lock>
 801310a:	4921      	ldr	r1, [pc, #132]	; (8013190 <_malloc_r+0xac>)
 801310c:	680a      	ldr	r2, [r1, #0]
 801310e:	4614      	mov	r4, r2
 8013110:	b99c      	cbnz	r4, 801313a <_malloc_r+0x56>
 8013112:	4f20      	ldr	r7, [pc, #128]	; (8013194 <_malloc_r+0xb0>)
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	b923      	cbnz	r3, 8013122 <_malloc_r+0x3e>
 8013118:	4621      	mov	r1, r4
 801311a:	4630      	mov	r0, r6
 801311c:	f000 fb2a 	bl	8013774 <_sbrk_r>
 8013120:	6038      	str	r0, [r7, #0]
 8013122:	4629      	mov	r1, r5
 8013124:	4630      	mov	r0, r6
 8013126:	f000 fb25 	bl	8013774 <_sbrk_r>
 801312a:	1c43      	adds	r3, r0, #1
 801312c:	d123      	bne.n	8013176 <_malloc_r+0x92>
 801312e:	230c      	movs	r3, #12
 8013130:	6033      	str	r3, [r6, #0]
 8013132:	4630      	mov	r0, r6
 8013134:	f000 fbd6 	bl	80138e4 <__malloc_unlock>
 8013138:	e7e3      	b.n	8013102 <_malloc_r+0x1e>
 801313a:	6823      	ldr	r3, [r4, #0]
 801313c:	1b5b      	subs	r3, r3, r5
 801313e:	d417      	bmi.n	8013170 <_malloc_r+0x8c>
 8013140:	2b0b      	cmp	r3, #11
 8013142:	d903      	bls.n	801314c <_malloc_r+0x68>
 8013144:	6023      	str	r3, [r4, #0]
 8013146:	441c      	add	r4, r3
 8013148:	6025      	str	r5, [r4, #0]
 801314a:	e004      	b.n	8013156 <_malloc_r+0x72>
 801314c:	6863      	ldr	r3, [r4, #4]
 801314e:	42a2      	cmp	r2, r4
 8013150:	bf0c      	ite	eq
 8013152:	600b      	streq	r3, [r1, #0]
 8013154:	6053      	strne	r3, [r2, #4]
 8013156:	4630      	mov	r0, r6
 8013158:	f000 fbc4 	bl	80138e4 <__malloc_unlock>
 801315c:	f104 000b 	add.w	r0, r4, #11
 8013160:	1d23      	adds	r3, r4, #4
 8013162:	f020 0007 	bic.w	r0, r0, #7
 8013166:	1ac2      	subs	r2, r0, r3
 8013168:	d0cc      	beq.n	8013104 <_malloc_r+0x20>
 801316a:	1a1b      	subs	r3, r3, r0
 801316c:	50a3      	str	r3, [r4, r2]
 801316e:	e7c9      	b.n	8013104 <_malloc_r+0x20>
 8013170:	4622      	mov	r2, r4
 8013172:	6864      	ldr	r4, [r4, #4]
 8013174:	e7cc      	b.n	8013110 <_malloc_r+0x2c>
 8013176:	1cc4      	adds	r4, r0, #3
 8013178:	f024 0403 	bic.w	r4, r4, #3
 801317c:	42a0      	cmp	r0, r4
 801317e:	d0e3      	beq.n	8013148 <_malloc_r+0x64>
 8013180:	1a21      	subs	r1, r4, r0
 8013182:	4630      	mov	r0, r6
 8013184:	f000 faf6 	bl	8013774 <_sbrk_r>
 8013188:	3001      	adds	r0, #1
 801318a:	d1dd      	bne.n	8013148 <_malloc_r+0x64>
 801318c:	e7cf      	b.n	801312e <_malloc_r+0x4a>
 801318e:	bf00      	nop
 8013190:	200009d0 	.word	0x200009d0
 8013194:	200009d4 	.word	0x200009d4

08013198 <__sfputc_r>:
 8013198:	6893      	ldr	r3, [r2, #8]
 801319a:	3b01      	subs	r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	b410      	push	{r4}
 80131a0:	6093      	str	r3, [r2, #8]
 80131a2:	da08      	bge.n	80131b6 <__sfputc_r+0x1e>
 80131a4:	6994      	ldr	r4, [r2, #24]
 80131a6:	42a3      	cmp	r3, r4
 80131a8:	db01      	blt.n	80131ae <__sfputc_r+0x16>
 80131aa:	290a      	cmp	r1, #10
 80131ac:	d103      	bne.n	80131b6 <__sfputc_r+0x1e>
 80131ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131b2:	f7ff bc31 	b.w	8012a18 <__swbuf_r>
 80131b6:	6813      	ldr	r3, [r2, #0]
 80131b8:	1c58      	adds	r0, r3, #1
 80131ba:	6010      	str	r0, [r2, #0]
 80131bc:	7019      	strb	r1, [r3, #0]
 80131be:	4608      	mov	r0, r1
 80131c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131c4:	4770      	bx	lr

080131c6 <__sfputs_r>:
 80131c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c8:	4606      	mov	r6, r0
 80131ca:	460f      	mov	r7, r1
 80131cc:	4614      	mov	r4, r2
 80131ce:	18d5      	adds	r5, r2, r3
 80131d0:	42ac      	cmp	r4, r5
 80131d2:	d101      	bne.n	80131d8 <__sfputs_r+0x12>
 80131d4:	2000      	movs	r0, #0
 80131d6:	e007      	b.n	80131e8 <__sfputs_r+0x22>
 80131d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131dc:	463a      	mov	r2, r7
 80131de:	4630      	mov	r0, r6
 80131e0:	f7ff ffda 	bl	8013198 <__sfputc_r>
 80131e4:	1c43      	adds	r3, r0, #1
 80131e6:	d1f3      	bne.n	80131d0 <__sfputs_r+0xa>
 80131e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131ec <_vfiprintf_r>:
 80131ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f0:	460d      	mov	r5, r1
 80131f2:	b09d      	sub	sp, #116	; 0x74
 80131f4:	4614      	mov	r4, r2
 80131f6:	4698      	mov	r8, r3
 80131f8:	4606      	mov	r6, r0
 80131fa:	b118      	cbz	r0, 8013204 <_vfiprintf_r+0x18>
 80131fc:	6983      	ldr	r3, [r0, #24]
 80131fe:	b90b      	cbnz	r3, 8013204 <_vfiprintf_r+0x18>
 8013200:	f7ff fe02 	bl	8012e08 <__sinit>
 8013204:	4b89      	ldr	r3, [pc, #548]	; (801342c <_vfiprintf_r+0x240>)
 8013206:	429d      	cmp	r5, r3
 8013208:	d11b      	bne.n	8013242 <_vfiprintf_r+0x56>
 801320a:	6875      	ldr	r5, [r6, #4]
 801320c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801320e:	07d9      	lsls	r1, r3, #31
 8013210:	d405      	bmi.n	801321e <_vfiprintf_r+0x32>
 8013212:	89ab      	ldrh	r3, [r5, #12]
 8013214:	059a      	lsls	r2, r3, #22
 8013216:	d402      	bmi.n	801321e <_vfiprintf_r+0x32>
 8013218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801321a:	f7ff fea5 	bl	8012f68 <__retarget_lock_acquire_recursive>
 801321e:	89ab      	ldrh	r3, [r5, #12]
 8013220:	071b      	lsls	r3, r3, #28
 8013222:	d501      	bpl.n	8013228 <_vfiprintf_r+0x3c>
 8013224:	692b      	ldr	r3, [r5, #16]
 8013226:	b9eb      	cbnz	r3, 8013264 <_vfiprintf_r+0x78>
 8013228:	4629      	mov	r1, r5
 801322a:	4630      	mov	r0, r6
 801322c:	f7ff fc46 	bl	8012abc <__swsetup_r>
 8013230:	b1c0      	cbz	r0, 8013264 <_vfiprintf_r+0x78>
 8013232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013234:	07dc      	lsls	r4, r3, #31
 8013236:	d50e      	bpl.n	8013256 <_vfiprintf_r+0x6a>
 8013238:	f04f 30ff 	mov.w	r0, #4294967295
 801323c:	b01d      	add	sp, #116	; 0x74
 801323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013242:	4b7b      	ldr	r3, [pc, #492]	; (8013430 <_vfiprintf_r+0x244>)
 8013244:	429d      	cmp	r5, r3
 8013246:	d101      	bne.n	801324c <_vfiprintf_r+0x60>
 8013248:	68b5      	ldr	r5, [r6, #8]
 801324a:	e7df      	b.n	801320c <_vfiprintf_r+0x20>
 801324c:	4b79      	ldr	r3, [pc, #484]	; (8013434 <_vfiprintf_r+0x248>)
 801324e:	429d      	cmp	r5, r3
 8013250:	bf08      	it	eq
 8013252:	68f5      	ldreq	r5, [r6, #12]
 8013254:	e7da      	b.n	801320c <_vfiprintf_r+0x20>
 8013256:	89ab      	ldrh	r3, [r5, #12]
 8013258:	0598      	lsls	r0, r3, #22
 801325a:	d4ed      	bmi.n	8013238 <_vfiprintf_r+0x4c>
 801325c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801325e:	f7ff fe84 	bl	8012f6a <__retarget_lock_release_recursive>
 8013262:	e7e9      	b.n	8013238 <_vfiprintf_r+0x4c>
 8013264:	2300      	movs	r3, #0
 8013266:	9309      	str	r3, [sp, #36]	; 0x24
 8013268:	2320      	movs	r3, #32
 801326a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801326e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013272:	2330      	movs	r3, #48	; 0x30
 8013274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013438 <_vfiprintf_r+0x24c>
 8013278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801327c:	f04f 0901 	mov.w	r9, #1
 8013280:	4623      	mov	r3, r4
 8013282:	469a      	mov	sl, r3
 8013284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013288:	b10a      	cbz	r2, 801328e <_vfiprintf_r+0xa2>
 801328a:	2a25      	cmp	r2, #37	; 0x25
 801328c:	d1f9      	bne.n	8013282 <_vfiprintf_r+0x96>
 801328e:	ebba 0b04 	subs.w	fp, sl, r4
 8013292:	d00b      	beq.n	80132ac <_vfiprintf_r+0xc0>
 8013294:	465b      	mov	r3, fp
 8013296:	4622      	mov	r2, r4
 8013298:	4629      	mov	r1, r5
 801329a:	4630      	mov	r0, r6
 801329c:	f7ff ff93 	bl	80131c6 <__sfputs_r>
 80132a0:	3001      	adds	r0, #1
 80132a2:	f000 80aa 	beq.w	80133fa <_vfiprintf_r+0x20e>
 80132a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132a8:	445a      	add	r2, fp
 80132aa:	9209      	str	r2, [sp, #36]	; 0x24
 80132ac:	f89a 3000 	ldrb.w	r3, [sl]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f000 80a2 	beq.w	80133fa <_vfiprintf_r+0x20e>
 80132b6:	2300      	movs	r3, #0
 80132b8:	f04f 32ff 	mov.w	r2, #4294967295
 80132bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132c0:	f10a 0a01 	add.w	sl, sl, #1
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	9307      	str	r3, [sp, #28]
 80132c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132cc:	931a      	str	r3, [sp, #104]	; 0x68
 80132ce:	4654      	mov	r4, sl
 80132d0:	2205      	movs	r2, #5
 80132d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132d6:	4858      	ldr	r0, [pc, #352]	; (8013438 <_vfiprintf_r+0x24c>)
 80132d8:	f7ec ff7a 	bl	80001d0 <memchr>
 80132dc:	9a04      	ldr	r2, [sp, #16]
 80132de:	b9d8      	cbnz	r0, 8013318 <_vfiprintf_r+0x12c>
 80132e0:	06d1      	lsls	r1, r2, #27
 80132e2:	bf44      	itt	mi
 80132e4:	2320      	movmi	r3, #32
 80132e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132ea:	0713      	lsls	r3, r2, #28
 80132ec:	bf44      	itt	mi
 80132ee:	232b      	movmi	r3, #43	; 0x2b
 80132f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132f4:	f89a 3000 	ldrb.w	r3, [sl]
 80132f8:	2b2a      	cmp	r3, #42	; 0x2a
 80132fa:	d015      	beq.n	8013328 <_vfiprintf_r+0x13c>
 80132fc:	9a07      	ldr	r2, [sp, #28]
 80132fe:	4654      	mov	r4, sl
 8013300:	2000      	movs	r0, #0
 8013302:	f04f 0c0a 	mov.w	ip, #10
 8013306:	4621      	mov	r1, r4
 8013308:	f811 3b01 	ldrb.w	r3, [r1], #1
 801330c:	3b30      	subs	r3, #48	; 0x30
 801330e:	2b09      	cmp	r3, #9
 8013310:	d94e      	bls.n	80133b0 <_vfiprintf_r+0x1c4>
 8013312:	b1b0      	cbz	r0, 8013342 <_vfiprintf_r+0x156>
 8013314:	9207      	str	r2, [sp, #28]
 8013316:	e014      	b.n	8013342 <_vfiprintf_r+0x156>
 8013318:	eba0 0308 	sub.w	r3, r0, r8
 801331c:	fa09 f303 	lsl.w	r3, r9, r3
 8013320:	4313      	orrs	r3, r2
 8013322:	9304      	str	r3, [sp, #16]
 8013324:	46a2      	mov	sl, r4
 8013326:	e7d2      	b.n	80132ce <_vfiprintf_r+0xe2>
 8013328:	9b03      	ldr	r3, [sp, #12]
 801332a:	1d19      	adds	r1, r3, #4
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	9103      	str	r1, [sp, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	bfbb      	ittet	lt
 8013334:	425b      	neglt	r3, r3
 8013336:	f042 0202 	orrlt.w	r2, r2, #2
 801333a:	9307      	strge	r3, [sp, #28]
 801333c:	9307      	strlt	r3, [sp, #28]
 801333e:	bfb8      	it	lt
 8013340:	9204      	strlt	r2, [sp, #16]
 8013342:	7823      	ldrb	r3, [r4, #0]
 8013344:	2b2e      	cmp	r3, #46	; 0x2e
 8013346:	d10c      	bne.n	8013362 <_vfiprintf_r+0x176>
 8013348:	7863      	ldrb	r3, [r4, #1]
 801334a:	2b2a      	cmp	r3, #42	; 0x2a
 801334c:	d135      	bne.n	80133ba <_vfiprintf_r+0x1ce>
 801334e:	9b03      	ldr	r3, [sp, #12]
 8013350:	1d1a      	adds	r2, r3, #4
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	9203      	str	r2, [sp, #12]
 8013356:	2b00      	cmp	r3, #0
 8013358:	bfb8      	it	lt
 801335a:	f04f 33ff 	movlt.w	r3, #4294967295
 801335e:	3402      	adds	r4, #2
 8013360:	9305      	str	r3, [sp, #20]
 8013362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013448 <_vfiprintf_r+0x25c>
 8013366:	7821      	ldrb	r1, [r4, #0]
 8013368:	2203      	movs	r2, #3
 801336a:	4650      	mov	r0, sl
 801336c:	f7ec ff30 	bl	80001d0 <memchr>
 8013370:	b140      	cbz	r0, 8013384 <_vfiprintf_r+0x198>
 8013372:	2340      	movs	r3, #64	; 0x40
 8013374:	eba0 000a 	sub.w	r0, r0, sl
 8013378:	fa03 f000 	lsl.w	r0, r3, r0
 801337c:	9b04      	ldr	r3, [sp, #16]
 801337e:	4303      	orrs	r3, r0
 8013380:	3401      	adds	r4, #1
 8013382:	9304      	str	r3, [sp, #16]
 8013384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013388:	482c      	ldr	r0, [pc, #176]	; (801343c <_vfiprintf_r+0x250>)
 801338a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801338e:	2206      	movs	r2, #6
 8013390:	f7ec ff1e 	bl	80001d0 <memchr>
 8013394:	2800      	cmp	r0, #0
 8013396:	d03f      	beq.n	8013418 <_vfiprintf_r+0x22c>
 8013398:	4b29      	ldr	r3, [pc, #164]	; (8013440 <_vfiprintf_r+0x254>)
 801339a:	bb1b      	cbnz	r3, 80133e4 <_vfiprintf_r+0x1f8>
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	3307      	adds	r3, #7
 80133a0:	f023 0307 	bic.w	r3, r3, #7
 80133a4:	3308      	adds	r3, #8
 80133a6:	9303      	str	r3, [sp, #12]
 80133a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133aa:	443b      	add	r3, r7
 80133ac:	9309      	str	r3, [sp, #36]	; 0x24
 80133ae:	e767      	b.n	8013280 <_vfiprintf_r+0x94>
 80133b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80133b4:	460c      	mov	r4, r1
 80133b6:	2001      	movs	r0, #1
 80133b8:	e7a5      	b.n	8013306 <_vfiprintf_r+0x11a>
 80133ba:	2300      	movs	r3, #0
 80133bc:	3401      	adds	r4, #1
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	4619      	mov	r1, r3
 80133c2:	f04f 0c0a 	mov.w	ip, #10
 80133c6:	4620      	mov	r0, r4
 80133c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133cc:	3a30      	subs	r2, #48	; 0x30
 80133ce:	2a09      	cmp	r2, #9
 80133d0:	d903      	bls.n	80133da <_vfiprintf_r+0x1ee>
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d0c5      	beq.n	8013362 <_vfiprintf_r+0x176>
 80133d6:	9105      	str	r1, [sp, #20]
 80133d8:	e7c3      	b.n	8013362 <_vfiprintf_r+0x176>
 80133da:	fb0c 2101 	mla	r1, ip, r1, r2
 80133de:	4604      	mov	r4, r0
 80133e0:	2301      	movs	r3, #1
 80133e2:	e7f0      	b.n	80133c6 <_vfiprintf_r+0x1da>
 80133e4:	ab03      	add	r3, sp, #12
 80133e6:	9300      	str	r3, [sp, #0]
 80133e8:	462a      	mov	r2, r5
 80133ea:	4b16      	ldr	r3, [pc, #88]	; (8013444 <_vfiprintf_r+0x258>)
 80133ec:	a904      	add	r1, sp, #16
 80133ee:	4630      	mov	r0, r6
 80133f0:	f3af 8000 	nop.w
 80133f4:	4607      	mov	r7, r0
 80133f6:	1c78      	adds	r0, r7, #1
 80133f8:	d1d6      	bne.n	80133a8 <_vfiprintf_r+0x1bc>
 80133fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133fc:	07d9      	lsls	r1, r3, #31
 80133fe:	d405      	bmi.n	801340c <_vfiprintf_r+0x220>
 8013400:	89ab      	ldrh	r3, [r5, #12]
 8013402:	059a      	lsls	r2, r3, #22
 8013404:	d402      	bmi.n	801340c <_vfiprintf_r+0x220>
 8013406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013408:	f7ff fdaf 	bl	8012f6a <__retarget_lock_release_recursive>
 801340c:	89ab      	ldrh	r3, [r5, #12]
 801340e:	065b      	lsls	r3, r3, #25
 8013410:	f53f af12 	bmi.w	8013238 <_vfiprintf_r+0x4c>
 8013414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013416:	e711      	b.n	801323c <_vfiprintf_r+0x50>
 8013418:	ab03      	add	r3, sp, #12
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	462a      	mov	r2, r5
 801341e:	4b09      	ldr	r3, [pc, #36]	; (8013444 <_vfiprintf_r+0x258>)
 8013420:	a904      	add	r1, sp, #16
 8013422:	4630      	mov	r0, r6
 8013424:	f000 f880 	bl	8013528 <_printf_i>
 8013428:	e7e4      	b.n	80133f4 <_vfiprintf_r+0x208>
 801342a:	bf00      	nop
 801342c:	08016618 	.word	0x08016618
 8013430:	08016638 	.word	0x08016638
 8013434:	080165f8 	.word	0x080165f8
 8013438:	08016658 	.word	0x08016658
 801343c:	08016662 	.word	0x08016662
 8013440:	00000000 	.word	0x00000000
 8013444:	080131c7 	.word	0x080131c7
 8013448:	0801665e 	.word	0x0801665e

0801344c <_printf_common>:
 801344c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013450:	4616      	mov	r6, r2
 8013452:	4699      	mov	r9, r3
 8013454:	688a      	ldr	r2, [r1, #8]
 8013456:	690b      	ldr	r3, [r1, #16]
 8013458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801345c:	4293      	cmp	r3, r2
 801345e:	bfb8      	it	lt
 8013460:	4613      	movlt	r3, r2
 8013462:	6033      	str	r3, [r6, #0]
 8013464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013468:	4607      	mov	r7, r0
 801346a:	460c      	mov	r4, r1
 801346c:	b10a      	cbz	r2, 8013472 <_printf_common+0x26>
 801346e:	3301      	adds	r3, #1
 8013470:	6033      	str	r3, [r6, #0]
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	0699      	lsls	r1, r3, #26
 8013476:	bf42      	ittt	mi
 8013478:	6833      	ldrmi	r3, [r6, #0]
 801347a:	3302      	addmi	r3, #2
 801347c:	6033      	strmi	r3, [r6, #0]
 801347e:	6825      	ldr	r5, [r4, #0]
 8013480:	f015 0506 	ands.w	r5, r5, #6
 8013484:	d106      	bne.n	8013494 <_printf_common+0x48>
 8013486:	f104 0a19 	add.w	sl, r4, #25
 801348a:	68e3      	ldr	r3, [r4, #12]
 801348c:	6832      	ldr	r2, [r6, #0]
 801348e:	1a9b      	subs	r3, r3, r2
 8013490:	42ab      	cmp	r3, r5
 8013492:	dc26      	bgt.n	80134e2 <_printf_common+0x96>
 8013494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013498:	1e13      	subs	r3, r2, #0
 801349a:	6822      	ldr	r2, [r4, #0]
 801349c:	bf18      	it	ne
 801349e:	2301      	movne	r3, #1
 80134a0:	0692      	lsls	r2, r2, #26
 80134a2:	d42b      	bmi.n	80134fc <_printf_common+0xb0>
 80134a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134a8:	4649      	mov	r1, r9
 80134aa:	4638      	mov	r0, r7
 80134ac:	47c0      	blx	r8
 80134ae:	3001      	adds	r0, #1
 80134b0:	d01e      	beq.n	80134f0 <_printf_common+0xa4>
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	68e5      	ldr	r5, [r4, #12]
 80134b6:	6832      	ldr	r2, [r6, #0]
 80134b8:	f003 0306 	and.w	r3, r3, #6
 80134bc:	2b04      	cmp	r3, #4
 80134be:	bf08      	it	eq
 80134c0:	1aad      	subeq	r5, r5, r2
 80134c2:	68a3      	ldr	r3, [r4, #8]
 80134c4:	6922      	ldr	r2, [r4, #16]
 80134c6:	bf0c      	ite	eq
 80134c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134cc:	2500      	movne	r5, #0
 80134ce:	4293      	cmp	r3, r2
 80134d0:	bfc4      	itt	gt
 80134d2:	1a9b      	subgt	r3, r3, r2
 80134d4:	18ed      	addgt	r5, r5, r3
 80134d6:	2600      	movs	r6, #0
 80134d8:	341a      	adds	r4, #26
 80134da:	42b5      	cmp	r5, r6
 80134dc:	d11a      	bne.n	8013514 <_printf_common+0xc8>
 80134de:	2000      	movs	r0, #0
 80134e0:	e008      	b.n	80134f4 <_printf_common+0xa8>
 80134e2:	2301      	movs	r3, #1
 80134e4:	4652      	mov	r2, sl
 80134e6:	4649      	mov	r1, r9
 80134e8:	4638      	mov	r0, r7
 80134ea:	47c0      	blx	r8
 80134ec:	3001      	adds	r0, #1
 80134ee:	d103      	bne.n	80134f8 <_printf_common+0xac>
 80134f0:	f04f 30ff 	mov.w	r0, #4294967295
 80134f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134f8:	3501      	adds	r5, #1
 80134fa:	e7c6      	b.n	801348a <_printf_common+0x3e>
 80134fc:	18e1      	adds	r1, r4, r3
 80134fe:	1c5a      	adds	r2, r3, #1
 8013500:	2030      	movs	r0, #48	; 0x30
 8013502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013506:	4422      	add	r2, r4
 8013508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801350c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013510:	3302      	adds	r3, #2
 8013512:	e7c7      	b.n	80134a4 <_printf_common+0x58>
 8013514:	2301      	movs	r3, #1
 8013516:	4622      	mov	r2, r4
 8013518:	4649      	mov	r1, r9
 801351a:	4638      	mov	r0, r7
 801351c:	47c0      	blx	r8
 801351e:	3001      	adds	r0, #1
 8013520:	d0e6      	beq.n	80134f0 <_printf_common+0xa4>
 8013522:	3601      	adds	r6, #1
 8013524:	e7d9      	b.n	80134da <_printf_common+0x8e>
	...

08013528 <_printf_i>:
 8013528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801352c:	460c      	mov	r4, r1
 801352e:	4691      	mov	r9, r2
 8013530:	7e27      	ldrb	r7, [r4, #24]
 8013532:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013534:	2f78      	cmp	r7, #120	; 0x78
 8013536:	4680      	mov	r8, r0
 8013538:	469a      	mov	sl, r3
 801353a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801353e:	d807      	bhi.n	8013550 <_printf_i+0x28>
 8013540:	2f62      	cmp	r7, #98	; 0x62
 8013542:	d80a      	bhi.n	801355a <_printf_i+0x32>
 8013544:	2f00      	cmp	r7, #0
 8013546:	f000 80d8 	beq.w	80136fa <_printf_i+0x1d2>
 801354a:	2f58      	cmp	r7, #88	; 0x58
 801354c:	f000 80a3 	beq.w	8013696 <_printf_i+0x16e>
 8013550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013558:	e03a      	b.n	80135d0 <_printf_i+0xa8>
 801355a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801355e:	2b15      	cmp	r3, #21
 8013560:	d8f6      	bhi.n	8013550 <_printf_i+0x28>
 8013562:	a001      	add	r0, pc, #4	; (adr r0, 8013568 <_printf_i+0x40>)
 8013564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013568:	080135c1 	.word	0x080135c1
 801356c:	080135d5 	.word	0x080135d5
 8013570:	08013551 	.word	0x08013551
 8013574:	08013551 	.word	0x08013551
 8013578:	08013551 	.word	0x08013551
 801357c:	08013551 	.word	0x08013551
 8013580:	080135d5 	.word	0x080135d5
 8013584:	08013551 	.word	0x08013551
 8013588:	08013551 	.word	0x08013551
 801358c:	08013551 	.word	0x08013551
 8013590:	08013551 	.word	0x08013551
 8013594:	080136e1 	.word	0x080136e1
 8013598:	08013605 	.word	0x08013605
 801359c:	080136c3 	.word	0x080136c3
 80135a0:	08013551 	.word	0x08013551
 80135a4:	08013551 	.word	0x08013551
 80135a8:	08013703 	.word	0x08013703
 80135ac:	08013551 	.word	0x08013551
 80135b0:	08013605 	.word	0x08013605
 80135b4:	08013551 	.word	0x08013551
 80135b8:	08013551 	.word	0x08013551
 80135bc:	080136cb 	.word	0x080136cb
 80135c0:	680b      	ldr	r3, [r1, #0]
 80135c2:	1d1a      	adds	r2, r3, #4
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	600a      	str	r2, [r1, #0]
 80135c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135d0:	2301      	movs	r3, #1
 80135d2:	e0a3      	b.n	801371c <_printf_i+0x1f4>
 80135d4:	6825      	ldr	r5, [r4, #0]
 80135d6:	6808      	ldr	r0, [r1, #0]
 80135d8:	062e      	lsls	r6, r5, #24
 80135da:	f100 0304 	add.w	r3, r0, #4
 80135de:	d50a      	bpl.n	80135f6 <_printf_i+0xce>
 80135e0:	6805      	ldr	r5, [r0, #0]
 80135e2:	600b      	str	r3, [r1, #0]
 80135e4:	2d00      	cmp	r5, #0
 80135e6:	da03      	bge.n	80135f0 <_printf_i+0xc8>
 80135e8:	232d      	movs	r3, #45	; 0x2d
 80135ea:	426d      	negs	r5, r5
 80135ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135f0:	485e      	ldr	r0, [pc, #376]	; (801376c <_printf_i+0x244>)
 80135f2:	230a      	movs	r3, #10
 80135f4:	e019      	b.n	801362a <_printf_i+0x102>
 80135f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80135fa:	6805      	ldr	r5, [r0, #0]
 80135fc:	600b      	str	r3, [r1, #0]
 80135fe:	bf18      	it	ne
 8013600:	b22d      	sxthne	r5, r5
 8013602:	e7ef      	b.n	80135e4 <_printf_i+0xbc>
 8013604:	680b      	ldr	r3, [r1, #0]
 8013606:	6825      	ldr	r5, [r4, #0]
 8013608:	1d18      	adds	r0, r3, #4
 801360a:	6008      	str	r0, [r1, #0]
 801360c:	0628      	lsls	r0, r5, #24
 801360e:	d501      	bpl.n	8013614 <_printf_i+0xec>
 8013610:	681d      	ldr	r5, [r3, #0]
 8013612:	e002      	b.n	801361a <_printf_i+0xf2>
 8013614:	0669      	lsls	r1, r5, #25
 8013616:	d5fb      	bpl.n	8013610 <_printf_i+0xe8>
 8013618:	881d      	ldrh	r5, [r3, #0]
 801361a:	4854      	ldr	r0, [pc, #336]	; (801376c <_printf_i+0x244>)
 801361c:	2f6f      	cmp	r7, #111	; 0x6f
 801361e:	bf0c      	ite	eq
 8013620:	2308      	moveq	r3, #8
 8013622:	230a      	movne	r3, #10
 8013624:	2100      	movs	r1, #0
 8013626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801362a:	6866      	ldr	r6, [r4, #4]
 801362c:	60a6      	str	r6, [r4, #8]
 801362e:	2e00      	cmp	r6, #0
 8013630:	bfa2      	ittt	ge
 8013632:	6821      	ldrge	r1, [r4, #0]
 8013634:	f021 0104 	bicge.w	r1, r1, #4
 8013638:	6021      	strge	r1, [r4, #0]
 801363a:	b90d      	cbnz	r5, 8013640 <_printf_i+0x118>
 801363c:	2e00      	cmp	r6, #0
 801363e:	d04d      	beq.n	80136dc <_printf_i+0x1b4>
 8013640:	4616      	mov	r6, r2
 8013642:	fbb5 f1f3 	udiv	r1, r5, r3
 8013646:	fb03 5711 	mls	r7, r3, r1, r5
 801364a:	5dc7      	ldrb	r7, [r0, r7]
 801364c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013650:	462f      	mov	r7, r5
 8013652:	42bb      	cmp	r3, r7
 8013654:	460d      	mov	r5, r1
 8013656:	d9f4      	bls.n	8013642 <_printf_i+0x11a>
 8013658:	2b08      	cmp	r3, #8
 801365a:	d10b      	bne.n	8013674 <_printf_i+0x14c>
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	07df      	lsls	r7, r3, #31
 8013660:	d508      	bpl.n	8013674 <_printf_i+0x14c>
 8013662:	6923      	ldr	r3, [r4, #16]
 8013664:	6861      	ldr	r1, [r4, #4]
 8013666:	4299      	cmp	r1, r3
 8013668:	bfde      	ittt	le
 801366a:	2330      	movle	r3, #48	; 0x30
 801366c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013674:	1b92      	subs	r2, r2, r6
 8013676:	6122      	str	r2, [r4, #16]
 8013678:	f8cd a000 	str.w	sl, [sp]
 801367c:	464b      	mov	r3, r9
 801367e:	aa03      	add	r2, sp, #12
 8013680:	4621      	mov	r1, r4
 8013682:	4640      	mov	r0, r8
 8013684:	f7ff fee2 	bl	801344c <_printf_common>
 8013688:	3001      	adds	r0, #1
 801368a:	d14c      	bne.n	8013726 <_printf_i+0x1fe>
 801368c:	f04f 30ff 	mov.w	r0, #4294967295
 8013690:	b004      	add	sp, #16
 8013692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013696:	4835      	ldr	r0, [pc, #212]	; (801376c <_printf_i+0x244>)
 8013698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801369c:	6823      	ldr	r3, [r4, #0]
 801369e:	680e      	ldr	r6, [r1, #0]
 80136a0:	061f      	lsls	r7, r3, #24
 80136a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80136a6:	600e      	str	r6, [r1, #0]
 80136a8:	d514      	bpl.n	80136d4 <_printf_i+0x1ac>
 80136aa:	07d9      	lsls	r1, r3, #31
 80136ac:	bf44      	itt	mi
 80136ae:	f043 0320 	orrmi.w	r3, r3, #32
 80136b2:	6023      	strmi	r3, [r4, #0]
 80136b4:	b91d      	cbnz	r5, 80136be <_printf_i+0x196>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	f023 0320 	bic.w	r3, r3, #32
 80136bc:	6023      	str	r3, [r4, #0]
 80136be:	2310      	movs	r3, #16
 80136c0:	e7b0      	b.n	8013624 <_printf_i+0xfc>
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	f043 0320 	orr.w	r3, r3, #32
 80136c8:	6023      	str	r3, [r4, #0]
 80136ca:	2378      	movs	r3, #120	; 0x78
 80136cc:	4828      	ldr	r0, [pc, #160]	; (8013770 <_printf_i+0x248>)
 80136ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80136d2:	e7e3      	b.n	801369c <_printf_i+0x174>
 80136d4:	065e      	lsls	r6, r3, #25
 80136d6:	bf48      	it	mi
 80136d8:	b2ad      	uxthmi	r5, r5
 80136da:	e7e6      	b.n	80136aa <_printf_i+0x182>
 80136dc:	4616      	mov	r6, r2
 80136de:	e7bb      	b.n	8013658 <_printf_i+0x130>
 80136e0:	680b      	ldr	r3, [r1, #0]
 80136e2:	6826      	ldr	r6, [r4, #0]
 80136e4:	6960      	ldr	r0, [r4, #20]
 80136e6:	1d1d      	adds	r5, r3, #4
 80136e8:	600d      	str	r5, [r1, #0]
 80136ea:	0635      	lsls	r5, r6, #24
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	d501      	bpl.n	80136f4 <_printf_i+0x1cc>
 80136f0:	6018      	str	r0, [r3, #0]
 80136f2:	e002      	b.n	80136fa <_printf_i+0x1d2>
 80136f4:	0671      	lsls	r1, r6, #25
 80136f6:	d5fb      	bpl.n	80136f0 <_printf_i+0x1c8>
 80136f8:	8018      	strh	r0, [r3, #0]
 80136fa:	2300      	movs	r3, #0
 80136fc:	6123      	str	r3, [r4, #16]
 80136fe:	4616      	mov	r6, r2
 8013700:	e7ba      	b.n	8013678 <_printf_i+0x150>
 8013702:	680b      	ldr	r3, [r1, #0]
 8013704:	1d1a      	adds	r2, r3, #4
 8013706:	600a      	str	r2, [r1, #0]
 8013708:	681e      	ldr	r6, [r3, #0]
 801370a:	6862      	ldr	r2, [r4, #4]
 801370c:	2100      	movs	r1, #0
 801370e:	4630      	mov	r0, r6
 8013710:	f7ec fd5e 	bl	80001d0 <memchr>
 8013714:	b108      	cbz	r0, 801371a <_printf_i+0x1f2>
 8013716:	1b80      	subs	r0, r0, r6
 8013718:	6060      	str	r0, [r4, #4]
 801371a:	6863      	ldr	r3, [r4, #4]
 801371c:	6123      	str	r3, [r4, #16]
 801371e:	2300      	movs	r3, #0
 8013720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013724:	e7a8      	b.n	8013678 <_printf_i+0x150>
 8013726:	6923      	ldr	r3, [r4, #16]
 8013728:	4632      	mov	r2, r6
 801372a:	4649      	mov	r1, r9
 801372c:	4640      	mov	r0, r8
 801372e:	47d0      	blx	sl
 8013730:	3001      	adds	r0, #1
 8013732:	d0ab      	beq.n	801368c <_printf_i+0x164>
 8013734:	6823      	ldr	r3, [r4, #0]
 8013736:	079b      	lsls	r3, r3, #30
 8013738:	d413      	bmi.n	8013762 <_printf_i+0x23a>
 801373a:	68e0      	ldr	r0, [r4, #12]
 801373c:	9b03      	ldr	r3, [sp, #12]
 801373e:	4298      	cmp	r0, r3
 8013740:	bfb8      	it	lt
 8013742:	4618      	movlt	r0, r3
 8013744:	e7a4      	b.n	8013690 <_printf_i+0x168>
 8013746:	2301      	movs	r3, #1
 8013748:	4632      	mov	r2, r6
 801374a:	4649      	mov	r1, r9
 801374c:	4640      	mov	r0, r8
 801374e:	47d0      	blx	sl
 8013750:	3001      	adds	r0, #1
 8013752:	d09b      	beq.n	801368c <_printf_i+0x164>
 8013754:	3501      	adds	r5, #1
 8013756:	68e3      	ldr	r3, [r4, #12]
 8013758:	9903      	ldr	r1, [sp, #12]
 801375a:	1a5b      	subs	r3, r3, r1
 801375c:	42ab      	cmp	r3, r5
 801375e:	dcf2      	bgt.n	8013746 <_printf_i+0x21e>
 8013760:	e7eb      	b.n	801373a <_printf_i+0x212>
 8013762:	2500      	movs	r5, #0
 8013764:	f104 0619 	add.w	r6, r4, #25
 8013768:	e7f5      	b.n	8013756 <_printf_i+0x22e>
 801376a:	bf00      	nop
 801376c:	08016669 	.word	0x08016669
 8013770:	0801667a 	.word	0x0801667a

08013774 <_sbrk_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d06      	ldr	r5, [pc, #24]	; (8013790 <_sbrk_r+0x1c>)
 8013778:	2300      	movs	r3, #0
 801377a:	4604      	mov	r4, r0
 801377c:	4608      	mov	r0, r1
 801377e:	602b      	str	r3, [r5, #0]
 8013780:	f7ed fdba 	bl	80012f8 <_sbrk>
 8013784:	1c43      	adds	r3, r0, #1
 8013786:	d102      	bne.n	801378e <_sbrk_r+0x1a>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	b103      	cbz	r3, 801378e <_sbrk_r+0x1a>
 801378c:	6023      	str	r3, [r4, #0]
 801378e:	bd38      	pop	{r3, r4, r5, pc}
 8013790:	20011660 	.word	0x20011660

08013794 <__sread>:
 8013794:	b510      	push	{r4, lr}
 8013796:	460c      	mov	r4, r1
 8013798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801379c:	f000 f8a8 	bl	80138f0 <_read_r>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	bfab      	itete	ge
 80137a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80137a6:	89a3      	ldrhlt	r3, [r4, #12]
 80137a8:	181b      	addge	r3, r3, r0
 80137aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137ae:	bfac      	ite	ge
 80137b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80137b2:	81a3      	strhlt	r3, [r4, #12]
 80137b4:	bd10      	pop	{r4, pc}

080137b6 <__swrite>:
 80137b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ba:	461f      	mov	r7, r3
 80137bc:	898b      	ldrh	r3, [r1, #12]
 80137be:	05db      	lsls	r3, r3, #23
 80137c0:	4605      	mov	r5, r0
 80137c2:	460c      	mov	r4, r1
 80137c4:	4616      	mov	r6, r2
 80137c6:	d505      	bpl.n	80137d4 <__swrite+0x1e>
 80137c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137cc:	2302      	movs	r3, #2
 80137ce:	2200      	movs	r2, #0
 80137d0:	f000 f870 	bl	80138b4 <_lseek_r>
 80137d4:	89a3      	ldrh	r3, [r4, #12]
 80137d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137de:	81a3      	strh	r3, [r4, #12]
 80137e0:	4632      	mov	r2, r6
 80137e2:	463b      	mov	r3, r7
 80137e4:	4628      	mov	r0, r5
 80137e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137ea:	f000 b817 	b.w	801381c <_write_r>

080137ee <__sseek>:
 80137ee:	b510      	push	{r4, lr}
 80137f0:	460c      	mov	r4, r1
 80137f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f6:	f000 f85d 	bl	80138b4 <_lseek_r>
 80137fa:	1c43      	adds	r3, r0, #1
 80137fc:	89a3      	ldrh	r3, [r4, #12]
 80137fe:	bf15      	itete	ne
 8013800:	6560      	strne	r0, [r4, #84]	; 0x54
 8013802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801380a:	81a3      	strheq	r3, [r4, #12]
 801380c:	bf18      	it	ne
 801380e:	81a3      	strhne	r3, [r4, #12]
 8013810:	bd10      	pop	{r4, pc}

08013812 <__sclose>:
 8013812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013816:	f000 b81b 	b.w	8013850 <_close_r>
	...

0801381c <_write_r>:
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	4d07      	ldr	r5, [pc, #28]	; (801383c <_write_r+0x20>)
 8013820:	4604      	mov	r4, r0
 8013822:	4608      	mov	r0, r1
 8013824:	4611      	mov	r1, r2
 8013826:	2200      	movs	r2, #0
 8013828:	602a      	str	r2, [r5, #0]
 801382a:	461a      	mov	r2, r3
 801382c:	f7ed fd13 	bl	8001256 <_write>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d102      	bne.n	801383a <_write_r+0x1e>
 8013834:	682b      	ldr	r3, [r5, #0]
 8013836:	b103      	cbz	r3, 801383a <_write_r+0x1e>
 8013838:	6023      	str	r3, [r4, #0]
 801383a:	bd38      	pop	{r3, r4, r5, pc}
 801383c:	20011660 	.word	0x20011660

08013840 <abort>:
 8013840:	b508      	push	{r3, lr}
 8013842:	2006      	movs	r0, #6
 8013844:	f000 f88e 	bl	8013964 <raise>
 8013848:	2001      	movs	r0, #1
 801384a:	f7ed fcdd 	bl	8001208 <_exit>
	...

08013850 <_close_r>:
 8013850:	b538      	push	{r3, r4, r5, lr}
 8013852:	4d06      	ldr	r5, [pc, #24]	; (801386c <_close_r+0x1c>)
 8013854:	2300      	movs	r3, #0
 8013856:	4604      	mov	r4, r0
 8013858:	4608      	mov	r0, r1
 801385a:	602b      	str	r3, [r5, #0]
 801385c:	f7ed fd17 	bl	800128e <_close>
 8013860:	1c43      	adds	r3, r0, #1
 8013862:	d102      	bne.n	801386a <_close_r+0x1a>
 8013864:	682b      	ldr	r3, [r5, #0]
 8013866:	b103      	cbz	r3, 801386a <_close_r+0x1a>
 8013868:	6023      	str	r3, [r4, #0]
 801386a:	bd38      	pop	{r3, r4, r5, pc}
 801386c:	20011660 	.word	0x20011660

08013870 <_fstat_r>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4d07      	ldr	r5, [pc, #28]	; (8013890 <_fstat_r+0x20>)
 8013874:	2300      	movs	r3, #0
 8013876:	4604      	mov	r4, r0
 8013878:	4608      	mov	r0, r1
 801387a:	4611      	mov	r1, r2
 801387c:	602b      	str	r3, [r5, #0]
 801387e:	f7ed fd12 	bl	80012a6 <_fstat>
 8013882:	1c43      	adds	r3, r0, #1
 8013884:	d102      	bne.n	801388c <_fstat_r+0x1c>
 8013886:	682b      	ldr	r3, [r5, #0]
 8013888:	b103      	cbz	r3, 801388c <_fstat_r+0x1c>
 801388a:	6023      	str	r3, [r4, #0]
 801388c:	bd38      	pop	{r3, r4, r5, pc}
 801388e:	bf00      	nop
 8013890:	20011660 	.word	0x20011660

08013894 <_isatty_r>:
 8013894:	b538      	push	{r3, r4, r5, lr}
 8013896:	4d06      	ldr	r5, [pc, #24]	; (80138b0 <_isatty_r+0x1c>)
 8013898:	2300      	movs	r3, #0
 801389a:	4604      	mov	r4, r0
 801389c:	4608      	mov	r0, r1
 801389e:	602b      	str	r3, [r5, #0]
 80138a0:	f7ed fd11 	bl	80012c6 <_isatty>
 80138a4:	1c43      	adds	r3, r0, #1
 80138a6:	d102      	bne.n	80138ae <_isatty_r+0x1a>
 80138a8:	682b      	ldr	r3, [r5, #0]
 80138aa:	b103      	cbz	r3, 80138ae <_isatty_r+0x1a>
 80138ac:	6023      	str	r3, [r4, #0]
 80138ae:	bd38      	pop	{r3, r4, r5, pc}
 80138b0:	20011660 	.word	0x20011660

080138b4 <_lseek_r>:
 80138b4:	b538      	push	{r3, r4, r5, lr}
 80138b6:	4d07      	ldr	r5, [pc, #28]	; (80138d4 <_lseek_r+0x20>)
 80138b8:	4604      	mov	r4, r0
 80138ba:	4608      	mov	r0, r1
 80138bc:	4611      	mov	r1, r2
 80138be:	2200      	movs	r2, #0
 80138c0:	602a      	str	r2, [r5, #0]
 80138c2:	461a      	mov	r2, r3
 80138c4:	f7ed fd0a 	bl	80012dc <_lseek>
 80138c8:	1c43      	adds	r3, r0, #1
 80138ca:	d102      	bne.n	80138d2 <_lseek_r+0x1e>
 80138cc:	682b      	ldr	r3, [r5, #0]
 80138ce:	b103      	cbz	r3, 80138d2 <_lseek_r+0x1e>
 80138d0:	6023      	str	r3, [r4, #0]
 80138d2:	bd38      	pop	{r3, r4, r5, pc}
 80138d4:	20011660 	.word	0x20011660

080138d8 <__malloc_lock>:
 80138d8:	4801      	ldr	r0, [pc, #4]	; (80138e0 <__malloc_lock+0x8>)
 80138da:	f7ff bb45 	b.w	8012f68 <__retarget_lock_acquire_recursive>
 80138de:	bf00      	nop
 80138e0:	20011668 	.word	0x20011668

080138e4 <__malloc_unlock>:
 80138e4:	4801      	ldr	r0, [pc, #4]	; (80138ec <__malloc_unlock+0x8>)
 80138e6:	f7ff bb40 	b.w	8012f6a <__retarget_lock_release_recursive>
 80138ea:	bf00      	nop
 80138ec:	20011668 	.word	0x20011668

080138f0 <_read_r>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4d07      	ldr	r5, [pc, #28]	; (8013910 <_read_r+0x20>)
 80138f4:	4604      	mov	r4, r0
 80138f6:	4608      	mov	r0, r1
 80138f8:	4611      	mov	r1, r2
 80138fa:	2200      	movs	r2, #0
 80138fc:	602a      	str	r2, [r5, #0]
 80138fe:	461a      	mov	r2, r3
 8013900:	f7ed fc8c 	bl	800121c <_read>
 8013904:	1c43      	adds	r3, r0, #1
 8013906:	d102      	bne.n	801390e <_read_r+0x1e>
 8013908:	682b      	ldr	r3, [r5, #0]
 801390a:	b103      	cbz	r3, 801390e <_read_r+0x1e>
 801390c:	6023      	str	r3, [r4, #0]
 801390e:	bd38      	pop	{r3, r4, r5, pc}
 8013910:	20011660 	.word	0x20011660

08013914 <_raise_r>:
 8013914:	291f      	cmp	r1, #31
 8013916:	b538      	push	{r3, r4, r5, lr}
 8013918:	4604      	mov	r4, r0
 801391a:	460d      	mov	r5, r1
 801391c:	d904      	bls.n	8013928 <_raise_r+0x14>
 801391e:	2316      	movs	r3, #22
 8013920:	6003      	str	r3, [r0, #0]
 8013922:	f04f 30ff 	mov.w	r0, #4294967295
 8013926:	bd38      	pop	{r3, r4, r5, pc}
 8013928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801392a:	b112      	cbz	r2, 8013932 <_raise_r+0x1e>
 801392c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013930:	b94b      	cbnz	r3, 8013946 <_raise_r+0x32>
 8013932:	4620      	mov	r0, r4
 8013934:	f000 f830 	bl	8013998 <_getpid_r>
 8013938:	462a      	mov	r2, r5
 801393a:	4601      	mov	r1, r0
 801393c:	4620      	mov	r0, r4
 801393e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013942:	f000 b817 	b.w	8013974 <_kill_r>
 8013946:	2b01      	cmp	r3, #1
 8013948:	d00a      	beq.n	8013960 <_raise_r+0x4c>
 801394a:	1c59      	adds	r1, r3, #1
 801394c:	d103      	bne.n	8013956 <_raise_r+0x42>
 801394e:	2316      	movs	r3, #22
 8013950:	6003      	str	r3, [r0, #0]
 8013952:	2001      	movs	r0, #1
 8013954:	e7e7      	b.n	8013926 <_raise_r+0x12>
 8013956:	2400      	movs	r4, #0
 8013958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801395c:	4628      	mov	r0, r5
 801395e:	4798      	blx	r3
 8013960:	2000      	movs	r0, #0
 8013962:	e7e0      	b.n	8013926 <_raise_r+0x12>

08013964 <raise>:
 8013964:	4b02      	ldr	r3, [pc, #8]	; (8013970 <raise+0xc>)
 8013966:	4601      	mov	r1, r0
 8013968:	6818      	ldr	r0, [r3, #0]
 801396a:	f7ff bfd3 	b.w	8013914 <_raise_r>
 801396e:	bf00      	nop
 8013970:	20000024 	.word	0x20000024

08013974 <_kill_r>:
 8013974:	b538      	push	{r3, r4, r5, lr}
 8013976:	4d07      	ldr	r5, [pc, #28]	; (8013994 <_kill_r+0x20>)
 8013978:	2300      	movs	r3, #0
 801397a:	4604      	mov	r4, r0
 801397c:	4608      	mov	r0, r1
 801397e:	4611      	mov	r1, r2
 8013980:	602b      	str	r3, [r5, #0]
 8013982:	f7ed fc2f 	bl	80011e4 <_kill>
 8013986:	1c43      	adds	r3, r0, #1
 8013988:	d102      	bne.n	8013990 <_kill_r+0x1c>
 801398a:	682b      	ldr	r3, [r5, #0]
 801398c:	b103      	cbz	r3, 8013990 <_kill_r+0x1c>
 801398e:	6023      	str	r3, [r4, #0]
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	bf00      	nop
 8013994:	20011660 	.word	0x20011660

08013998 <_getpid_r>:
 8013998:	f7ed bc1c 	b.w	80011d4 <_getpid>

0801399c <_init>:
 801399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399e:	bf00      	nop
 80139a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139a2:	bc08      	pop	{r3}
 80139a4:	469e      	mov	lr, r3
 80139a6:	4770      	bx	lr

080139a8 <_fini>:
 80139a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139aa:	bf00      	nop
 80139ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ae:	bc08      	pop	{r3}
 80139b0:	469e      	mov	lr, r3
 80139b2:	4770      	bx	lr
